%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Ableton_logo_print.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: pas
%%CreationDate: 5/27/08
%%BoundingBox: 0 0 299 181
%%HiResBoundingBox: 0 0 298.5933 180.4214
%%CropBox: 0 0 298.5933 180.4214
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">live_pack_logo_cmyk</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-05-27T14:44:24+02:00</xap:CreateDate>
         <xap:ModifyDate>2008-05-27T14:44:24+02:00</xap:ModifyDate>
         <xap:MetadataDate>2008-05-27T14:44:24+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>156</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7NpH5i6xexaK8kECnUdQ&#xA;ktJwA+0a+mV4/F1/e9/DNVi105cOw9Uq+79brseslIR2HqlSVeUPNmp6faWFstJxqWtyW0rzFmKx&#xA;kQg8NxQ1lJyjS6mUQBz4p19362nT6iUQBzudfc15e83anpcZjSk4vdbaCQzFmKo3Hlw3FCa/2Y4N&#xA;TKA77muLUSj53Ok1l8+a/Naai9u2n2slnftbI10xQNEOXEDk1Gf4d/btlx1uQiVcIqVbtx1UyDXC&#xA;KlW6Xf4884/8t+jf8jV/5ryr87m74NX5rL3wbXz35xLAfX9F695Vp9Px4/nMvfBfzWXvg9QtXkkt&#xA;oXkKNI6KztEaoSRU8D3XwzcxNgO1HJUySXYq7FXmvnn8yNa0L80/J3lWzihbT9c9T6+8gYybngnp&#xA;kEBeJFehrirx+X8xdf8AO5/K3V9V9OG5/wAWtblLYMiFEmtCtVLNuFmK/L6cVUfzB/M7X/OHkm4e&#xA;+WO2bSfOVtb2ZtuSH0RBcsiuamrKUry2wqy7zR+fPnPTbf8AMI20Nnz8tatZ2OmM0bH91O86v6g5&#xA;/EaW23T7R9sCr/PH5lfmXZeZLiDTvNXlXTrLhE8NldTAXEYeNWImVlchqmtK9KYVSH/lbH5uf9Tv&#xA;5P8A+R6f9U8VT/yF+Y/5mal5v0yx1HzZ5VvrG4mCXFrbTA3DpQkiEKqkv/KMVe/YFdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVeJeWf95/Kv8A22Jf1QZzmn5Y/wCv/wAS6PByh/XP6FPRQR/h+op/&#xA;zsMn/Yrjh/g/4Z/xLHH/AA/8M/Ust1YfVSQR/wA7Aw+kenXIx6f8M/Uo6f8ADEZECbPXP3dg4/Sr&#xA;b6i3ED7f93uvxeO/TLByl9P1dWY5S+n6+qC4f8U6B/yN/wCvmV15Q/HxYf8AKtcifGv7ny/1HWXb&#xA;6f3mIHlj/HxX/lW9tsRSytxSMfu02h/uh8I+x/k+HtnRw+kO9jyCtkkuxV2KvCfzZ/8AWgvy2+n/&#xA;AJONhV5F5GH+4X8rj2/xm/8AxOwwJQdwK+R9aA6/43tf+oe8woTTz5/cfnD/AOBDpv8AydvcCWV+&#xA;fdM1N/M9w8PlnybdRtFblbnUrxYrx6wIeUyG8tSG/wBh07nrhQx79E6z/wBSl5A/7iCf95LFWS/l&#xA;tpmqJ550d5fK/kq3jW4BafT71JLuOgJ5wIL25q69R8B+jrir6cwK7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq+dtF/Nj8v/rejQWmjaz+jBrn1bSdWYw/V5ppGRXZyaGiD02CAVp3rtmHDQwjVX6Tb&#xA;ix0kI1X8JtAeVfzsh1D9FyeddOueFt5gmgs9cso4obSNiY5I4plH22Umr0APGh+I1y7Jp4zIP802&#xA;25MEZEE/wm0VY/m5ZyeU9U13zmj3U+k+ZpLbRbXT0jgeRuIkWJ9uPBQpJc/F7k4MumjOr6G1yYIz&#xA;q+htK/MX5xaFH5Ou9T0Py9LNe/plRq0epGOaC3LAuESSFkJE6q6qRWlGqfs1gNFjF2Ls2wGlhvYu&#xA;zbJPMP5mfl7o1/c2beRb24fSoLe418p6f+hG5CEI9JGDMvqBTuBXauP5HD/NX8pi/mhR1n83vyks&#xA;Lu9jtfKV3qNrYw2d3PewIoiFvepGyyNzkBWhnRQCN2PUY/ksP81fymP+aHvWlXVnd6XZ3djtZXEE&#xA;ctqKcf3ToGTbt8JGZIFbN4CKwpdirsVeQfnDceQ9I8/eTfMWu3V8dXs3lXT9MsIRcNOKijOtQVCu&#xA;3apboBtirzjQPP8A5J8l6D5XtvLUJ13SD5kuRf3Op2YN3CQkK87ONasrenKCp+0SKUFaYVUYvOfk&#xA;vy15TvL7ynF+krvUfNcDahpfmC0UyWoKSyLxQMyhlZCqvy5ddgRiqM/Mdfym07WvOug32oavLca7&#xA;f2d/rN7ZWsc1tp0kbuyI7F0J5G5YGgPUDqDiq+7l/JvzD+b2oaXq3lZ59MSxFxLrwe/icmCIM1zK&#xA;kEqx/V3iAKyhB2J+1sq15fg/5xS1rVY9PTy1f2K3CSvY3t5JfR29yIQxf0WW6dj9gj4lG+3XbAqZ&#xA;eQNQ/wCcY283aGfL+h3dpq91L/uLurr64YVuEaip+9nkQvWlKKQKjcHFX0ZirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirxyw/5xo0CyvbUxa7qJ0jT9STVbDSCYzDHKpBZSSpY8girXY0Hia4q1Z/&#xA;84zeXoLi0WbXNQudIttQfVH0iT0hA9wxABqqhh8CqrbmtO1cVdP/AM4z+XprHV7F9avTa6jfDU7S&#xA;PjERa3ILVcVX4+SPwINKj3pRVEy/847aJP5HvPK9xrN3I17fpqUl9whXjLGhjVUiRVQJwPTx+7FV&#xA;nmD/AJx3s9YvpbxvM2o28upWtvZ+YSixVvxbKgDvsArN6ak7Hf6cVRF5/wA47eU5rbzDbW97dW1v&#xA;r1pYWPpLwYQR6cYjGULCrcvq6VqfH6FXpmk6dBpmlWem25YwWMEdtEXNWKRIEWpFN6LiqKxV2Kux&#xA;V5t+aH5Wax5m8w6B5n8v6tHpeuaCzCI3EXrQujEMNgdipr23r2pirCoP+cZdZtrLT/q/maJdUsda&#xA;l1lbxrPklWWL0x6PqU5CSCpFaUPtuqpXn/OMOtXmhalJceYIX806pq0erXN56LC2rGJ/gCV5VLXL&#xA;PWntTvirfmb/AJxn17WdfuNY/Tdi1xqscDatJcWfqsl0qqJ5LZSeIV2BIB8ae+FWRat+ReoXPn6b&#xA;XbTVobfRtR0n9C6nZehSU27Wv1VlhKngtQisD+z7jqFSTRP+ccfMv1rR7bzB5jgutD8tLdLokVtb&#xA;lZv9JJesrEjZXPKlW6U74VTPQv8AnHy60yHyJG+rxSN5Rvru+uWSEr9Y+syxyoq1Y04+iASfH2wK&#xA;9oxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVh+ofmZo2n+brjy9e+lb&#xA;C0hWee6muYEch4y6iK1LevL0C/Ap3OKo+z/MDydeLK1tqcbpbtClw/GRVje4lWCJJGZQEcysE4nc&#xA;GtaUOKpOPzl8jPqs+nwXyXAjsob2G4jJMchnR5Vh5kBEk9NFYB2FeYHXFUdF+aPkloDNPqAs0F01&#xA;iDco0YaZFVn4mhUooccpAeIqKncVVbn/ADK8rWet6po+p3IsbnTZY4wZQxWb1bZLleBC05kOQsde&#xA;TcTQYqoXn5r+TIrBru1vlu1jlhinADxiL1LtbRzK8iqsbRMxZkejUFaU3xpUUn5m+RnWZl1VCsEJ&#xA;uJH9OXj6YeOJiDwo3F50VgNwTQ4qutfzI8j3Xqejq0RMURndWWRG9FWVPVCsqkpycAMNienQ40qX&#xA;6r+b/kaz0C+1e11BL42kM0sdpEJBJKYYjLRQUqEbp6lOA8cVZrirsVdirsVdirsVdirsVdirsVYL&#xA;of5weV9QguZ72eDTooZjCoNzDcSfAzh3migLvbqgSrNKAADucNKmOr/mP5b01ouUrzRHUv0TdyRx&#xA;ysIbj0ZZeNAhMhrDxoleowKhrH82vJNxCZrjUYbWJrloLeVmLxvH6oiinaRRxjjlZgFLkD32ONKi&#xA;9O/MTy5qGvpo9tMTLPbRXNozK6tL6jzoyrEyrIBGLbkzEUoRiqG0P81fJ+qaFDqrXgti6QtLZusj&#xA;TK84biioE5S7xuOSAj4W8DjStXP5s+So47Ge3v47myvJkha8XksUayW0tyjc2Xi5/c8OCnkGNCK7&#xA;Y0qKP5m+RRDNOdWjENu0SSyFJQtZ/U9IqSnxK/oSUZaj4Tviq5PzJ8jPbXFz+l4litAhuuYdGi9T&#xA;kU9RGUOvIISKjcb9CMaVC3X5p+UFismsbwX899d2tnFbxBw6m6u47TnICv7sKZeQ505AfDXFWX4q&#xA;7FXYq7FUqvvK+i3q3/rwsH1IwNdSpJIj87UhreRGVh6bxMoZWShqK4qgYfy98qR6BqOgm0aXTdXM&#xA;j6kksssjzyS7ySNIzc+bt8RYEfFviqEj/KfyBEl6kOlLCmoSie6WKSVFaQSSSAhVcBaNO+y7U26A&#xA;Yqs1H8o/IeomD63YPILa5+t26meakbmNInVfj2V1iUsO5FeuNqidV/LbyrqmqzapdxXJup5YrlxH&#xA;d3McYuYIxFBcLEkiossSL8DgVB36gEKoaL8pvJSWlzZPBcT2N9IZ9Qs5ru5khubhplnaedGkIkkZ&#xA;0HJm6jbpiqF0f8qbGw1+S/lvHuNOSKSKw04tdfu/WuoLx3eSW5mVnM1orFo44+ZJMnNjXFURJ+UP&#xA;keVw729yWWNbdCLy5XhaRktHaLSQcbdGPJYx8P0Yqvuvym8kXFuIPqk0KfVBpzmC6uImeyCCNrZ2&#xA;WQFo3VV5jvQHqMVZhirsVdirsVdirsVdirsVdirsVY7qH5f+V77TrfTpbeRLO2SaBY4Z5oy1vdEN&#xA;cQSMrhnimKjmjGhoPDFVbU/JmhajZx2sqzQrDePqUEtvcTQSx3cnqFpVkjZW/wB3P8P2d+lMVSV/&#xA;ya/L5rX6munypYv6f1mzW6uRFcCGT1YluF9T96Elq45V+Ik9ziqaWfkHy9a6rbauBdT6tax+hFqF&#xA;xd3E03ohnf0mZ3PKPlKaqdjQV3UYqgrX8qvJ9pbrFbR3cTwmP6lcC9ujParEsiqltK0heJaXEoIU&#xA;7hiDtQBVbB+UnkeHTrfS0tZ/0ZZuktjYm7ujDbyxq6iWFfU+CSsrPzG/P4vtb4qhPL/5TaZYvfjV&#xA;ZxqltdRw21vaUuEhhtrdLmNIgstxc7enfSKVThGBTjGuKq9z+T3ka6aZ7uC6uZbve+llvbtnuSqe&#xA;nGZ29Ssnpx/CnLoMVR0n5b+U31L9IrbzRXD3EF3cCK4nSOaW1lE9uZkD8ZBFKvNFOwNfE4qyfFXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWIfmX5p1HQNKtzpxCXN1IUEzANwVRU0Vqip265ga/&#xA;USxRHDzLh63PLHH08y80/wCVn+ef+rl/yQt/+qean+UM3877B+p1X57N3/YHf8rP88/9XL/khb/9&#xA;U8f5QzfzvsH6l/PZu/7A7/lZ/nn/AKuX/JC3/wCqeP8AKGb+d9g/Uv57N3/YHf8AKz/PP/Vy/wCS&#xA;Fv8A9U8f5QzfzvsH6l/PZu/7A7/lZ/nn/q5f8kLf/qnj/KGb+d9g/Uv57N3/AGB3/Kz/ADz/ANXL&#xA;/khb/wDVPH+UM3877B+pfz2bv+wNp+aHndXVjqAcAglGhgofY0QH7jiO0M3f9gUa/L3/AGB7dpF6&#xA;1/pNlfMoRrqCKcoOgMiBqfRXOixT4oiXeHfY5cUQe8IvJs3yf+cf/OQf5laV+YOq6NoGoJpmnaZJ&#xA;9WSNbe3maRlUFpHaeOU1LE0AoKYpDCf+hk/zq/6mL/pysP8AqhitO/6GT/Or/qYv+nKw/wCqGK07&#xA;/oZP86v+pi/6crD/AKoYrTv+hk/zq/6mL/pysP8AqhitO/6GT/Or/qYv+nKw/wCqGK07/oZP86v+&#xA;pi/6crD/AKoYrT0b8hfz5/MHzD+YNn5c8x3ianaamk4jcwQQvC8ELzhlMCRAhhGVIYHFX1Bih2Ku&#xA;xV2KuxVRvp2t7K4uFALQxvIAehKqT/DIzlUSUSNC3mx8+a3faZbxSCJDfaTqE80kalWEkPrqhQ12&#xA;/uRmo/OTlEA9YS/T+p1n5ucojzjL7LQcXmrUl0GPRQR6DaJLMZqt6vqVf9qvTitKZWNTLg4OnAwG&#xA;eXBw/wBC0VZ+etastLe2jEcgs9Gt7qGSQMzGRnijPI132k/DJw1k4xrugD9362UdVKMa7oAojUfP&#xA;euR3Cenquk2yyQwy/V5kuWkQyRK5DFEdereOTnrJ39UBsO/u9zLJqpg7SgPmhf8AlYHmD/q+aL/y&#xA;LvP+qWQ/Oz/nw+Uv1MPzc/50Pt/UyjyP5h1HV2uxeX9jeiEJwWyWZWXlyqX9VU2NNqZmaPPKd2Yn&#xA;3X+ly9LmlO7MT7mV5nOW7FXm/wCdf/HN0z/jNJ/xEZqO1vpi6ztP6R72B+V9As9VtNamuGdW06xk&#xA;uoOBABdASOVQdts1unwiYkT/AAxt1+DCJiRP8ItmD+V9M0vS/MlrADIGsbCRZJQrMrStJy4mgpuo&#xA;OZx08YRmB/Ni535eMRMD+bH9Krc+U9KsNO8xaXAGaL6zpsaTScWlUTSRcqNQfznJS00YxnEd8ftp&#xA;MtPGMZRHfH9CXXf5f6PAl/Mn1qcWmpw2cdvEUMjxOsTMBUAcj623yyqWiiLO5qQH3frapaOAs77S&#xA;A+79aN/wB5f/AOrLrn/B2f8A1Uyz8lD+bk/2LP8AKQ/mz+z9bv8AAHl//qy65/wdn/1Ux/JQ/m5P&#xA;9iv5SH82f2frec6pbpbaldW8cckMcUrokU9PVVVYgB+O3Id6ZqskakQ6zJGpEPoXyp/yi+j/APMD&#xA;bf8AJlc6nTf3cf6o+56PT/3cfcPuTTLm58C/nf8A+TZ80f8AMc/6hikPQ/L/AOQ3lO/sPKM091eC&#xA;TX9C1HU7rgyALcWwgaLgCh+EfWdwevEe+KLTjWfy28t+Y9A8vSXMbWsmn/l+uqRvaBIzJcxJGytL&#xA;8J5irNy7mvXCrX5kflx5b1aC91J42tZtC8k6df2qWoSNHnMlyOUo4nn8MIXxpiqjN+RHkmy85azo&#xA;p0fzHrdrYw2bwzabJZgI00bGQSm4aDdmWoC1pitoz/lRXkL/AKkzzp/yO0n/ALKMCsY/Mn8qPKWg&#xA;+Tb7VLDyv5psLuD0vTu9Rk097SPnKqkyi3llkoQaCg6kYpY1/wA42f8Ak6vLv/R7/wBQE+Kl9zYo&#xA;dirsVdirsVQmsf8AHJvf+YeX/iByvL9B9xYz+kvHNJgmnh0eCFDJNLo2ppHGoqWZnuwAB4k5oMYJ&#xA;4QP5kv8AfOkxgkRA/mS/S5LG9F1DaGCQXX6BkX6uVPqVIkIHGla4iBsCt+D9aeE3Vb+G1eW89umo&#xA;QToYpk0C2DxsKMp9e32I7HGUSOIH/Ux98USBFg/6mPvCI1XVEimgjOq2kBW0tQYZdOjndf8AR02M&#xA;jRSFvvyWTJVeoch/DfQeTPJko/UBsP4b6e5B/pmP/q9WP/cJi/6oZDxf6Uf9IP1Nfij+eP8AS/sZ&#xA;z+WV6ly2oBb+C8KiMlYLNbTjXluSqR8q5sez53e4PuFOfop3e9/CmdZs3Pdirzf86/8Ajm6Z/wAZ&#xA;pP8AiIzUdrfTF1naf0j3sW/L/wD45vmn/tlT/wDEWzD0X05P6hcTR/TP+qy7X72zgGtwTTJHNcaf&#xA;pwgjZgGcq8teIPWnIdMzc8wBME7mMf0udlkAZAn+GP6VfXL2zj1HXbR5kS5mvNJMULMA7gSQk8VO&#xA;5oFNaZLNMCUxe9w/QnLIXIXvcf0N6tGZbHWoxE05fXLcCFJPRZyY7b4RJ+zXxw5RcZdf3g/3qzFi&#xA;X9cf71V/Q0//AFL17/3F5P8Aqvh8I/zD/p/2svC/on/TH9bv0NP/ANS9e/8AcXk/6r4+Ef5h/wBP&#xA;+1fC/on/AEx/W8f1uIxaxfRmIwFJ5FMLP6pSjn4TJ+1Tx75o8oqR6bukyipn3voLyp/yi+j/APMD&#xA;bf8AJlc6jTf3cf6o+56LT/3cfcPuTTLm58C/nf8A+TZ80f8AMc/6hikPo3yf/wAcr8tf/AT1f/iF&#xA;hhQlfl/WtI1HQreGwvIbqWy/LVobxIXVzFKqRq0cnEni4KmqnfFVus6zpOq+XvNkumXkN7HB5C06&#xA;GZ4HWQJKHu2MbFSaMA4qDuMVTvXtDn1H81PMskfl+81pY7bTlMlnq8ml+mTHIeLJHLAZOVOpJpTF&#xA;Vb/B95/1Imsf+FVc/wDZZirCPzn8tXNp+Xmo3D+UtR01Y2gJvbnzDLfRx1mUb20lxOsla8fs7VrX&#xA;bFXmX/ONn/k6vLv/AEe/9QE+BJfc2KHYq7FXYq7FULq11HZ6VeXckfrR28EkrxfzhELFfppTGrUv&#xA;liH85vMk2k2ci2GjWaajpeunTn05phfWIt7ecoG5SNwf1U5g0+IHtlUcEI0QOXJrjhiKoclDTfzT&#xA;80p5ci0vUGtbu6v/ACtePYaxaSStqNqLdZyPrU3I/E3oHsCKrv1rPw48XFW7LgF8Vbq2s/nRrena&#xA;V5dsLGwstQvJ/L9rPqupaisk8l0EBLRF1kj2X0vjYnlyHUUyMsEJEkjmESxRNkjmng/NHztp/n3V&#xA;7u6itDp1v5Xj1SDy4xZo41WJJIkiPIj1UM1ZGXYxhjSoFJ8Ee5lwhDR/85Deb7PTNWa8s9D1C9j0&#xA;m01eyls45DFAbue3jNvcrzryRLncBqhtiT2HBHuXhD0z8nvzI8y+ZNe8w6Hr1lY202lpZ3MDacJF&#xA;TheRepwf1CxZlHHfbevtkgAOSgPU8UuxV5v+df8AxzdM/wCM0n/ERmo7W+mLrO0/pHvYh5B0r6/+&#xA;l2kubiG1gs3a5t7MgTTrufTAYEGvH+GYOjx8XFuaEenVwtHj4uLc1XTqzGXy5pS2+rNfm71Afo2x&#xA;nSWVUe8jDPMOEW3wH90uZ5wRqXFcvTH39f1OccMfVdn0x9/VT1/y4INO8wv6r3d8XsJbe+uAGuIV&#xA;Mig/GACOCg1Iptkc2Coz6n07nmFzYajLqfTv1CprvlTTrSJRealfXXqXlqb+F2UpcPKVQGgWiU9z&#xA;0FOu+HNpox5ykdxfmnLgiBuSdxfmhr3yhok2uazMVvkt7OS2jWwtSoZnuWA5xgj+7HLYex37ZCel&#xA;gZyPqoVsPP8AQwlp4mcj6qFbDz/Qpj8vNHt550vNQvXVdRjsoPRZAeM0Ucic+Q6gy7kdu2D8jAE2&#xA;T9VfMBA0cQTZl9VPPNb09dN1i9sFcyLazPErnYkIxAJzWZYcMzHuLrMsOGRj3PoLyp/yi+j/APMD&#xA;bf8AJlc6jTf3cf6o+56LT/3cfcPuTTLm58C/nf8A+TZ80f8AMc/6hikPafy+/LZb7QvJS3XmLX0v&#xA;tV0y9NvNYtH9StLRwpa2LOhZC5dT1apUig2OFCLs/wAvNB1HyxoiaXLf6BrN/wCSEmub/T1SKynT&#xA;hCZEvG4kyPK8tTQg8Qd+mKrz+W9jqvm23063nn0TQLjyZZT6ra6YEt/rzrLIpSR+DKaLx5niTSnj&#xA;iqjfeS/Jq33n19RudV8x39rolreQ3crr9bt4GR2jihf00/eD0Q3MKVKEDryqqks35GaGfK119X1f&#xA;WDrVnosOttrDOp0uX1ldvQjGz9IjT4vevbFUu/NL8mPKeheVvNN5p2rardah5ZlsPUivHjeBhemN&#xA;Ao4qrcgJS3L6Kd8Chhv/ADjZ/wCTq8u/9Hv/AFAT4pL7mxQ7FXYq7FXYq4gEUO4PUYqxmy/LH8u7&#xA;K4kubXy5p8U8nq85Bbx8qToY5VqRsroxUqNqHFV1l+Wv5f2LXLWfl3T7c3kBtLoR28aiSAijRsAK&#xA;UanxePfFUPcflP8Altc2dlZz+W7CS20+os0MK/ACxYivVgWNSGqCcVTGTyR5Pl1WPVpNGs31CK3N&#xA;nHcGFCRbleHpAUpx4Er0+zt0xVBaf+V35d6fZ3tnaeXbGO11EKL2Ewq6yqrB1VufL4VdQwHQHfFU&#xA;6sdB0SwvLm9sbC3tby9Ea3dxDGiPKsK8Ig7KAWCLsvhiqOxV2KvOfzqjkOladIFJjSdwzU2BZNq/&#xA;OhzU9rD0x97rO0x6R73len6nqGnTm4sLiS2mKlS8TFSVPUGnbbNNDJKJuJp1EMkom4mkSnmbzEkx&#xA;nXU7oTMqo0nrPyKoSyqTXcAsfvyQz5LviPzZ+PO7srT5h11jdE385N6At2TI37wAUAbffbb5bY+N&#xA;Pfc7818ee+53ddeYdduraK2ub+eWCEhoo2kYgFfsnr1HbwxlmmRRJpZZ5kUSVVPNfmRLt7xdSuBc&#xA;yII3l9Q1KL9kH5VwjUZLviNpGoyXdm0P+m9ZqT9enqZhdE+o2846S9ft++R8Wfeed/HvY+LPvPO/&#xA;ihZppZ5nmmdpJpGLySMSWZmNSST1JOQJJNlgSSbL6N8sI6eWtJRwVdbK3VlOxBESgg51enH7uP8A&#xA;VH3PTYBWOPuCZ5c2vgj89IZofzb8zrKjRlrwuoYEVV1VlYV7EGoxSEl038w/Pel6bFpmm6/f2enw&#xA;FmhtoLiSNEL15cQpFAeR2HffFXL+YnnxNJbSF8wagNLaBbQ2X1iT0hAo4iIJWgXieNB226Yqvg/M&#xA;nz/BPYTxeYL9ZdMhNtYMJ3/dQtSsagmnE8V2PgPAYrSxPzD89Jqd7qia9fLqOox+je3QncSSRgUC&#xA;sQeij7P8vbFaWyef/O0vl9PL0muXjaIiiNbAzP6XBTVUpX7C9l6DFVC+85ebL9L+O+1i8uU1T0f0&#xA;iss8ji4+r09H1QT8fp0HGvTFWcf84z288v5z6E8aF0gS8kmYCoRDZzIGb25uo+nFS+4sUOxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxVSurW1u4Gt7qFJ4H2eKRQ6nvupqMjKIkKIsIlEEUUq/wV5S/wCr&#xA;Tbf8ixlP5TF/NDT+Wx/zQ7/BXlL/AKtNt/yLGP5TF/NC/lsf80O/wV5S/wCrTbf8ixj+UxfzQv5b&#xA;H/NDv8FeUv8Aq023/IsY/lMX80L+Wx/zQ7/BXlL/AKtNt/yLGP5TF/NC/lsf80O/wV5S/wCrTbf8&#xA;ixj+UxfzQv5bH/NC+Hyf5WhlWWPSrVZENVb0lND47jCNLiG/CEjT4xvwhN8vbnYqkeveRfJvmGZJ&#xA;9b0Sy1GeMcUnuII3kC/y8yOVPauKpV/ypz8q/wDqVdN/6R0/pirv+VOflX/1Kum/9I6f0xV3/KnP&#xA;yr/6lXTf+kdP6Yq7/lTn5V/9Srpv/SOn9MVd/wAqc/Kv/qVdN/6R0/pirv8AlTn5V/8AUq6b/wBI&#xA;6f0xVOfL/k3yn5d9U6FpFpprTbTPbQpG7gdAzKORA8K4qnGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi&#xA;fnnzdqehXWj2un2q3EupyyozNFd3HBYkD1EdnFPLvXrxoO+KrdL/ADN0LVNYttJsra9kubyNbq2Y&#xA;wcY2spOXp3nJmFIZODcSfi2+zuKqrZ/zS8vQ6cmovbX31KWKW7hmFuaPYQKry36itfq6rKhr9v4h&#xA;RcVSyw/OTR/0VaXGoWtybmd1tn+pwtLF9ddDMlohJqZWgpLTpTvXbDSsl8xedNK8v20M+oRXFZIJ&#xA;buWKKP1HgtbZVa5nl4mgSH1F58STuOIOBULd/mDplsjt9Rvpj+kW0i3SOFS090gkZhDV1qi+i1WN&#xA;B+OKpD5c/OrRtWhatjem7nuLiPSbaK3bnewxTSKrQh2X4liiLSc+NKGlaYaVEv8AnJ5bS5mX6reS&#xA;WUdlDqqX0UQdGsJIFnkuSvISKkKSpzqvKp2BwKqz/nB5XgtLi8e3vvqsEcFwkvoACW1uluHiuo6s&#xA;D6RSylbk1KAdMVXTfm1oMHNJ9P1KK5he4W5tWtwZYUtbeC6mkkVXPwLDeRttUnoBXFUr0H87NLvt&#xA;P02W+s57W8u4Eea19N/UaWYRi3W2UBuazyS8E5Mp6V2w0qb3X5kQWXmOPTb7T7qCzlsrO6NwYqtb&#xA;vd3UtqFuQGPBeaIAVr1JPwiuKpZq3516JDp2oPplhfXeoW+mPrFjCYKJPZcZPTvA3If6OWjAJNG+&#xA;IUXAqNufzg8sW2kwao0F7NZzRQXDzQwVWOG6nNtbTPyZSEnlVhH3IFSAKYqrzfmp5dtp7SG7t722&#xA;N3cW9kjyQUVLy7RZYraQhjxlMDiUjoF6nl8OKoZfzm8oNcSQLHekrL9VicW5Ky3RKBLaMg7yv6q8&#xA;a0G+5GGlV/Iv5l2Pme9u9Le2ls9WtJL31LaVOFIbW9ktV6sSzcVTmVqgYlQaggBWaYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYqhrj9GfXrT6x6H17959R9Th6v2f3vpV+L7P2uPbriqQ+W/+Vcfp&#xA;S6/w7+jf0pyk+s/VPS9avIepXj8XHl4bV+nFUrl/5Ut9Xb1f0L9X+unly9Dh9bp8XXbp1/ZwqiI/&#xA;+VRfpi29P9DfpTiv1Tj9X5f3p4+nTbl6laU369sVdP8A8qv/AMO6V+kvqf6I9V/0b+k619bm3q1+&#xA;s/HXny58vpxVD+f/APAP1LRv076P6H/TT86el6H1z6vdcvXr39Tl9n4/U498VVbj/lTf6Fi5/oT9&#xA;EcG+r+l9W9L0/W+L0vT7et/L+1irerf8qg9WH9J/obl6dp6Hqehx9Hi/1Sn7Pp8OfH9nj7YFY/8A&#xA;l5/yrT9J+Yfq9PrPqw/XPr/6L9PjS89Lh9Q/d8uP1nn6/wC/4/3m1MKqd7/yor9J6Jz/AEX+iqaj&#xA;6X+8/wBS+tf6F6vr8v8Advo8Kf8AFVeXwYqyq4/5VP8AVv336G9D6mtK/VqfU+A4cf8AI4U407dM&#xA;VUj/AMqi/SOh8v0P+kfSh/QHL0PW9L1D6Ho1+Lj632f+LKU+OmBUum/5ULzufW/QPP11+tV+r19T&#xA;4+PL/I/vP8n7XvhVJfOv/Kov09of170vqf1pafVP0V9U9f64v976v+mU+s09X6tt19X4a4qy7zB/&#xA;yqj9KS/p39E/pL6r+8+s+j6n1fiafa3+z9mm9Om2BVOL/lTn6Hb0P0H+ieT19P6t6XL0V5047V9H&#xA;j0/Zp7YVVvJ//Kq/0gf8J/on9I/V25fUPR9b0PVHq14fF/e8fU7148v2cCsvxV2KuxV2KuxV2Kux&#xA;V2Kv/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:F3B25EB28D2DDD119AE69367B37CDDFC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F4B25EB28D2DDD119AE69367B37CDDFC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:F2B25EB28D2DDD119AE69367B37CDDFC</stRef:instanceID>
            <stRef:documentID>uuid:E3E190448C2DDD119AE69367B37CDDFC</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Ableton-Book</stFnt:fontName>
                  <stFnt:fontFamily>Ableton Book</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.000;PS 001.001;hotconv 1.0.38</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Ableton Book.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Ableton Green</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>65.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -180.421 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 180.421 li
298.593 180.421 li
298.593 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
%ADOBeginSubsetFont: Ableton-Book Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /Ableton-Book def/FontInfo 7 dict dup begin/Notice (Copyright 2006 Adobe Systems Incorporated. All rights reserved.) def/Weight (Normal) def/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 44 /comma putdup 70 /F putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdef/FontBBox {-167 -288 1000 920} defendsystemdict begindup /Private8 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/BlueScale 0.03963 def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings22 dict dup begin/space <1C60D8A8C9B854D00D> |-/comma <1C60D8A8C9B854D0F42B65D6D67050B4EE1E15D1F15AE7> |-/F <1C60D8A8C9B7EF322B29626716E6D00A53DEBAAB962557C9376BD0C951127FEE83F0D054F5> |-/a <1C60D8A8C9B7D8BE19200967EF43F7CCBF439DE19F9D3FAABACDF1B505660B80F99CE455FA3FA0694A411FF415DC81C7CA160934D69F0D1F3E322D5AA46346915520B7FAE713E9FEA27565920D54C407328678> |-/b <1C60D8A8C9B7D8BE3241471453640F58012D53DFBA72165AD81D04940816AB5579FAD7966523E8F17DA4FFCE11A8BC28D5C66C608AC335D062B1D36E5BD24787DCB91F1D533AFE7556D608BFC970F0974AD3158D75> |-/c <1C60D8A8C9B759467B27955B6FFAD56FAABD6B66C8074A02AA3C9061C103A1F5F75DDC4A6C548B2ACE1E6C9BE8BAFD14392D4B545ABD734EB88F17E11AEB39C971613EE2F39EC89D55FC911836A490CCBB02> |-/d <1C60D8A8C9B7D8BE19200967EF43F7CCBF439DE19F9D3FAABACDF1B505660B80F99CE455FA3FA0694A411FF415DC81E5FC4202E49AFC66A3F0B4B81892666A3D1C651AEA4A3EC6D0ED355C392CBF352E65B4DF90> |-/e <1C60D8A8C9B7EF322B1F94027DB51C80F017E26D88BC3D95225B346447FEF493E1EB18DA4249E90465E0A776205CC34BAA525DE58ADFC96F5C896D0E86814E6A1F1895CB4D22ABE9968F2717> |-/g <1C60D8A8C9B7D8BE1624A4C8A6F4616425D88E0ABEDFB49D0C82C81BF7848CFFBB91FA68CBC3CA8548B9E7FB9F168228FD334BBA282D492A483923CEA3E6D38F0EC7AAF469D274DE2B41909F0B1CAC3487ED98A1AD50D54C1F12C3D5E2FD6EDB144C9813A877C1851ED07CC41C6EA960> |-/h <1C60D8A8C9B7EF320F7B2776D3671158B4704336061C5FBDAB1D131C49382127FA52A907B8E264B10BF8E998454557C689DECDD74D8C77899FFB0706> |-/i <1C60D8A8C9B87A8F7203701F0CFB527D7725AFD132EEE64EAA34F62FBB8C54B28D5E2A8488BE57D2A00EA17242> |-/k <1C60D8A8C9B75946746FCFBEF6D3D26C5697FEF9326DDB9CD0A602731987C76188C5F2DB663ED620E4BA2A592167BA2A51> |-/l <1C60D8A8C9B87A8F72039FB49CD8A6F088D0D1C16B83BD232A5E0E07A62C6488B885E8850A> |-/n <1C60D8A8C9B7EF322B0E5646DA8AD9CA4347851718855A831A3DC01C44A581FA63CE058FB4666E6109A38B5B9D6E63CC497368D7676494D47D45E107832D1609269530CA1AF3CF3AF7> |-/o <1C60D8A8C9B7CA642514930F0D0211E2FAFE097D66AD6917FDFABB0213BE14EC5A52B015B9CDFF985B87436B5E633C6930ED61CD284F0D0521B0D095409A4041B437BB94FEF6> |-/p <1C60D8A8C9B7D8BE324069C7F4BBFD03F98A55ED5B31B74A85C9E5452150E8127120C5752281AACA458727EC8E92ED526C32953D71EAB9B762531A65CA3B9F88053F765A8A90BFB5549E46B0254FDB417BDAB55895> |-/r <1C60D8A8C9B81E5F8902BD6B4266CBFC61A4A19CD0262395DFCED3290F389A782E7037047BFA4CC7DD20018AEBDE9145D119FD36B8D45B61D41865FE9A> |-/s <1C60D8A8C9B71131D036F080D2D27195FE28A7B88A06158B58988303CF0999FAACBD17A8A2B6B1441054A229F65D44FC43F5F6D04B1079612F8EFE4425045D8C5CB8ABC5E27343803B623282D3CA962F6F689114DBE66D914696E785237394DAEA5210A6> |-/t <1C60D8A8C9B81E5FA47597B2DCF80F92111EAEA2378A638038CC7967FEDF033F659D2657A261B33A19F114ED2800F3D71ABC7389DC7E8F9844AEA276CC6BC9E9F61EDEE5> |-/u <1C60D8A8C9B7EF32245EE15305C6768B527CEC278D9529B0A02EE34F4FCBB987E080CAEC23482A0A3D19A2E76377E7360284F34380ED75B4BC85A6AE95173211D454FFE59AE7C6> |-/w <1C60D8A8C9B6079F7269A35C71EEECFE79C21F963151A5CE93C99616761DF96959BFF2E8A2FEF2648DAA3F2FADBD65C9CBDAA7FDAE0BAC84F67AB3E4EA09217CAEABF9E2> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RIOJGB+Ableton-Book /Ableton-Book findfont ct_VMDictPut/RIOJGB+Ableton-Book*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 25{/.notdef}rp /F 26{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t /u /.notdef /w 136{/.notdef}rp]RIOJGB+Ableton-Book nfRIOJGB+Ableton-Book*1 [8.4 0 0 -8.4 0 0 ]msf39.5977 67.4146 mo(For white background)[4.67041 4.98096 2.78857 2.33545 6.06445 4.67041 2.01611 2.78857 4.67041 2.33496 5.13232 5.13232 4.04883 4.04883 5.13232 2.78857 4.98145 4.66992 4.67041 0 ]xsh69.8809 178.002 mo(For color, or photographic backgrounds)[4.67041 4.98096 2.78857 2.33545 4.04883 4.98096 2.01611 4.98096 2.78857 2.33496 2.33545 4.98096 2.78857 2.33545 5.13232 4.67041 4.98096 2.78857 4.98096 5.13232 2.78906 5.13232 5.13232 4.67041 2.01563 4.04883 2.33496 5.13232 5.13232 4.04883 4.04883 5.13232 2.78857 4.98145 4.67041 4.66992 5.13232 0 ]xsh215.367 67.4146 mo(For black background)[4.67041 4.98096 2.78857 2.33545 5.13232 2.01563 5.13232 4.04883 4.04883 2.33545 5.13232 5.13232 4.04834 4.04883 5.13232 2.78857 4.98145 4.67041 4.67041 0 ]xsh231.679 21.0811 mo
231.679 21.4214 231.679 21.7964 231.374 22.2168 cv
231.118 22.5405 230.718 22.8066 230.192 22.8066 cv
229.762 22.8066 229.378 22.6182 229.122 22.3716 cv
228.693 21.936 228.676 21.4365 228.659 21.064 cv
228.659 4.88428 li
228.676 4.50977 228.693 4.01172 229.122 3.57764 cv
229.378 3.32813 229.762 3.14111 230.192 3.14111 cv
230.718 3.14111 231.118 3.40625 231.374 3.73291 cv
231.679 4.15332 231.679 4.52539 231.679 4.8667 cv
231.679 21.0811 li
231.679 21.0811 li
cp
0 0 0 0 cmyk
f
236.71 21.0811 mo
236.71 21.4214 236.71 21.7964 236.408 22.2168 cv
236.152 22.5405 235.755 22.8066 235.226 22.8066 cv
234.796 22.8066 234.414 22.6182 234.159 22.3716 cv
233.727 21.936 233.712 21.4365 233.699 21.064 cv
233.699 4.88428 li
233.712 4.50977 233.727 4.01172 234.159 3.57764 cv
234.414 3.32813 234.796 3.14111 235.226 3.14111 cv
235.755 3.14111 236.152 3.40625 236.408 3.73291 cv
236.71 4.15332 236.71 4.52539 236.71 4.8667 cv
236.71 21.0811 li
236.71 21.0811 li
cp
f
241.748 17.937 mo
241.748 18.2788 241.748 18.6548 241.444 19.0737 cv
241.188 19.4014 240.792 19.6655 240.263 19.6655 cv
239.832 19.6655 239.448 19.478 239.193 19.2314 cv
238.761 18.7935 238.747 18.2954 238.731 17.9214 cv
238.731 1.74316 li
238.747 1.36816 238.761 0.869629 239.193 0.436035 cv
239.448 0.186523 239.832 0 240.263 0 cv
240.792 0 241.188 0.266602 241.444 0.59082 cv
241.748 1.01172 241.748 1.38428 241.748 1.72705 cv
241.748 17.937 li
241.748 17.937 li
cp
f
246.783 21.0811 mo
246.783 21.4214 246.783 21.7964 246.478 22.2168 cv
246.222 22.5405 245.824 22.8066 245.298 22.8066 cv
244.865 22.8066 244.485 22.6182 244.228 22.3716 cv
243.795 21.936 243.783 21.4365 243.768 21.064 cv
243.768 4.88428 li
243.783 4.50977 243.795 4.01172 244.228 3.57764 cv
244.485 3.32813 244.865 3.14111 245.298 3.14111 cv
245.824 3.14111 246.222 3.40625 246.478 3.73291 cv
246.783 4.15332 246.783 4.52539 246.783 4.8667 cv
246.783 21.0811 li
246.783 21.0811 li
cp
f
251.817 17.937 mo
251.817 18.2788 251.817 18.6548 251.514 19.0737 cv
251.258 19.4014 250.858 19.6655 250.332 19.6655 cv
249.9 19.6655 249.521 19.478 249.265 19.2314 cv
248.833 18.7935 248.817 18.2954 248.798 17.9214 cv
248.798 1.74316 li
248.817 1.36816 248.833 0.869629 249.265 0.436035 cv
249.521 0.186523 249.9 0 250.332 0 cv
250.858 0 251.258 0.266602 251.514 0.59082 cv
251.817 1.01172 251.817 1.38428 251.817 1.72705 cv
251.817 17.937 li
251.817 17.937 li
cp
f
256.851 21.0811 mo
256.851 21.4214 256.851 21.7964 256.546 22.2168 cv
256.292 22.5405 255.893 22.8066 255.366 22.8066 cv
254.939 22.8066 254.553 22.6182 254.299 22.3716 cv
253.869 21.936 253.851 21.4365 253.834 21.064 cv
253.834 4.88428 li
253.851 4.50977 253.869 4.01172 254.299 3.57764 cv
254.553 3.32813 254.939 3.14111 255.366 3.14111 cv
255.893 3.14111 256.292 3.40625 256.546 3.73291 cv
256.851 4.15332 256.851 4.52539 256.851 4.8667 cv
256.851 21.0811 li
256.851 21.0811 li
cp
f
261.888 21.0811 mo
261.888 21.4214 261.888 21.7964 261.583 22.2168 cv
261.33 22.5405 260.93 22.8066 260.404 22.8066 cv
259.971 22.8066 259.589 22.6182 259.333 22.3716 cv
258.904 21.936 258.886 21.4365 258.871 21.064 cv
258.871 4.88428 li
258.886 4.50977 258.904 4.01172 259.333 3.57764 cv
259.589 3.32813 259.971 3.14111 260.404 3.14111 cv
260.93 3.14111 261.33 3.40625 261.583 3.73291 cv
261.888 4.15332 261.888 4.52539 261.888 4.8667 cv
261.888 21.0811 li
261.888 21.0811 li
cp
f
286.304 8.05859 mo
286.658 8.05859 287.04 8.05859 287.471 8.35352 cv
287.804 8.60254 288.079 8.99121 288.079 9.50488 cv
288.079 9.92432 287.886 10.2983 287.629 10.5469 cv
287.184 10.9653 286.673 10.9814 286.29 10.9971 cv
265.304 10.9971 li
264.917 10.9814 264.407 10.9653 263.958 10.5469 cv
263.707 10.2983 263.512 9.92432 263.512 9.50488 cv
263.512 8.99121 263.788 8.60254 264.121 8.35352 cv
264.551 8.05859 264.934 8.05859 265.285 8.05859 cv
286.304 8.05859 li
286.304 8.05859 li
cp
f
286.304 3.14941 mo
286.658 3.14941 287.04 3.14941 287.471 3.44531 cv
287.804 3.69141 288.079 4.08154 288.079 4.59619 cv
288.079 5.01563 287.886 5.3877 287.629 5.63721 cv
287.184 6.05859 286.673 6.07422 286.29 6.08789 cv
265.304 6.08789 li
264.917 6.07422 264.407 6.05859 263.958 5.63721 cv
263.707 5.3877 263.512 5.01563 263.512 4.59619 cv
263.512 4.08154 263.788 3.69141 264.121 3.44531 cv
264.551 3.14941 264.934 3.14941 265.285 3.14941 cv
286.304 3.14941 li
286.304 3.14941 li
cp
f
286.304 17.8765 mo
286.658 17.8765 287.04 17.8765 287.471 18.1704 cv
287.804 18.4189 288.079 18.8086 288.079 19.3208 cv
288.079 19.7422 287.886 20.1147 287.629 20.3647 cv
287.184 20.7832 286.673 20.7988 286.29 20.8149 cv
265.304 20.8149 li
264.917 20.7988 264.407 20.7832 263.958 20.3647 cv
263.707 20.1147 263.512 19.7422 263.512 19.3208 cv
263.512 18.8086 263.788 18.4189 264.121 18.1704 cv
264.551 17.8765 264.934 17.8765 265.285 17.8765 cv
286.304 17.8765 li
286.304 17.8765 li
cp
f
286.304 12.9673 mo
286.658 12.9673 287.04 12.9673 287.471 13.2617 cv
287.804 13.5093 288.079 13.8975 288.079 14.4121 cv
288.079 14.8335 287.886 15.2056 287.629 15.4556 cv
287.184 15.8745 286.673 15.8906 286.29 15.9067 cv
265.304 15.9067 li
264.917 15.8906 264.407 15.8745 263.958 15.4556 cv
263.707 15.2056 263.512 14.8335 263.512 14.4121 cv
263.512 13.8975 263.788 13.5093 264.121 13.2617 cv
264.551 12.9673 264.934 12.9673 265.285 12.9673 cv
286.304 12.9673 li
286.304 12.9673 li
cp
f
238.76 31.4331 mo
238.76 31.792 238.76 32.2266 239.045 32.5991 cv
239.305 32.9253 239.737 33.1304 240.165 33.1304 cv
240.98 33.1304 241.313 32.6152 241.489 32.3179 cv
242.175 32.9404 242.876 33.1768 243.819 33.1768 cv
246.072 33.1768 247.521 31.4785 247.521 28.9771 cv
247.521 25.9731 245.622 24.7295 243.946 24.7295 cv
243.069 24.7295 242.208 25.0239 241.711 25.709 cv
241.711 23.25 li
241.711 22.2715 240.945 21.8042 240.26 21.8042 cv
239.956 21.8042 239.448 21.8799 239.094 22.3652 cv
238.809 22.7388 238.775 23.1294 238.76 23.8735 cv
238.76 31.4331 li
238.76 31.4331 li
cp
242.973 26.7202 mo
243.372 26.7202 243.787 26.9072 244.061 27.3579 cv
244.28 27.7173 244.41 28.2583 244.41 28.9116 cv
244.41 29.583 244.3 30.4209 243.867 30.8423 cv
243.64 31.061 243.308 31.1841 242.99 31.1841 cv
241.649 31.1841 241.618 29.519 241.618 28.9897 cv
241.618 28.4634 241.649 27.4033 242.287 26.937 cv
242.479 26.7964 242.734 26.7202 242.973 26.7202 cv
242.973 26.7202 li
cp
f
261.544 29.6455 mo
262.2 29.6455 262.485 29.1479 262.485 28.4634 cv
262.485 26.6743 261.239 24.6978 258.366 24.6978 cv
255.445 24.6978 254.056 26.5952 254.056 28.8838 cv
254.056 31.0122 255.206 33.2349 258.333 33.2349 cv
260.824 33.2349 262.022 31.915 262.022 31.1689 cv
262.022 30.562 261.447 30.0786 260.761 30.0786 cv
260.392 30.0786 260.154 30.2344 259.975 30.376 cv
259.756 30.5459 259.582 30.751 259.337 30.8887 cv
259.114 31.0439 258.811 31.1372 258.477 31.1372 cv
257.169 31.1372 257.024 29.9868 256.994 29.6455 cv
261.544 29.6455 li
261.544 29.6455 li
cp
256.975 28.0742 mo
257.059 27.5581 257.265 27.1382 257.712 26.9214 cv
257.888 26.8301 258.115 26.7808 258.353 26.7808 cv
259.085 26.7808 259.373 27.2485 259.436 27.3735 cv
259.561 27.606 259.593 27.8247 259.627 28.0742 cv
256.975 28.0742 li
256.975 28.0742 li
cp
f
274.34 24.6782 mo
272.069 24.6782 269.888 25.8481 269.888 28.8994 cv
269.888 30.1113 270.173 31.1221 270.969 32.0088 cv
271.355 32.4438 272.218 33.2563 274.227 33.2563 cv
276.735 33.2563 278.681 31.915 278.681 28.9771 cv
278.681 26.937 277.564 24.6782 274.34 24.6782 cv
274.34 24.6782 li
cp
274.306 26.8125 mo
274.916 26.8125 275.202 27.1382 275.393 27.5142 cv
275.585 27.918 275.682 28.4302 275.682 29.0552 cv
275.682 29.7393 275.585 31.1074 274.293 31.1074 cv
272.933 31.1074 272.885 29.4419 272.885 28.9292 cv
272.885 28.4302 272.919 26.8125 274.306 26.8125 cv
274.306 26.8125 li
cp
f
279.939 26.395 mo
279.955 26.0972 279.955 25.7871 280.115 25.4902 cv
280.342 25.0693 280.771 24.7896 281.312 24.7896 cv
281.726 24.7896 282.063 24.9478 282.322 25.2109 cv
282.652 25.5532 282.688 25.8804 282.718 26.1294 cv
282.893 25.9116 283.036 25.7217 283.308 25.4902 cv
283.867 25.0088 284.618 24.7773 285.367 24.7773 cv
286.131 24.7773 286.884 25.0693 287.375 25.6455 cv
287.855 26.2061 287.919 26.7202 287.919 27.2485 cv
287.919 31.4492 li
287.919 31.7764 287.888 32.1162 287.65 32.5059 cv
287.375 32.8945 286.928 33.1304 286.452 33.1304 cv
285.971 33.1304 285.587 32.959 285.301 32.5527 cv
284.999 32.1475 284.968 31.792 284.968 31.4038 cv
284.968 28.1689 li
284.968 27.9331 284.968 27.6699 284.824 27.4209 cv
284.665 27.1089 284.345 26.937 283.992 26.937 cv
283.722 26.937 283.5 27.0298 283.323 27.1689 cv
282.929 27.5142 282.906 28.1201 282.906 28.7412 cv
282.906 31.4961 li
282.906 31.7598 282.878 32.1475 282.618 32.5059 cv
282.35 32.8945 281.903 33.1304 281.391 33.1304 cv
280.786 33.1147 280.306 32.7715 280.101 32.3672 cv
279.955 32.0703 279.939 31.7598 279.939 31.4961 cv
279.939 26.395 li
279.939 26.395 li
cp
f
251.813 30.2163 mo
251.813 30.4663 251.813 30.7158 252.182 30.7944 cv
252.263 30.8091 252.694 30.8389 252.788 30.8711 cv
253.092 30.9648 253.458 31.3237 253.458 31.9121 cv
253.458 33.2349 251.99 33.2349 251.735 33.2349 cv
251.318 33.2349 250.904 33.2021 250.506 33.1084 cv
248.877 32.708 248.781 31.5073 248.781 30.5771 cv
248.798 23.5479 li
248.815 23.1729 248.83 22.6748 249.261 22.2393 cv
249.515 21.9902 249.899 21.8042 250.332 21.8042 cv
250.858 21.8042 251.257 22.0684 251.512 22.394 cv
251.813 22.8149 251.813 23.1855 251.813 23.5303 cv
251.813 30.2163 li
251.813 30.2163 li
cp
f
232.983 26.7881 mo
233.514 26.7881 233.883 27.1172 234.058 27.4771 cv
234.235 27.8203 234.334 28.4634 234.334 29.0728 cv
234.334 30.4185 233.914 30.8091 233.706 30.9648 cv
233.416 31.2002 233.113 31.2305 232.937 31.2305 cv
232.275 31.2305 231.904 30.7622 231.738 30.2925 cv
231.655 30.1206 231.543 29.7612 231.543 29.0552 cv
231.543 28.5894 231.625 27.9331 231.891 27.4648 cv
232.246 26.8496 232.758 26.7881 232.983 26.7881 cv
232.983 26.7881 li
cp
234.284 25.8081 mo
234.284 25.8081 li
233.723 25.0381 232.889 24.7876 232.067 24.7876 cv
229.536 24.7876 228.478 26.9453 228.478 29.0728 cv
228.478 31.7163 230.049 33.1704 231.93 33.1704 cv
233.465 33.1704 234.077 32.3872 234.365 32.0234 cv
234.428 32.8247 235.193 33.1304 235.695 33.1304 cv
236.193 33.1304 236.708 32.8887 236.979 32.3716 cv
237.17 31.9814 237.191 31.4966 237.191 31.0127 cv
237.177 26.8447 li
237.177 26.3491 237.162 25.8506 236.967 25.4526 cv
236.684 24.9219 236.161 24.6782 235.649 24.6782 cv
235.141 24.6782 234.348 24.9858 234.284 25.8081 cv
234.284 25.8081 li
cp
f
264.542 24.1035 mo
264.559 23.6973 264.591 23.2471 264.957 22.8267 cv
265.102 22.6729 265.42 22.3608 266.009 22.3608 cv
266.743 22.3608 267.463 22.8433 267.463 23.9175 cv
267.463 24.9102 li
268.101 24.9102 li
268.755 24.9277 269.137 25.2534 269.157 25.8916 cv
269.157 26.2197 269.028 26.4985 268.819 26.6533 cv
268.544 26.8877 268.166 26.8706 267.463 26.8569 cv
267.463 30.2163 li
267.463 30.4663 267.463 30.7158 267.828 30.7944 cv
267.912 30.8091 268.341 30.8389 268.434 30.8721 cv
268.741 30.9648 269.108 31.3237 269.108 31.9121 cv
269.108 33.2349 267.639 33.2349 267.382 33.2349 cv
266.967 33.2349 266.555 33.2021 266.155 33.1084 cv
264.528 32.708 264.429 31.5093 264.429 30.5771 cv
264.429 29.5967 264.479 27.8535 264.496 26.8706 cv
263.969 26.8877 263.757 26.8706 263.587 26.8271 cv
263.156 26.6865 262.98 26.2642 262.98 25.8608 cv
262.98 25.7661 262.98 25.6743 263.007 25.5518 cv
263.186 24.958 263.696 24.9414 263.952 24.9277 cv
264.542 24.9277 li
264.542 24.1035 li
264.542 24.1035 li
cp
f
100.69 21.0811 mo
100.69 21.4214 100.69 21.7964 100.385 22.2168 cv
100.128 22.5405 99.7295 22.8066 99.2031 22.8066 cv
98.7729 22.8066 98.3892 22.6182 98.1328 22.3716 cv
97.7041 21.936 97.688 21.4365 97.6704 21.064 cv
97.6704 4.88428 li
97.688 4.50977 97.7041 4.01172 98.1328 3.57764 cv
98.3892 3.32813 98.7729 3.14111 99.2031 3.14111 cv
99.7295 3.14111 100.128 3.40625 100.385 3.73291 cv
100.69 4.15332 100.69 4.52539 100.69 4.8667 cv
100.69 21.0811 li
100.69 21.0811 li
cp
0 0 0 1 cmyk
f
105.722 21.0811 mo
105.722 21.4214 105.722 21.7964 105.419 22.2168 cv
105.163 22.5405 104.767 22.8066 104.238 22.8066 cv
103.808 22.8066 103.425 22.6182 103.17 22.3716 cv
102.738 21.936 102.723 21.4365 102.709 21.064 cv
102.709 4.88428 li
102.723 4.50977 102.738 4.01172 103.17 3.57764 cv
103.425 3.32813 103.808 3.14111 104.238 3.14111 cv
104.767 3.14111 105.163 3.40625 105.419 3.73291 cv
105.722 4.15332 105.722 4.52539 105.722 4.8667 cv
105.722 21.0811 li
105.722 21.0811 li
cp
f
110.759 17.937 mo
110.759 18.2788 110.759 18.6548 110.455 19.0737 cv
110.2 19.4014 109.803 19.6655 109.274 19.6655 cv
108.843 19.6655 108.459 19.478 108.204 19.2314 cv
107.772 18.7935 107.757 18.2954 107.743 17.9214 cv
107.743 1.74316 li
107.757 1.36816 107.772 0.869629 108.204 0.436035 cv
108.459 0.186523 108.843 0 109.274 0 cv
109.803 0 110.2 0.266602 110.455 0.59082 cv
110.759 1.01172 110.759 1.38428 110.759 1.72705 cv
110.759 17.937 li
110.759 17.937 li
cp
f
115.794 21.0811 mo
115.794 21.4214 115.794 21.7964 115.489 22.2168 cv
115.234 22.5405 114.835 22.8066 114.31 22.8066 cv
113.876 22.8066 113.496 22.6182 113.239 22.3716 cv
112.807 21.936 112.794 21.4365 112.779 21.064 cv
112.779 4.88428 li
112.794 4.50977 112.807 4.01172 113.239 3.57764 cv
113.496 3.32813 113.876 3.14111 114.31 3.14111 cv
114.835 3.14111 115.234 3.40625 115.489 3.73291 cv
115.794 4.15332 115.794 4.52539 115.794 4.8667 cv
115.794 21.0811 li
115.794 21.0811 li
cp
f
120.828 17.937 mo
120.828 18.2788 120.828 18.6548 120.526 19.0737 cv
120.27 19.4014 119.869 19.6655 119.343 19.6655 cv
118.912 19.6655 118.533 19.478 118.276 19.2314 cv
117.844 18.7935 117.829 18.2954 117.81 17.9214 cv
117.81 1.74316 li
117.829 1.36816 117.844 0.869629 118.276 0.436035 cv
118.533 0.186523 118.912 0 119.343 0 cv
119.869 0 120.27 0.266602 120.526 0.59082 cv
120.828 1.01172 120.828 1.38428 120.828 1.72705 cv
120.828 17.937 li
120.828 17.937 li
cp
f
125.863 21.0811 mo
125.863 21.4214 125.863 21.7964 125.558 22.2168 cv
125.304 22.5405 124.905 22.8066 124.377 22.8066 cv
123.951 22.8066 123.564 22.6182 123.311 22.3716 cv
122.88 21.936 122.863 21.4365 122.845 21.064 cv
122.845 4.88428 li
122.863 4.50977 122.88 4.01172 123.311 3.57764 cv
123.564 3.32813 123.951 3.14111 124.377 3.14111 cv
124.905 3.14111 125.304 3.40625 125.558 3.73291 cv
125.863 4.15332 125.863 4.52539 125.863 4.8667 cv
125.863 21.0811 li
125.863 21.0811 li
cp
f
130.899 21.0811 mo
130.899 21.4214 130.899 21.7964 130.594 22.2168 cv
130.34 22.5405 129.941 22.8066 129.415 22.8066 cv
128.982 22.8066 128.601 22.6182 128.345 22.3716 cv
127.915 21.936 127.897 21.4365 127.882 21.064 cv
127.882 4.88428 li
127.897 4.50977 127.915 4.01172 128.345 3.57764 cv
128.601 3.32813 128.982 3.14111 129.415 3.14111 cv
129.941 3.14111 130.34 3.40625 130.594 3.73291 cv
130.899 4.15332 130.899 4.52539 130.899 4.8667 cv
130.899 21.0811 li
130.899 21.0811 li
cp
f
155.315 8.05859 mo
155.669 8.05859 156.05 8.05859 156.482 8.35352 cv
156.816 8.60254 157.089 8.99121 157.089 9.50488 cv
157.089 9.92432 156.897 10.2983 156.64 10.5469 cv
156.195 10.9653 155.684 10.9814 155.3 10.9971 cv
134.315 10.9971 li
133.929 10.9814 133.418 10.9653 132.97 10.5469 cv
132.718 10.2983 132.524 9.92432 132.524 9.50488 cv
132.524 8.99121 132.799 8.60254 133.131 8.35352 cv
133.563 8.05859 133.945 8.05859 134.295 8.05859 cv
155.315 8.05859 li
155.315 8.05859 li
cp
f
155.315 3.14941 mo
155.669 3.14941 156.05 3.14941 156.482 3.44531 cv
156.816 3.69141 157.089 4.08154 157.089 4.59619 cv
157.089 5.01563 156.897 5.3877 156.64 5.63721 cv
156.195 6.05859 155.684 6.07422 155.3 6.08789 cv
134.315 6.08789 li
133.929 6.07422 133.418 6.05859 132.97 5.63721 cv
132.718 5.3877 132.524 5.01563 132.524 4.59619 cv
132.524 4.08154 132.799 3.69141 133.131 3.44531 cv
133.563 3.14941 133.945 3.14941 134.295 3.14941 cv
155.315 3.14941 li
155.315 3.14941 li
cp
f
155.315 17.8765 mo
155.669 17.8765 156.05 17.8765 156.482 18.1704 cv
156.816 18.4189 157.089 18.8086 157.089 19.3208 cv
157.089 19.7422 156.897 20.1147 156.64 20.3647 cv
156.195 20.7832 155.684 20.7988 155.3 20.8149 cv
134.315 20.8149 li
133.929 20.7988 133.418 20.7832 132.97 20.3647 cv
132.718 20.1147 132.524 19.7422 132.524 19.3208 cv
132.524 18.8086 132.799 18.4189 133.131 18.1704 cv
133.563 17.8765 133.945 17.8765 134.295 17.8765 cv
155.315 17.8765 li
155.315 17.8765 li
cp
f
155.315 12.9673 mo
155.669 12.9673 156.05 12.9673 156.482 13.2617 cv
156.816 13.5093 157.089 13.8975 157.089 14.4121 cv
157.089 14.8335 156.897 15.2056 156.64 15.4556 cv
156.195 15.8745 155.684 15.8906 155.3 15.9067 cv
134.315 15.9067 li
133.929 15.8906 133.418 15.8745 132.97 15.4556 cv
132.718 15.2056 132.524 14.8335 132.524 14.4121 cv
132.524 13.8975 132.799 13.5093 133.131 13.2617 cv
133.563 12.9673 133.945 12.9673 134.295 12.9673 cv
155.315 12.9673 li
155.315 12.9673 li
cp
f
107.771 31.4331 mo
107.771 31.792 107.771 32.2266 108.057 32.5991 cv
108.316 32.9253 108.748 33.1304 109.176 33.1304 cv
109.991 33.1304 110.325 32.6152 110.5 32.3179 cv
111.186 32.9404 111.888 33.1768 112.831 33.1768 cv
115.083 33.1768 116.532 31.4785 116.532 28.9771 cv
116.532 25.9731 114.632 24.7295 112.957 24.7295 cv
112.08 24.7295 111.219 25.0239 110.722 25.709 cv
110.722 23.25 li
110.722 22.2715 109.956 21.8042 109.272 21.8042 cv
108.967 21.8042 108.459 21.8799 108.105 22.3652 cv
107.82 22.7388 107.786 23.1294 107.771 23.8735 cv
107.771 31.4331 li
107.771 31.4331 li
cp
111.984 26.7202 mo
112.383 26.7202 112.798 26.9072 113.072 27.3579 cv
113.291 27.7173 113.421 28.2583 113.421 28.9116 cv
113.421 29.583 113.312 30.4209 112.878 30.8423 cv
112.652 31.061 112.319 31.1841 112.001 31.1841 cv
110.66 31.1841 110.628 29.519 110.628 28.9897 cv
110.628 28.4634 110.66 27.4033 111.297 26.937 cv
111.49 26.7964 111.745 26.7202 111.984 26.7202 cv
111.984 26.7202 li
cp
f
130.556 29.6455 mo
131.211 29.6455 131.496 29.1479 131.496 28.4634 cv
131.496 26.6743 130.25 24.6978 127.377 24.6978 cv
124.456 24.6978 123.068 26.5952 123.068 28.8838 cv
123.068 31.0122 124.217 33.2349 127.344 33.2349 cv
129.835 33.2349 131.033 31.915 131.033 31.1689 cv
131.033 30.562 130.458 30.0786 129.773 30.0786 cv
129.404 30.0786 129.165 30.2344 128.986 30.376 cv
128.768 30.5459 128.592 30.751 128.349 30.8887 cv
128.125 31.0439 127.822 31.1372 127.488 31.1372 cv
126.18 31.1372 126.035 29.9868 126.005 29.6455 cv
130.556 29.6455 li
130.556 29.6455 li
cp
125.986 28.0742 mo
126.07 27.5581 126.276 27.1382 126.724 26.9214 cv
126.899 26.8301 127.125 26.7808 127.364 26.7808 cv
128.097 26.7808 128.383 27.2485 128.447 27.3735 cv
128.572 27.606 128.605 27.8247 128.639 28.0742 cv
125.986 28.0742 li
125.986 28.0742 li
cp
f
143.352 24.6782 mo
141.081 24.6782 138.9 25.8481 138.9 28.8994 cv
138.9 30.1113 139.185 31.1221 139.98 32.0088 cv
140.366 32.4438 141.229 33.2563 143.238 33.2563 cv
145.746 33.2563 147.693 31.915 147.693 28.9771 cv
147.693 26.937 146.574 24.6782 143.352 24.6782 cv
143.352 24.6782 li
cp
143.317 26.8125 mo
143.926 26.8125 144.213 27.1382 144.404 27.5142 cv
144.597 27.918 144.693 28.4302 144.693 29.0552 cv
144.693 29.7393 144.597 31.1074 143.305 31.1074 cv
141.944 31.1074 141.896 29.4419 141.896 28.9292 cv
141.896 28.4302 141.931 26.8125 143.317 26.8125 cv
143.317 26.8125 li
cp
f
148.951 26.395 mo
148.965 26.0972 148.965 25.7871 149.125 25.4902 cv
149.353 25.0693 149.782 24.7896 150.324 24.7896 cv
150.738 24.7896 151.074 24.9478 151.333 25.2109 cv
151.663 25.5532 151.699 25.8804 151.728 26.1294 cv
151.904 25.9116 152.046 25.7217 152.319 25.4902 cv
152.878 25.0088 153.628 24.7773 154.376 24.7773 cv
155.142 24.7773 155.895 25.0693 156.385 25.6455 cv
156.866 26.2061 156.931 26.7202 156.931 27.2485 cv
156.931 31.4492 li
156.931 31.7764 156.9 32.1162 156.661 32.5059 cv
156.385 32.8945 155.939 33.1304 155.462 33.1304 cv
154.982 33.1304 154.599 32.959 154.312 32.5527 cv
154.009 32.1475 153.98 31.792 153.98 31.4038 cv
153.98 28.1689 li
153.98 27.9331 153.98 27.6699 153.834 27.4209 cv
153.675 27.1089 153.355 26.937 153.003 26.937 cv
152.733 26.937 152.511 27.0298 152.333 27.1689 cv
151.94 27.5142 151.917 28.1201 151.917 28.7412 cv
151.917 31.4961 li
151.917 31.7598 151.888 32.1475 151.628 32.5059 cv
151.361 32.8945 150.914 33.1304 150.402 33.1304 cv
149.796 33.1147 149.316 32.7715 149.111 32.3672 cv
148.965 32.0703 148.951 31.7598 148.951 31.4961 cv
148.951 26.395 li
148.951 26.395 li
cp
f
120.825 30.2163 mo
120.825 30.4663 120.825 30.7158 121.193 30.7944 cv
121.275 30.8091 121.705 30.8389 121.799 30.8711 cv
122.104 30.9648 122.47 31.3237 122.47 31.9121 cv
122.47 33.2349 121.001 33.2349 120.746 33.2349 cv
120.33 33.2349 119.916 33.2021 119.518 33.1084 cv
117.889 32.708 117.792 31.5073 117.792 30.5771 cv
117.81 23.5479 li
117.826 23.1729 117.841 22.6748 118.272 22.2393 cv
118.526 21.9902 118.91 21.8042 119.343 21.8042 cv
119.869 21.8042 120.268 22.0684 120.523 22.394 cv
120.825 22.8149 120.825 23.1855 120.825 23.5303 cv
120.825 30.2163 li
120.825 30.2163 li
cp
f
101.994 26.7881 mo
102.526 26.7881 102.895 27.1172 103.07 27.4771 cv
103.246 27.8203 103.346 28.4634 103.346 29.0728 cv
103.346 30.4185 102.925 30.8091 102.717 30.9648 cv
102.427 31.2002 102.125 31.2305 101.948 31.2305 cv
101.287 31.2305 100.915 30.7622 100.749 30.2925 cv
100.667 30.1206 100.555 29.7612 100.555 29.0552 cv
100.555 28.5894 100.636 27.9331 100.903 27.4648 cv
101.256 26.8496 101.769 26.7881 101.994 26.7881 cv
101.994 26.7881 li
cp
103.295 25.8081 mo
103.295 25.8081 li
102.734 25.0381 101.9 24.7876 101.078 24.7876 cv
98.5469 24.7876 97.4888 26.9453 97.4888 29.0728 cv
97.4888 31.7163 99.0605 33.1704 100.941 33.1704 cv
102.477 33.1704 103.088 32.3872 103.376 32.0234 cv
103.44 32.8247 104.204 33.1304 104.707 33.1304 cv
105.204 33.1304 105.719 32.8887 105.991 32.3716 cv
106.182 31.9814 106.202 31.4966 106.202 31.0127 cv
106.188 26.8447 li
106.188 26.3491 106.173 25.8506 105.978 25.4526 cv
105.696 24.9219 105.172 24.6782 104.66 24.6782 cv
104.152 24.6782 103.36 24.9858 103.295 25.8081 cv
103.295 25.8081 li
cp
f
133.554 24.1035 mo
133.57 23.6973 133.603 23.2471 133.968 22.8267 cv
134.113 22.6729 134.432 22.3608 135.021 22.3608 cv
135.753 22.3608 136.475 22.8433 136.475 23.9175 cv
136.475 24.9102 li
137.113 24.9102 li
137.767 24.9277 138.148 25.2534 138.168 25.8916 cv
138.168 26.2197 138.04 26.4985 137.831 26.6533 cv
137.556 26.8877 137.177 26.8706 136.475 26.8569 cv
136.475 30.2163 li
136.475 30.4663 136.475 30.7158 136.839 30.7944 cv
136.923 30.8091 137.353 30.8389 137.445 30.8721 cv
137.752 30.9648 138.12 31.3237 138.12 31.9121 cv
138.12 33.2349 136.65 33.2349 136.394 33.2349 cv
135.979 33.2349 135.566 33.2021 135.166 33.1084 cv
133.539 32.708 133.44 31.5093 133.44 30.5771 cv
133.44 29.5967 133.49 27.8535 133.506 26.8706 cv
132.98 26.8877 132.769 26.8706 132.599 26.8271 cv
132.167 26.6865 131.991 26.2642 131.991 25.8608 cv
131.991 25.7661 131.991 25.6743 132.019 25.5518 cv
132.197 24.958 132.708 24.9414 132.962 24.9277 cv
133.554 24.9277 li
133.554 24.1035 li
133.554 24.1035 li
cp
f
178.365 146.186 mo
178.365 148.563 176.441 150.489 174.066 150.489 cv
112.343 150.489 li
109.967 150.489 108.042 148.563 108.042 146.186 cv
108.042 109.286 li
108.042 106.911 109.967 104.985 112.343 104.985 cv
174.064 104.985 li
176.441 104.985 178.365 106.91 178.365 109.286 cv
178.365 146.186 li
cp
0.65 0 1 0 cmyk
f
119.95 130.874 mo
119.95 131.171 119.95 131.499 119.684 131.868 cv
119.461 132.151 119.112 132.383 118.651 132.383 cv
118.274 132.383 117.938 132.219 117.713 132.002 cv
117.338 131.622 117.325 131.184 117.309 130.858 cv
117.309 116.698 li
117.325 116.371 117.338 115.934 117.713 115.555 cv
117.938 115.336 118.274 115.172 118.651 115.172 cv
119.112 115.172 119.461 115.404 119.684 115.69 cv
119.95 116.059 119.95 116.383 119.95 116.683 cv
119.95 130.874 li
119.95 130.874 li
cp
0 0 0 0 cmyk
f
124.356 130.874 mo
124.356 131.171 124.356 131.499 124.088 131.868 cv
123.868 132.151 123.518 132.383 123.057 132.383 cv
122.68 132.383 122.344 132.219 122.122 132.002 cv
121.743 131.622 121.731 131.184 121.717 130.858 cv
121.717 116.698 li
121.731 116.371 121.743 115.934 122.122 115.555 cv
122.344 115.336 122.68 115.172 123.057 115.172 cv
123.518 115.172 123.868 115.404 124.088 115.69 cv
124.356 116.059 124.356 116.383 124.356 116.683 cv
124.356 130.874 li
124.356 130.874 li
cp
f
128.762 128.122 mo
128.762 128.42 128.762 128.749 128.499 129.118 cv
128.274 129.403 127.926 129.633 127.463 129.633 cv
127.086 129.633 126.75 129.469 126.526 129.254 cv
126.151 128.872 126.137 128.434 126.125 128.108 cv
126.125 113.95 li
126.137 113.62 126.151 113.184 126.526 112.805 cv
126.75 112.586 127.086 112.424 127.463 112.424 cv
127.926 112.424 128.274 112.657 128.499 112.94 cv
128.762 113.309 128.762 113.635 128.762 113.934 cv
128.762 128.122 li
128.762 128.122 li
cp
f
133.168 130.874 mo
133.168 131.171 133.168 131.499 132.903 131.868 cv
132.68 132.151 132.333 132.383 131.872 132.383 cv
131.491 132.383 131.159 132.219 130.934 132.002 cv
130.557 131.622 130.543 131.184 130.532 130.858 cv
130.532 116.698 li
130.543 116.371 130.557 115.934 130.934 115.555 cv
131.159 115.336 131.491 115.172 131.872 115.172 cv
132.333 115.172 132.68 115.404 132.903 115.69 cv
133.168 116.059 133.168 116.383 133.168 116.683 cv
133.168 130.874 li
133.168 130.874 li
cp
f
137.577 128.122 mo
137.577 128.42 137.577 128.749 137.311 129.118 cv
137.086 129.403 136.737 129.633 136.274 129.633 cv
135.897 129.633 135.565 129.469 135.342 129.254 cv
134.963 128.872 134.95 128.434 134.934 128.108 cv
134.934 113.95 li
134.95 113.62 134.963 113.184 135.342 112.805 cv
135.565 112.586 135.897 112.424 136.274 112.424 cv
136.737 112.424 137.086 112.657 137.311 112.94 cv
137.577 113.309 137.577 113.635 137.577 113.934 cv
137.577 128.122 li
137.577 128.122 li
cp
f
141.981 130.874 mo
141.981 131.171 141.981 131.499 141.715 131.868 cv
141.493 132.151 141.145 132.383 140.682 132.383 cv
140.307 132.383 139.971 132.219 139.747 132.002 cv
139.372 131.622 139.358 131.184 139.342 130.858 cv
139.342 116.698 li
139.358 116.371 139.372 115.934 139.747 115.555 cv
139.971 115.336 140.307 115.172 140.682 115.172 cv
141.145 115.172 141.493 115.404 141.715 115.69 cv
141.981 116.059 141.981 116.383 141.981 116.683 cv
141.981 130.874 li
141.981 130.874 li
cp
f
146.387 130.874 mo
146.387 131.171 146.387 131.499 146.123 131.868 cv
145.9 132.151 145.551 132.383 145.09 132.383 cv
144.711 132.383 144.377 132.219 144.154 132.002 cv
143.775 131.622 143.762 131.184 143.748 130.858 cv
143.748 116.698 li
143.762 116.371 143.775 115.934 144.154 115.555 cv
144.377 115.336 144.711 115.172 145.09 115.172 cv
145.551 115.172 145.9 115.404 146.123 115.69 cv
146.387 116.059 146.387 116.383 146.387 116.683 cv
146.387 130.874 li
146.387 130.874 li
cp
f
167.755 119.476 mo
168.066 119.476 168.4 119.476 168.777 119.735 cv
169.07 119.952 169.31 120.292 169.31 120.742 cv
169.31 121.108 169.142 121.436 168.917 121.655 cv
168.529 122.02 168.08 122.034 167.746 122.047 cv
149.376 122.047 li
149.039 122.034 148.593 122.02 148.201 121.655 cv
147.98 121.436 147.813 121.108 147.813 120.742 cv
147.813 120.292 148.051 119.952 148.342 119.735 cv
148.72 119.476 149.056 119.476 149.361 119.476 cv
167.755 119.476 li
167.755 119.476 li
cp
f
167.755 115.18 mo
168.066 115.18 168.4 115.18 168.777 115.438 cv
169.07 115.655 169.31 115.996 169.31 116.446 cv
169.31 116.813 169.142 117.138 168.917 117.357 cv
168.529 117.725 168.08 117.74 167.746 117.75 cv
149.376 117.75 li
149.039 117.74 148.593 117.725 148.201 117.357 cv
147.98 117.138 147.813 116.813 147.813 116.446 cv
147.813 115.996 148.051 115.655 148.342 115.438 cv
148.72 115.18 149.056 115.18 149.361 115.18 cv
167.755 115.18 li
167.755 115.18 li
cp
f
167.755 128.069 mo
168.066 128.069 168.4 128.069 168.777 128.325 cv
169.07 128.543 169.31 128.885 169.31 129.333 cv
169.31 129.701 169.142 130.028 168.917 130.247 cv
168.529 130.612 168.08 130.625 167.746 130.64 cv
149.376 130.64 li
149.039 130.625 148.593 130.612 148.201 130.247 cv
147.98 130.028 147.813 129.701 147.813 129.333 cv
147.813 128.885 148.051 128.543 148.342 128.325 cv
148.72 128.069 149.056 128.069 149.361 128.069 cv
167.755 128.069 li
167.755 128.069 li
cp
f
167.755 123.772 mo
168.066 123.772 168.4 123.772 168.777 124.03 cv
169.07 124.247 169.31 124.586 169.31 125.036 cv
169.31 125.405 169.142 125.731 168.917 125.949 cv
168.529 126.316 168.08 126.331 167.746 126.344 cv
149.376 126.344 li
149.039 126.331 148.593 126.316 148.201 125.949 cv
147.98 125.731 147.813 125.405 147.813 125.036 cv
147.813 124.586 148.051 124.247 148.342 124.03 cv
148.72 123.772 149.056 123.772 149.361 123.772 cv
167.755 123.772 li
167.755 123.772 li
cp
f
126.147 139.933 mo
126.147 140.247 126.147 140.627 126.399 140.955 cv
126.625 141.24 127.002 141.418 127.379 141.418 cv
128.09 141.418 128.385 140.967 128.536 140.708 cv
129.137 141.252 129.752 141.459 130.577 141.459 cv
132.547 141.459 133.817 139.973 133.817 137.784 cv
133.817 135.155 132.155 134.065 130.688 134.065 cv
129.92 134.065 129.167 134.324 128.731 134.924 cv
128.731 132.772 li
128.731 131.915 128.063 131.506 127.463 131.506 cv
127.196 131.506 126.75 131.572 126.442 131.997 cv
126.19 132.325 126.163 132.667 126.147 133.317 cv
126.147 139.933 li
126.147 139.933 li
cp
129.834 135.809 mo
130.184 135.809 130.547 135.971 130.786 136.367 cv
130.981 136.68 131.092 137.153 131.092 137.725 cv
131.092 138.314 130.997 139.046 130.616 139.417 cv
130.42 139.608 130.131 139.715 129.85 139.715 cv
128.674 139.715 128.651 138.258 128.651 137.793 cv
128.651 137.333 128.674 136.407 129.235 135.999 cv
129.403 135.875 129.627 135.809 129.834 135.809 cv
129.834 135.809 li
cp
f
146.088 138.368 mo
146.66 138.368 146.91 137.932 146.91 137.333 cv
146.91 135.768 145.822 134.039 143.307 134.039 cv
140.75 134.039 139.536 135.699 139.536 137.702 cv
139.536 139.565 140.54 141.51 143.278 141.51 cv
145.457 141.51 146.508 140.354 146.508 139.702 cv
146.508 139.17 146.004 138.748 145.404 138.748 cv
145.08 138.748 144.873 138.884 144.715 139.007 cv
144.523 139.157 144.369 139.336 144.158 139.458 cv
143.961 139.593 143.697 139.674 143.405 139.674 cv
142.26 139.674 142.133 138.667 142.106 138.368 cv
146.088 138.368 li
146.088 138.368 li
cp
142.092 136.993 mo
142.163 136.542 142.344 136.174 142.735 135.985 cv
142.889 135.905 143.084 135.861 143.295 135.861 cv
143.938 135.861 144.186 136.27 144.242 136.379 cv
144.354 136.584 144.381 136.774 144.41 136.993 cv
142.092 136.993 li
142.092 136.993 li
cp
f
157.285 134.021 mo
155.3 134.021 153.388 135.045 153.388 137.715 cv
153.388 138.776 153.64 139.661 154.339 140.438 cv
154.673 140.819 155.429 141.528 157.187 141.528 cv
159.38 141.528 161.085 140.354 161.085 137.784 cv
161.085 135.999 160.109 134.021 157.285 134.021 cv
157.285 134.021 li
cp
157.257 135.889 mo
157.789 135.889 158.041 136.174 158.208 136.502 cv
158.376 136.856 158.46 137.305 158.46 137.852 cv
158.46 138.45 158.376 139.648 157.244 139.648 cv
156.054 139.648 156.013 138.19 156.013 137.742 cv
156.013 137.305 156.042 135.889 157.257 135.889 cv
157.257 135.889 li
cp
f
162.187 135.524 mo
162.201 135.263 162.201 134.991 162.339 134.731 cv
162.537 134.364 162.916 134.118 163.39 134.118 cv
163.75 134.118 164.046 134.256 164.269 134.487 cv
164.56 134.788 164.589 135.075 164.617 135.291 cv
164.771 135.1 164.898 134.934 165.134 134.731 cv
165.623 134.31 166.279 134.108 166.935 134.108 cv
167.605 134.108 168.263 134.364 168.695 134.868 cv
169.113 135.358 169.171 135.809 169.171 136.27 cv
169.171 139.948 li
169.171 140.233 169.144 140.531 168.935 140.873 cv
168.695 141.213 168.304 141.418 167.884 141.418 cv
167.466 141.418 167.13 141.27 166.88 140.914 cv
166.615 140.559 166.589 140.247 166.589 139.908 cv
166.589 137.075 li
166.589 136.87 166.589 136.638 166.46 136.421 cv
166.322 136.149 166.042 135.999 165.734 135.999 cv
165.496 135.999 165.302 136.079 165.146 136.202 cv
164.802 136.502 164.783 137.034 164.783 137.577 cv
164.783 139.989 li
164.783 140.221 164.757 140.559 164.531 140.873 cv
164.296 141.213 163.906 141.418 163.458 141.418 cv
162.927 141.405 162.509 141.105 162.328 140.751 cv
162.201 140.491 162.187 140.221 162.187 139.989 cv
162.187 135.524 li
162.187 135.524 li
cp
f
137.573 138.869 mo
137.573 139.086 137.573 139.305 137.895 139.375 cv
137.965 139.387 138.342 139.415 138.426 139.442 cv
138.692 139.523 139.012 139.838 139.012 140.352 cv
139.012 141.51 137.729 141.51 137.502 141.51 cv
137.141 141.51 136.778 141.482 136.43 141.401 cv
135.002 141.049 134.918 139.999 134.918 139.184 cv
134.932 133.032 li
134.948 132.703 134.961 132.267 135.338 131.887 cv
135.561 131.668 135.897 131.506 136.274 131.506 cv
136.737 131.506 137.084 131.737 137.309 132.023 cv
137.573 132.391 137.573 132.715 137.573 133.017 cv
137.573 138.869 li
137.573 138.869 li
cp
f
121.094 135.869 mo
121.557 135.869 121.881 136.156 122.034 136.471 cv
122.188 136.772 122.274 137.334 122.274 137.868 cv
122.274 139.045 121.907 139.387 121.727 139.524 cv
121.473 139.73 121.208 139.756 121.053 139.756 cv
120.473 139.756 120.149 139.346 120.002 138.934 cv
119.93 138.784 119.834 138.469 119.834 137.852 cv
119.834 137.444 119.905 136.87 120.137 136.459 cv
120.448 135.921 120.895 135.869 121.094 135.869 cv
121.094 135.869 li
cp
122.233 135.01 mo
122.233 135.01 li
121.741 134.336 121.01 134.116 120.292 134.116 cv
118.075 134.116 117.149 136.004 117.149 137.868 cv
117.149 140.181 118.524 141.455 120.172 141.455 cv
121.516 141.455 122.051 140.769 122.301 140.45 cv
122.358 141.151 123.026 141.418 123.467 141.418 cv
123.901 141.418 124.354 141.206 124.59 140.754 cv
124.758 140.414 124.774 139.99 124.774 139.566 cv
124.764 135.917 li
124.764 135.483 124.752 135.046 124.579 134.699 cv
124.333 134.235 123.874 134.021 123.424 134.021 cv
122.981 134.021 122.288 134.291 122.233 135.01 cv
122.233 135.01 li
cp
f
148.71 133.518 mo
148.728 133.162 148.755 132.768 149.076 132.401 cv
149.201 132.267 149.482 131.993 149.996 131.993 cv
150.638 131.993 151.267 132.415 151.267 133.355 cv
151.267 134.224 li
151.826 134.224 li
152.4 134.24 152.734 134.524 152.75 135.083 cv
152.75 135.37 152.638 135.615 152.455 135.75 cv
152.214 135.954 151.882 135.94 151.267 135.928 cv
151.267 138.869 li
151.267 139.086 151.267 139.305 151.587 139.375 cv
151.66 139.387 152.037 139.415 152.119 139.443 cv
152.386 139.523 152.707 139.838 152.707 140.352 cv
152.707 141.51 151.421 141.51 151.197 141.51 cv
150.833 141.51 150.472 141.482 150.123 141.401 cv
148.697 141.049 148.615 140 148.615 139.184 cv
148.615 138.326 148.656 136.8 148.671 135.94 cv
148.209 135.954 148.027 135.94 147.877 135.901 cv
147.498 135.778 147.344 135.409 147.344 135.057 cv
147.344 134.973 147.344 134.893 147.369 134.786 cv
147.525 134.266 147.973 134.25 148.195 134.24 cv
148.71 134.24 li
148.71 133.518 li
148.71 133.518 li
cp
f
268.085 146.186 mo
268.085 148.563 266.162 150.489 263.787 150.489 cv
202.063 150.489 li
199.687 150.489 197.762 148.563 197.762 146.186 cv
197.762 109.286 li
197.762 106.911 199.687 104.985 202.063 104.985 cv
263.785 104.985 li
266.162 104.985 268.085 106.91 268.085 109.286 cv
268.085 146.186 li
cp
0 0 0 1 cmyk
f
209.669 130.874 mo
209.669 131.171 209.669 131.499 209.404 131.868 cv
209.181 132.151 208.832 132.383 208.371 132.383 cv
207.994 132.383 207.658 132.219 207.433 132.002 cv
207.058 131.622 207.044 131.184 207.029 130.858 cv
207.029 116.698 li
207.044 116.371 207.058 115.934 207.433 115.555 cv
207.658 115.336 207.994 115.172 208.371 115.172 cv
208.832 115.172 209.181 115.404 209.404 115.69 cv
209.669 116.059 209.669 116.383 209.669 116.683 cv
209.669 130.874 li
209.669 130.874 li
cp
0 0 0 0 cmyk
f
214.076 130.874 mo
214.076 131.171 214.076 131.499 213.808 131.868 cv
213.587 132.151 213.238 132.383 212.777 132.383 cv
212.4 132.383 212.064 132.219 211.841 132.002 cv
211.462 131.622 211.451 131.184 211.437 130.858 cv
211.437 116.698 li
211.451 116.371 211.462 115.934 211.841 115.555 cv
212.064 115.336 212.4 115.172 212.777 115.172 cv
213.238 115.172 213.587 115.404 213.808 115.69 cv
214.076 116.059 214.076 116.383 214.076 116.683 cv
214.076 130.874 li
214.076 130.874 li
cp
f
218.482 128.122 mo
218.482 128.42 218.482 128.749 218.218 129.118 cv
217.994 129.403 217.646 129.633 217.183 129.633 cv
216.806 129.633 216.47 129.469 216.246 129.254 cv
215.871 128.872 215.857 128.434 215.845 128.108 cv
215.845 113.95 li
215.857 113.62 215.871 113.184 216.246 112.805 cv
216.47 112.586 216.806 112.424 217.183 112.424 cv
217.646 112.424 217.994 112.657 218.218 112.94 cv
218.482 113.309 218.482 113.635 218.482 113.934 cv
218.482 128.122 li
218.482 128.122 li
cp
f
222.888 130.874 mo
222.888 131.171 222.888 131.499 222.623 131.868 cv
222.4 132.151 222.052 132.383 221.591 132.383 cv
221.21 132.383 220.878 132.219 220.654 132.002 cv
220.277 131.622 220.263 131.184 220.251 130.858 cv
220.251 116.698 li
220.263 116.371 220.277 115.934 220.654 115.555 cv
220.878 115.336 221.21 115.172 221.591 115.172 cv
222.052 115.172 222.4 115.404 222.623 115.69 cv
222.888 116.059 222.888 116.383 222.888 116.683 cv
222.888 130.874 li
222.888 130.874 li
cp
f
227.296 128.122 mo
227.296 128.42 227.296 128.749 227.031 129.118 cv
226.806 129.403 226.457 129.633 225.994 129.633 cv
225.617 129.633 225.285 129.469 225.062 129.254 cv
224.683 128.872 224.669 128.434 224.654 128.108 cv
224.654 113.95 li
224.669 113.62 224.683 113.184 225.062 112.805 cv
225.285 112.586 225.617 112.424 225.994 112.424 cv
226.457 112.424 226.806 112.657 227.031 112.94 cv
227.296 113.309 227.296 113.635 227.296 113.934 cv
227.296 128.122 li
227.296 128.122 li
cp
f
231.701 130.874 mo
231.701 131.171 231.701 131.499 231.435 131.868 cv
231.212 132.151 230.865 132.383 230.402 132.383 cv
230.027 132.383 229.691 132.219 229.466 132.002 cv
229.091 131.622 229.078 131.184 229.062 130.858 cv
229.062 116.698 li
229.078 116.371 229.091 115.934 229.466 115.555 cv
229.691 115.336 230.027 115.172 230.402 115.172 cv
230.865 115.172 231.212 115.404 231.435 115.69 cv
231.701 116.059 231.701 116.383 231.701 116.683 cv
231.701 130.874 li
231.701 130.874 li
cp
f
236.107 130.874 mo
236.107 131.171 236.107 131.499 235.843 131.868 cv
235.621 132.151 235.271 132.383 234.81 132.383 cv
234.431 132.383 234.097 132.219 233.875 132.002 cv
233.496 131.622 233.482 131.184 233.468 130.858 cv
233.468 116.698 li
233.482 116.371 233.496 115.934 233.875 115.555 cv
234.097 115.336 234.431 115.172 234.81 115.172 cv
235.271 115.172 235.621 115.404 235.843 115.69 cv
236.107 116.059 236.107 116.383 236.107 116.683 cv
236.107 130.874 li
236.107 130.874 li
cp
f
257.476 119.476 mo
257.787 119.476 258.121 119.476 258.498 119.735 cv
258.791 119.952 259.031 120.292 259.031 120.742 cv
259.031 121.108 258.863 121.436 258.638 121.655 cv
258.25 122.02 257.8 122.034 257.466 122.047 cv
239.097 122.047 li
238.759 122.034 238.314 122.02 237.921 121.655 cv
237.701 121.436 237.533 121.108 237.533 120.742 cv
237.533 120.292 237.771 119.952 238.062 119.735 cv
238.441 119.476 238.777 119.476 239.082 119.476 cv
257.476 119.476 li
257.476 119.476 li
cp
f
257.476 115.18 mo
257.787 115.18 258.121 115.18 258.498 115.438 cv
258.791 115.655 259.031 115.996 259.031 116.446 cv
259.031 116.813 258.863 117.138 258.638 117.357 cv
258.25 117.725 257.8 117.74 257.466 117.75 cv
239.097 117.75 li
238.759 117.74 238.314 117.725 237.921 117.357 cv
237.701 117.138 237.533 116.813 237.533 116.446 cv
237.533 115.996 237.771 115.655 238.062 115.438 cv
238.441 115.18 238.777 115.18 239.082 115.18 cv
257.476 115.18 li
257.476 115.18 li
cp
f
257.476 128.069 mo
257.787 128.069 258.121 128.069 258.498 128.325 cv
258.791 128.543 259.031 128.885 259.031 129.333 cv
259.031 129.701 258.863 130.028 258.638 130.247 cv
258.25 130.612 257.8 130.625 257.466 130.64 cv
239.097 130.64 li
238.759 130.625 238.314 130.612 237.921 130.247 cv
237.701 130.028 237.533 129.701 237.533 129.333 cv
237.533 128.885 237.771 128.543 238.062 128.325 cv
238.441 128.069 238.777 128.069 239.082 128.069 cv
257.476 128.069 li
257.476 128.069 li
cp
f
257.476 123.772 mo
257.787 123.772 258.121 123.772 258.498 124.03 cv
258.791 124.247 259.031 124.586 259.031 125.036 cv
259.031 125.405 258.863 125.731 258.638 125.949 cv
258.25 126.316 257.8 126.331 257.466 126.344 cv
239.097 126.344 li
238.759 126.331 238.314 126.316 237.921 125.949 cv
237.701 125.731 237.533 125.405 237.533 125.036 cv
237.533 124.586 237.771 124.247 238.062 124.03 cv
238.441 123.772 238.777 123.772 239.082 123.772 cv
257.476 123.772 li
257.476 123.772 li
cp
f
215.867 139.933 mo
215.867 140.247 215.867 140.627 216.119 140.955 cv
216.345 141.24 216.722 141.418 217.099 141.418 cv
217.81 141.418 218.105 140.967 218.255 140.708 cv
218.857 141.252 219.472 141.459 220.296 141.459 cv
222.267 141.459 223.537 139.973 223.537 137.784 cv
223.537 135.155 221.875 134.065 220.408 134.065 cv
219.64 134.065 218.886 134.324 218.451 134.924 cv
218.451 132.772 li
218.451 131.915 217.783 131.506 217.183 131.506 cv
216.916 131.506 216.47 131.572 216.162 131.997 cv
215.91 132.325 215.882 132.667 215.867 133.317 cv
215.867 139.933 li
215.867 139.933 li
cp
219.554 135.809 mo
219.904 135.809 220.267 135.971 220.505 136.367 cv
220.701 136.68 220.812 137.153 220.812 137.725 cv
220.812 138.314 220.716 139.046 220.335 139.417 cv
220.14 139.608 219.851 139.715 219.57 139.715 cv
218.394 139.715 218.371 138.258 218.371 137.793 cv
218.371 137.333 218.394 136.407 218.955 135.999 cv
219.123 135.875 219.347 135.809 219.554 135.809 cv
219.554 135.809 li
cp
f
235.808 138.368 mo
236.38 138.368 236.63 137.932 236.63 137.333 cv
236.63 135.768 235.542 134.039 233.027 134.039 cv
230.47 134.039 229.255 135.699 229.255 137.702 cv
229.255 139.565 230.259 141.51 232.998 141.51 cv
235.177 141.51 236.228 140.354 236.228 139.702 cv
236.228 139.17 235.724 138.748 235.125 138.748 cv
234.8 138.748 234.593 138.884 234.435 139.007 cv
234.244 139.157 234.089 139.336 233.878 139.458 cv
233.681 139.593 233.417 139.674 233.125 139.674 cv
231.98 139.674 231.853 138.667 231.826 138.368 cv
235.808 138.368 li
235.808 138.368 li
cp
231.812 136.993 mo
231.882 136.542 232.064 136.174 232.455 135.985 cv
232.609 135.905 232.804 135.861 233.015 135.861 cv
233.658 135.861 233.906 136.27 233.962 136.379 cv
234.074 136.584 234.101 136.774 234.13 136.993 cv
231.812 136.993 li
231.812 136.993 li
cp
f
247.005 134.021 mo
245.021 134.021 243.109 135.045 243.109 137.715 cv
243.109 138.776 243.361 139.661 244.06 140.438 cv
244.394 140.819 245.15 141.528 246.908 141.528 cv
249.101 141.528 250.806 140.354 250.806 137.784 cv
250.806 135.999 249.83 134.021 247.005 134.021 cv
247.005 134.021 li
cp
246.978 135.889 mo
247.509 135.889 247.761 136.174 247.929 136.502 cv
248.097 136.856 248.181 137.305 248.181 137.852 cv
248.181 138.45 248.097 139.648 246.964 139.648 cv
245.775 139.648 245.734 138.19 245.734 137.742 cv
245.734 137.305 245.763 135.889 246.978 135.889 cv
246.978 135.889 li
cp
f
251.908 135.524 mo
251.921 135.263 251.921 134.991 252.06 134.731 cv
252.257 134.364 252.636 134.118 253.111 134.118 cv
253.47 134.118 253.767 134.256 253.99 134.487 cv
254.281 134.788 254.31 135.075 254.337 135.291 cv
254.492 135.1 254.619 134.934 254.855 134.731 cv
255.343 134.31 256 134.108 256.656 134.108 cv
257.326 134.108 257.984 134.364 258.416 134.868 cv
258.833 135.358 258.892 135.809 258.892 136.27 cv
258.892 139.948 li
258.892 140.233 258.865 140.531 258.656 140.873 cv
258.416 141.213 258.025 141.418 257.605 141.418 cv
257.187 141.418 256.851 141.27 256.601 140.914 cv
256.335 140.559 256.31 140.247 256.31 139.908 cv
256.31 137.075 li
256.31 136.87 256.31 136.638 256.181 136.421 cv
256.042 136.149 255.763 135.999 255.455 135.999 cv
255.216 135.999 255.023 136.079 254.867 136.202 cv
254.523 136.502 254.503 137.034 254.503 137.577 cv
254.503 139.989 li
254.503 140.221 254.478 140.559 254.251 140.873 cv
254.017 141.213 253.626 141.418 253.179 141.418 cv
252.648 141.405 252.23 141.105 252.048 140.751 cv
251.921 140.491 251.908 140.221 251.908 139.989 cv
251.908 135.524 li
251.908 135.524 li
cp
f
227.292 138.869 mo
227.292 139.086 227.292 139.305 227.615 139.375 cv
227.685 139.387 228.062 139.415 228.146 139.442 cv
228.412 139.523 228.732 139.838 228.732 140.352 cv
228.732 141.51 227.449 141.51 227.222 141.51 cv
226.861 141.51 226.498 141.482 226.15 141.401 cv
224.722 141.049 224.638 139.999 224.638 139.184 cv
224.652 133.032 li
224.667 132.703 224.681 132.267 225.058 131.887 cv
225.281 131.668 225.617 131.506 225.994 131.506 cv
226.457 131.506 226.804 131.737 227.029 132.023 cv
227.292 132.391 227.292 132.715 227.292 133.017 cv
227.292 138.869 li
227.292 138.869 li
cp
f
210.814 135.869 mo
211.277 135.869 211.601 136.156 211.753 136.471 cv
211.908 136.772 211.994 137.334 211.994 137.868 cv
211.994 139.045 211.626 139.387 211.447 139.524 cv
211.193 139.73 210.927 139.756 210.773 139.756 cv
210.193 139.756 209.869 139.346 209.722 138.934 cv
209.65 138.784 209.554 138.469 209.554 137.852 cv
209.554 137.444 209.625 136.87 209.857 136.459 cv
210.167 135.921 210.615 135.869 210.814 135.869 cv
210.814 135.869 li
cp
211.953 135.01 mo
211.953 135.01 li
211.46 134.336 210.73 134.116 210.011 134.116 cv
207.794 134.116 206.869 136.004 206.869 137.868 cv
206.869 140.181 208.244 141.455 209.892 141.455 cv
211.236 141.455 211.771 140.769 212.021 140.45 cv
212.078 141.151 212.746 141.418 213.187 141.418 cv
213.621 141.418 214.074 141.206 214.31 140.754 cv
214.478 140.414 214.494 139.99 214.494 139.566 cv
214.484 135.917 li
214.484 135.483 214.472 135.046 214.298 134.699 cv
214.052 134.235 213.593 134.021 213.144 134.021 cv
212.701 134.021 212.007 134.291 211.953 135.01 cv
211.953 135.01 li
cp
f
238.431 133.518 mo
238.449 133.162 238.476 132.768 238.796 132.401 cv
238.921 132.267 239.203 131.993 239.716 131.993 cv
240.359 131.993 240.988 132.415 240.988 133.355 cv
240.988 134.224 li
241.546 134.224 li
242.121 134.24 242.455 134.524 242.47 135.083 cv
242.47 135.37 242.359 135.615 242.175 135.75 cv
241.935 135.954 241.603 135.94 240.988 135.928 cv
240.988 138.869 li
240.988 139.086 240.988 139.305 241.308 139.375 cv
241.38 139.387 241.757 139.415 241.839 139.443 cv
242.107 139.523 242.427 139.838 242.427 140.352 cv
242.427 141.51 241.142 141.51 240.917 141.51 cv
240.554 141.51 240.193 141.482 239.843 141.401 cv
238.417 141.049 238.335 140 238.335 139.184 cv
238.335 138.326 238.376 136.8 238.392 135.94 cv
237.929 135.954 237.748 135.94 237.597 135.901 cv
237.218 135.778 237.064 135.409 237.064 135.057 cv
237.064 134.973 237.064 134.893 237.089 134.786 cv
237.246 134.266 237.693 134.25 237.916 134.24 cv
238.431 134.24 li
238.431 133.518 li
238.431 133.518 li
cp
f
88.6455 146.186 mo
88.6455 148.563 86.7207 150.489 84.3457 150.489 cv
22.6226 150.489 li
20.2471 150.489 18.3218 148.563 18.3218 146.186 cv
18.3218 109.286 li
18.3218 106.911 20.2471 104.985 22.6226 104.985 cv
84.3442 104.985 li
86.7207 104.985 88.6455 106.91 88.6455 109.286 cv
88.6455 146.186 li
cp
f
30.2295 130.874 mo
30.2295 131.171 30.2295 131.499 29.9639 131.868 cv
29.7412 132.151 29.3916 132.383 28.9307 132.383 cv
28.5537 132.383 28.2178 132.219 27.9932 132.002 cv
27.6182 131.622 27.6045 131.184 27.5889 130.858 cv
27.5889 116.698 li
27.6045 116.371 27.6182 115.934 27.9932 115.555 cv
28.2178 115.336 28.5537 115.172 28.9307 115.172 cv
29.3916 115.172 29.7412 115.404 29.9639 115.69 cv
30.2295 116.059 30.2295 116.383 30.2295 116.683 cv
30.2295 130.874 li
30.2295 130.874 li
cp
0.65 0 1 0 cmyk
f
34.6357 130.874 mo
34.6357 131.171 34.6357 131.499 34.3682 131.868 cv
34.1475 132.151 33.7979 132.383 33.3369 132.383 cv
32.96 132.383 32.624 132.219 32.4014 132.002 cv
32.0225 131.622 32.0107 131.184 31.9971 130.858 cv
31.9971 116.698 li
32.0107 116.371 32.0225 115.934 32.4014 115.555 cv
32.624 115.336 32.96 115.172 33.3369 115.172 cv
33.7979 115.172 34.1475 115.404 34.3682 115.69 cv
34.6357 116.059 34.6357 116.383 34.6357 116.683 cv
34.6357 130.874 li
34.6357 130.874 li
cp
f
39.042 128.122 mo
39.042 128.42 39.042 128.749 38.7783 129.118 cv
38.5537 129.403 38.2061 129.633 37.7432 129.633 cv
37.3662 129.633 37.0303 129.469 36.8057 129.254 cv
36.4307 128.872 36.417 128.434 36.4053 128.108 cv
36.4053 113.95 li
36.417 113.62 36.4307 113.184 36.8057 112.805 cv
37.0303 112.586 37.3662 112.424 37.7432 112.424 cv
38.2061 112.424 38.5537 112.657 38.7783 112.94 cv
39.042 113.309 39.042 113.635 39.042 113.934 cv
39.042 128.122 li
39.042 128.122 li
cp
f
43.4482 130.874 mo
43.4482 131.171 43.4482 131.499 43.1826 131.868 cv
42.96 132.151 42.6123 132.383 42.1514 132.383 cv
41.7705 132.383 41.4385 132.219 41.2139 132.002 cv
40.8369 131.622 40.8232 131.184 40.8115 130.858 cv
40.8115 116.698 li
40.8232 116.371 40.8369 115.934 41.2139 115.555 cv
41.4385 115.336 41.7705 115.172 42.1514 115.172 cv
42.6123 115.172 42.96 115.404 43.1826 115.69 cv
43.4482 116.059 43.4482 116.383 43.4482 116.683 cv
43.4482 130.874 li
43.4482 130.874 li
cp
f
47.8564 128.122 mo
47.8564 128.42 47.8564 128.749 47.5908 129.118 cv
47.3662 129.403 47.0166 129.633 46.5537 129.633 cv
46.1768 129.633 45.8447 129.469 45.6221 129.254 cv
45.2432 128.872 45.2295 128.434 45.2139 128.108 cv
45.2139 113.95 li
45.2295 113.62 45.2432 113.184 45.6221 112.805 cv
45.8447 112.586 46.1768 112.424 46.5537 112.424 cv
47.0166 112.424 47.3662 112.657 47.5908 112.94 cv
47.8564 113.309 47.8564 113.635 47.8564 113.934 cv
47.8564 128.122 li
47.8564 128.122 li
cp
f
52.2607 130.874 mo
52.2607 131.171 52.2607 131.499 51.9951 131.868 cv
51.7725 132.151 51.4248 132.383 50.9619 132.383 cv
50.5869 132.383 50.251 132.219 50.0264 132.002 cv
49.6514 131.622 49.6377 131.184 49.6221 130.858 cv
49.6221 116.698 li
49.6377 116.371 49.6514 115.934 50.0264 115.555 cv
50.251 115.336 50.5869 115.172 50.9619 115.172 cv
51.4248 115.172 51.7725 115.404 51.9951 115.69 cv
52.2607 116.059 52.2607 116.383 52.2607 116.683 cv
52.2607 130.874 li
52.2607 130.874 li
cp
f
56.6665 130.874 mo
56.6665 131.171 56.6665 131.499 56.4028 131.868 cv
56.1802 132.151 55.8306 132.383 55.3701 132.383 cv
54.9912 132.383 54.6572 132.219 54.4346 132.002 cv
54.0557 131.622 54.042 131.184 54.0283 130.858 cv
54.0283 116.698 li
54.042 116.371 54.0557 115.934 54.4346 115.555 cv
54.6572 115.336 54.9912 115.172 55.3701 115.172 cv
55.8306 115.172 56.1802 115.404 56.4028 115.69 cv
56.6665 116.059 56.6665 116.383 56.6665 116.683 cv
56.6665 130.874 li
56.6665 130.874 li
cp
f
78.0356 119.476 mo
78.3462 119.476 78.6802 119.476 79.0571 119.735 cv
79.3501 119.952 79.5903 120.292 79.5903 120.742 cv
79.5903 121.108 79.4224 121.436 79.1978 121.655 cv
78.8091 122.02 78.3599 122.034 78.0259 122.047 cv
59.6567 122.047 li
59.3188 122.034 58.8735 122.02 58.481 121.655 cv
58.2603 121.436 58.0923 121.108 58.0923 120.742 cv
58.0923 120.292 58.3306 119.952 58.6216 119.735 cv
59.0005 119.476 59.3364 119.476 59.6411 119.476 cv
78.0356 119.476 li
78.0356 119.476 li
cp
f
78.0356 115.18 mo
78.3462 115.18 78.6802 115.18 79.0571 115.438 cv
79.3501 115.655 79.5903 115.996 79.5903 116.446 cv
79.5903 116.813 79.4224 117.138 79.1978 117.357 cv
78.8091 117.725 78.3599 117.74 78.0259 117.75 cv
59.6567 117.75 li
59.3188 117.74 58.8735 117.725 58.481 117.357 cv
58.2603 117.138 58.0923 116.813 58.0923 116.446 cv
58.0923 115.996 58.3306 115.655 58.6216 115.438 cv
59.0005 115.18 59.3364 115.18 59.6411 115.18 cv
78.0356 115.18 li
78.0356 115.18 li
cp
f
78.0356 128.069 mo
78.3462 128.069 78.6802 128.069 79.0571 128.325 cv
79.3501 128.543 79.5903 128.885 79.5903 129.333 cv
79.5903 129.701 79.4224 130.028 79.1978 130.247 cv
78.8091 130.612 78.3599 130.625 78.0259 130.64 cv
59.6567 130.64 li
59.3188 130.625 58.8735 130.612 58.481 130.247 cv
58.2603 130.028 58.0923 129.701 58.0923 129.333 cv
58.0923 128.885 58.3306 128.543 58.6216 128.325 cv
59.0005 128.069 59.3364 128.069 59.6411 128.069 cv
78.0356 128.069 li
78.0356 128.069 li
cp
f
78.0356 123.772 mo
78.3462 123.772 78.6802 123.772 79.0571 124.03 cv
79.3501 124.247 79.5903 124.586 79.5903 125.036 cv
79.5903 125.405 79.4224 125.731 79.1978 125.949 cv
78.8091 126.316 78.3599 126.331 78.0259 126.344 cv
59.6567 126.344 li
59.3188 126.331 58.8735 126.316 58.481 125.949 cv
58.2603 125.731 58.0923 125.405 58.0923 125.036 cv
58.0923 124.586 58.3306 124.247 58.6216 124.03 cv
59.0005 123.772 59.3364 123.772 59.6411 123.772 cv
78.0356 123.772 li
78.0356 123.772 li
cp
f
36.4268 139.933 mo
36.4268 140.247 36.4268 140.627 36.6787 140.955 cv
36.9053 141.24 37.2822 141.418 37.6592 141.418 cv
38.3701 141.418 38.665 140.967 38.8154 140.708 cv
39.417 141.252 40.0322 141.459 40.8564 141.459 cv
42.8271 141.459 44.0967 139.973 44.0967 137.784 cv
44.0967 135.155 42.4346 134.065 40.9678 134.065 cv
40.2002 134.065 39.4463 134.324 39.0107 134.924 cv
39.0107 132.772 li
39.0107 131.915 38.3428 131.506 37.7432 131.506 cv
37.4756 131.506 37.0303 131.572 36.7217 131.997 cv
36.4697 132.325 36.4424 132.667 36.4268 133.317 cv
36.4268 139.933 li
36.4268 139.933 li
cp
40.1143 135.809 mo
40.4639 135.809 40.8271 135.971 41.0654 136.367 cv
41.2607 136.68 41.3721 137.153 41.3721 137.725 cv
41.3721 138.314 41.2764 139.046 40.8955 139.417 cv
40.7002 139.608 40.4111 139.715 40.1299 139.715 cv
38.9541 139.715 38.9307 138.258 38.9307 137.793 cv
38.9307 137.333 38.9541 136.407 39.5146 135.999 cv
39.6826 135.875 39.9072 135.809 40.1143 135.809 cv
40.1143 135.809 li
cp
0 0 0 1 cmyk
f
56.3677 138.368 mo
56.9399 138.368 57.1899 137.932 57.1899 137.333 cv
57.1899 135.768 56.1021 134.039 53.5869 134.039 cv
51.0303 134.039 49.8154 135.699 49.8154 137.702 cv
49.8154 139.565 50.8193 141.51 53.5576 141.51 cv
55.7368 141.51 56.7876 140.354 56.7876 139.702 cv
56.7876 139.17 56.2837 138.748 55.6846 138.748 cv
55.3604 138.748 55.1533 138.884 54.9951 139.007 cv
54.8037 139.157 54.6494 139.336 54.4385 139.458 cv
54.2412 139.593 53.9775 139.674 53.6846 139.674 cv
52.54 139.674 52.4131 138.667 52.3857 138.368 cv
56.3677 138.368 li
56.3677 138.368 li
cp
52.3721 136.993 mo
52.4424 136.542 52.624 136.174 53.0146 135.985 cv
53.1689 135.905 53.3643 135.861 53.5752 135.861 cv
54.2178 135.861 54.4658 136.27 54.5225 136.379 cv
54.6338 136.584 54.6611 136.774 54.6904 136.993 cv
52.3721 136.993 li
52.3721 136.993 li
cp
f
67.5649 134.021 mo
65.5806 134.021 63.6685 135.045 63.6685 137.715 cv
63.6685 138.776 63.9204 139.661 64.6196 140.438 cv
64.9536 140.819 65.7095 141.528 67.4673 141.528 cv
69.6606 141.528 71.3657 140.354 71.3657 137.784 cv
71.3657 135.999 70.3892 134.021 67.5649 134.021 cv
67.5649 134.021 li
cp
67.5376 135.889 mo
68.0688 135.889 68.3208 136.174 68.4888 136.502 cv
68.6567 136.856 68.7407 137.305 68.7407 137.852 cv
68.7407 138.45 68.6567 139.648 67.5239 139.648 cv
66.3345 139.648 66.2935 138.19 66.2935 137.742 cv
66.2935 137.305 66.3228 135.889 67.5376 135.889 cv
67.5376 135.889 li
cp
f
72.4673 135.524 mo
72.481 135.263 72.481 134.991 72.6196 134.731 cv
72.8169 134.364 73.1958 134.118 73.6704 134.118 cv
74.0298 134.118 74.3267 134.256 74.5493 134.487 cv
74.8403 134.788 74.8696 135.075 74.897 135.291 cv
75.0513 135.1 75.1782 134.934 75.4146 134.731 cv
75.9028 134.31 76.5591 134.108 77.2153 134.108 cv
77.8853 134.108 78.5435 134.364 78.9751 134.868 cv
79.3931 135.358 79.4517 135.809 79.4517 136.27 cv
79.4517 139.948 li
79.4517 140.233 79.4243 140.531 79.2153 140.873 cv
78.9751 141.213 78.5845 141.418 78.1646 141.418 cv
77.7466 141.418 77.4106 141.27 77.1606 140.914 cv
76.895 140.559 76.8696 140.247 76.8696 139.908 cv
76.8696 137.075 li
76.8696 136.87 76.8696 136.638 76.7407 136.421 cv
76.6021 136.149 76.3228 135.999 76.0142 135.999 cv
75.7759 135.999 75.5825 136.079 75.4263 136.202 cv
75.0825 136.502 75.063 137.034 75.063 137.577 cv
75.063 139.989 li
75.063 140.221 75.0376 140.559 74.811 140.873 cv
74.5767 141.213 74.186 141.418 73.7388 141.418 cv
73.2075 141.405 72.7896 141.105 72.6079 140.751 cv
72.481 140.491 72.4673 140.221 72.4673 139.989 cv
72.4673 135.524 li
72.4673 135.524 li
cp
f
47.8525 138.869 mo
47.8525 139.086 47.8525 139.305 48.1748 139.375 cv
48.2451 139.387 48.6221 139.415 48.7061 139.442 cv
48.9717 139.523 49.292 139.838 49.292 140.352 cv
49.292 141.51 48.0088 141.51 47.7822 141.51 cv
47.4209 141.51 47.0576 141.482 46.71 141.401 cv
45.2822 141.049 45.1982 139.999 45.1982 139.184 cv
45.2119 133.032 li
45.2275 132.703 45.2412 132.267 45.6182 131.887 cv
45.8408 131.668 46.1768 131.506 46.5537 131.506 cv
47.0166 131.506 47.3643 131.737 47.5889 132.023 cv
47.8525 132.391 47.8525 132.715 47.8525 133.017 cv
47.8525 138.869 li
47.8525 138.869 li
cp
f
31.374 135.869 mo
31.8369 135.869 32.1611 136.156 32.3135 136.471 cv
32.4678 136.772 32.5537 137.334 32.5537 137.868 cv
32.5537 139.045 32.1865 139.387 32.0068 139.524 cv
31.7529 139.73 31.4873 139.756 31.333 139.756 cv
30.7529 139.756 30.4287 139.346 30.2822 138.934 cv
30.21 138.784 30.1143 138.469 30.1143 137.852 cv
30.1143 137.444 30.1846 136.87 30.417 136.459 cv
30.7275 135.921 31.1748 135.869 31.374 135.869 cv
31.374 135.869 li
cp
32.5127 135.01 mo
32.5127 135.01 li
32.0205 134.336 31.29 134.116 30.5713 134.116 cv
28.3545 134.116 27.4287 136.004 27.4287 137.868 cv
27.4287 140.181 28.8037 141.455 30.4521 141.455 cv
31.7959 141.455 32.3311 140.769 32.5811 140.45 cv
32.6377 141.151 33.3057 141.418 33.7471 141.418 cv
34.1807 141.418 34.6338 141.206 34.8701 140.754 cv
35.0381 140.414 35.0537 139.99 35.0537 139.566 cv
35.0439 135.917 li
35.0439 135.483 35.0322 135.046 34.8584 134.699 cv
34.6123 134.235 34.1533 134.021 33.7041 134.021 cv
33.2607 134.021 32.5674 134.291 32.5127 135.01 cv
32.5127 135.01 li
cp
f
58.9907 133.518 mo
59.0083 133.162 59.0356 132.768 59.356 132.401 cv
59.481 132.267 59.7622 131.993 60.2759 131.993 cv
60.9185 131.993 61.5474 132.415 61.5474 133.355 cv
61.5474 134.224 li
62.106 134.224 li
62.6802 134.24 63.0142 134.524 63.0298 135.083 cv
63.0298 135.37 62.9185 135.615 62.7349 135.75 cv
62.4946 135.954 62.1626 135.94 61.5474 135.928 cv
61.5474 138.869 li
61.5474 139.086 61.5474 139.305 61.8677 139.375 cv
61.9399 139.387 62.3169 139.415 62.3989 139.443 cv
62.6665 139.523 62.9868 139.838 62.9868 140.352 cv
62.9868 141.51 61.7017 141.51 61.4771 141.51 cv
61.1138 141.51 60.7524 141.482 60.4028 141.401 cv
58.9771 141.049 58.895 140 58.895 139.184 cv
58.895 138.326 58.936 136.8 58.9517 135.94 cv
58.4888 135.954 58.3071 135.94 58.1567 135.901 cv
57.7778 135.778 57.6235 135.409 57.6235 135.057 cv
57.6235 134.973 57.6235 134.893 57.6489 134.786 cv
57.8052 134.266 58.2524 134.25 58.4751 134.24 cv
58.9907 134.24 li
58.9907 133.518 li
58.9907 133.518 li
cp
f
3.0459 20.5029 mo
3.0459 20.8267 3.0459 21.1831 2.7583 21.5835 cv
2.51563 21.8911 2.13574 22.1436 1.63281 22.1436 cv
1.2251 22.1436 0.857422 21.9658 0.615234 21.731 cv
0.20752 21.3169 0.192383 20.8408 0.174805 20.4854 cv
0.174805 5.08496 li
0.192383 4.72852 0.20752 4.25439 0.615234 3.84131 cv
0.857422 3.604 1.2251 3.42529 1.63281 3.42529 cv
2.13574 3.42529 2.51563 3.67773 2.7583 3.98828 cv
3.0459 4.38965 3.0459 4.74268 3.0459 5.06885 cv
3.0459 20.5029 li
3.0459 20.5029 li
cp
0.65 0 1 0 cmyk
f
7.83984 20.5029 mo
7.83984 20.8267 7.83984 21.1831 7.54736 21.5835 cv
7.30713 21.8911 6.92725 22.1436 6.42725 22.1436 cv
6.01709 22.1436 5.65186 21.9658 5.40918 21.731 cv
4.99658 21.3169 4.98389 20.8408 4.96924 20.4854 cv
4.96924 5.08496 li
4.98389 4.72852 4.99658 4.25439 5.40918 3.84131 cv
5.65186 3.604 6.01709 3.42529 6.42725 3.42529 cv
6.92725 3.42529 7.30713 3.67773 7.54736 3.98828 cv
7.83984 4.38965 7.83984 4.74219 7.83984 5.06885 cv
7.83984 20.5029 li
7.83984 20.5029 li
cp
f
12.6318 17.5093 mo
12.6318 17.8345 12.6318 18.1919 12.3442 18.5923 cv
12.0991 18.9023 11.7212 19.1548 11.2188 19.1548 cv
10.8086 19.1548 10.4434 18.9751 10.1982 18.7412 cv
9.79053 18.3247 9.77588 17.8496 9.76318 17.4941 cv
9.76318 2.0957 li
9.77588 1.73779 9.79053 1.26367 10.1982 0.850586 cv
10.4434 0.612793 10.8086 0.436523 11.2188 0.436523 cv
11.7212 0.436523 12.0991 0.688965 12.3442 0.997559 cv
12.6318 1.39893 12.6318 1.75342 12.6318 2.07959 cv
12.6318 17.5093 li
12.6318 17.5093 li
cp
f
17.4233 20.5029 mo
17.4233 20.8267 17.4233 21.1831 17.1357 21.5835 cv
16.8931 21.8911 16.5156 22.1436 16.0127 22.1436 cv
15.5977 22.1436 15.2378 21.9658 14.9927 21.731 cv
14.5825 21.3169 14.5674 20.8403 14.5547 20.4854 cv
14.5547 5.08496 li
14.5674 4.72852 14.5825 4.25391 14.9927 3.84131 cv
15.2378 3.604 15.5977 3.42529 16.0127 3.42529 cv
16.5156 3.42529 16.8931 3.67773 17.1357 3.98828 cv
17.4233 4.38965 17.4233 4.74219 17.4233 5.06885 cv
17.4233 20.5029 li
17.4233 20.5029 li
cp
f
22.2178 17.5093 mo
22.2178 17.8345 22.2178 18.1919 21.9302 18.5923 cv
21.6851 18.9023 21.3047 19.1548 20.8022 19.1548 cv
20.3921 19.1548 20.0293 18.9751 19.7866 18.7412 cv
19.3765 18.3247 19.3618 17.8496 19.3442 17.4941 cv
19.3442 2.0957 li
19.3618 1.73779 19.3765 1.26367 19.7866 0.850586 cv
20.0293 0.612793 20.3921 0.436523 20.8022 0.436523 cv
21.3047 0.436523 21.6851 0.688965 21.9302 0.997559 cv
22.2178 1.39893 22.2178 1.75342 22.2178 2.07959 cv
22.2178 17.5093 li
22.2178 17.5093 li
cp
f
27.0093 20.5029 mo
27.0093 20.8267 27.0093 21.1831 26.7192 21.5835 cv
26.4766 21.8911 26.0991 22.1436 25.5962 22.1436 cv
25.1885 22.1436 24.8237 21.9658 24.5786 21.731 cv
24.1709 21.3169 24.1558 20.8403 24.1382 20.4854 cv
24.1382 5.08496 li
24.1558 4.72852 24.1709 4.25391 24.5786 3.84131 cv
24.8237 3.604 25.1885 3.42529 25.5962 3.42529 cv
26.0991 3.42529 26.4766 3.67773 26.7192 3.98828 cv
27.0093 4.38965 27.0093 4.74219 27.0093 5.06885 cv
27.0093 20.5029 li
27.0093 20.5029 li
cp
f
31.8008 20.5029 mo
31.8008 20.8267 31.8008 21.1831 31.5132 21.5835 cv
31.271 21.8911 30.8906 22.1436 30.3906 22.1436 cv
29.978 22.1436 29.6152 21.9658 29.3726 21.731 cv
28.96 21.3169 28.9448 20.8403 28.9302 20.4854 cv
28.9302 5.08496 li
28.9448 4.72852 28.96 4.25391 29.3726 3.84131 cv
29.6152 3.604 29.978 3.42529 30.3906 3.42529 cv
30.8906 3.42529 31.271 3.67773 31.5132 3.98828 cv
31.8008 4.38965 31.8008 4.74219 31.8008 5.06885 cv
31.8008 20.5029 li
31.8008 20.5029 li
cp
f
55.0415 8.10596 mo
55.3794 8.10596 55.7441 8.10596 56.1519 8.38721 cv
56.4722 8.62402 56.7319 8.99414 56.7319 9.48291 cv
56.7319 9.88184 56.5498 10.2383 56.3071 10.4771 cv
55.8843 10.8735 55.394 10.8872 55.0317 10.9033 cv
35.0522 10.9033 li
34.6846 10.8872 34.2017 10.8735 33.7739 10.4771 cv
33.5342 10.2383 33.3516 9.88184 33.3516 9.48291 cv
33.3516 8.99414 33.6118 8.62402 33.9268 8.38721 cv
34.3394 8.10596 34.7046 8.10596 35.0371 8.10596 cv
55.0415 8.10596 li
55.0415 8.10596 li
cp
f
55.0415 3.43457 mo
55.3794 3.43457 55.7441 3.43457 56.1519 3.71387 cv
56.4722 3.9502 56.7319 4.3208 56.7319 4.81006 cv
56.7319 5.20996 56.5498 5.56396 56.3071 5.80176 cv
55.8843 6.20313 55.394 6.21777 55.0317 6.23047 cv
35.0522 6.23047 li
34.6846 6.21777 34.2017 6.20313 33.7739 5.80176 cv
33.5342 5.56396 33.3516 5.20996 33.3516 4.81006 cv
33.3516 4.3208 33.6118 3.9502 33.9268 3.71387 cv
34.3394 3.43457 34.7046 3.43457 35.0371 3.43457 cv
55.0415 3.43457 li
55.0415 3.43457 li
cp
f
55.0415 17.4517 mo
55.3794 17.4517 55.7441 17.4517 56.1519 17.7305 cv
56.4722 17.9673 56.7319 18.3398 56.7319 18.8271 cv
56.7319 19.2275 56.5498 19.5825 56.3071 19.8203 cv
55.8843 20.2178 55.394 20.2329 55.0317 20.248 cv
35.0522 20.248 li
34.6846 20.2329 34.2017 20.2178 33.7739 19.8203 cv
33.5342 19.5825 33.3516 19.2275 33.3516 18.8271 cv
33.3516 18.3398 33.6118 17.9673 33.9268 17.7305 cv
34.3394 17.4517 34.7046 17.4517 35.0371 17.4517 cv
55.0415 17.4517 li
55.0415 17.4517 li
cp
f
55.0415 12.7803 mo
55.3794 12.7803 55.7441 12.7803 56.1519 13.0576 cv
56.4722 13.2954 56.7319 13.6641 56.7319 14.1533 cv
56.7319 14.5532 56.5498 14.9087 56.3071 15.146 cv
55.8843 15.5464 55.394 15.561 55.0317 15.5762 cv
35.0522 15.5762 li
34.6846 15.561 34.2017 15.5464 33.7739 15.146 cv
33.5342 14.9087 33.3516 14.5532 33.3516 14.1533 cv
33.3516 13.6641 33.6118 13.2954 33.9268 13.0576 cv
34.3394 12.7803 34.7046 12.7803 35.0371 12.7803 cv
55.0415 12.7803 li
55.0415 12.7803 li
cp
f
9.78564 30.3564 mo
9.78564 30.6963 9.78564 31.1118 10.061 31.4668 cv
10.3086 31.7769 10.7188 31.9722 11.1265 31.9722 cv
11.9014 31.9722 12.2217 31.4819 12.3843 31.1978 cv
13.0396 31.7905 13.707 32.0171 14.605 32.0171 cv
16.748 32.0171 18.1284 30.3989 18.1284 28.0181 cv
18.1284 25.1582 16.3203 23.9741 14.7251 23.9741 cv
13.8921 23.9741 13.0718 24.2544 12.5967 24.9067 cv
12.5967 22.5674 li
12.5967 21.6357 11.8716 21.1904 11.2188 21.1904 cv
10.9287 21.1904 10.4434 21.2617 10.1084 21.7231 cv
9.8335 22.0811 9.80322 22.4521 9.78564 23.1587 cv
9.78564 30.3564 li
9.78564 30.3564 li
cp
13.7974 25.8711 mo
14.1772 25.8711 14.5723 26.0474 14.8325 26.4775 cv
15.0449 26.8179 15.165 27.333 15.165 27.9556 cv
15.165 28.5957 15.0625 29.3911 14.6475 29.7935 cv
14.4351 30.0024 14.1196 30.1187 13.8145 30.1187 cv
12.5366 30.1187 12.5093 28.5332 12.5093 28.0293 cv
12.5093 27.5278 12.5366 26.52 13.1445 26.0771 cv
13.3271 25.9424 13.5723 25.8711 13.7974 25.8711 cv
13.7974 25.8711 li
cp
0 0 0 1 cmyk
f
31.4761 28.6533 mo
32.0986 28.6533 32.3711 28.1807 32.3711 27.5278 cv
32.3711 25.8262 31.1855 23.9443 28.4497 23.9443 cv
25.6689 23.9443 24.3481 25.75 24.3481 27.9292 cv
24.3481 29.9551 25.4414 32.0718 28.4199 32.0718 cv
30.7905 32.0718 31.9336 30.814 31.9336 30.104 cv
31.9336 29.5259 31.3833 29.0659 30.7329 29.0659 cv
30.3804 29.0659 30.1553 29.2158 29.9829 29.3486 cv
29.7754 29.5122 29.605 29.7061 29.3774 29.8389 cv
29.1626 29.9863 28.875 30.0752 28.5571 30.0752 cv
27.312 30.0752 27.1743 28.9795 27.1445 28.6533 cv
31.4761 28.6533 li
31.4761 28.6533 li
cp
27.1294 27.1577 mo
27.207 26.6675 27.4043 26.2676 27.8271 26.061 cv
27.9971 25.9746 28.2095 25.9272 28.437 25.9272 cv
29.1377 25.9272 29.4077 26.3726 29.4678 26.4902 cv
29.5903 26.7139 29.6201 26.9204 29.6504 27.1577 cv
27.1294 27.1577 li
27.1294 27.1577 li
cp
f
43.6553 23.9268 mo
41.4966 23.9268 39.416 25.0396 39.416 27.9429 cv
39.416 29.0957 39.6914 30.0586 40.4517 30.9053 cv
40.814 31.3193 41.6367 32.0894 43.5474 32.0894 cv
45.9336 32.0894 47.7891 30.814 47.7891 28.0181 cv
47.7891 26.0771 46.7261 23.9268 43.6553 23.9268 cv
43.6553 23.9268 li
cp
43.625 25.9575 mo
44.2026 25.9575 44.4756 26.2676 44.6577 26.625 cv
44.8403 27.0103 44.9331 27.498 44.9331 28.0933 cv
44.9331 28.7432 44.8403 30.0464 43.6099 30.0464 cv
42.3145 30.0464 42.272 28.4609 42.272 27.9731 cv
42.272 27.498 42.3022 25.9575 43.625 25.9575 cv
43.625 25.9575 li
cp
f
48.9868 25.561 mo
49.002 25.2769 49.002 24.981 49.1519 24.6968 cv
49.3672 24.2993 49.7773 24.0317 50.2949 24.0317 cv
50.6851 24.0317 51.0078 24.1816 51.2505 24.4316 cv
51.5679 24.7593 51.5977 25.0723 51.6279 25.3071 cv
51.7954 25.0996 51.9355 24.9194 52.1904 24.6968 cv
52.7231 24.2407 53.436 24.019 54.1489 24.019 cv
54.8789 24.019 55.5942 24.2993 56.0645 24.8472 cv
56.5195 25.3794 56.582 25.8711 56.582 26.3726 cv
56.582 30.3716 li
56.582 30.6826 56.5522 31.0068 56.3247 31.3779 cv
56.0645 31.748 55.6392 31.9722 55.1816 31.9722 cv
54.729 31.9722 54.3613 31.8096 54.0913 31.4219 cv
53.8013 31.0366 53.7734 30.6963 53.7734 30.3291 cv
53.7734 27.2476 li
53.7734 27.0239 53.7734 26.7725 53.6338 26.5361 cv
53.4834 26.2397 53.1782 26.0771 52.8433 26.0771 cv
52.583 26.0771 52.373 26.1636 52.2031 26.2974 cv
51.8306 26.625 51.8081 27.2026 51.8081 27.793 cv
51.8081 30.4165 li
51.8081 30.6689 51.7803 31.0366 51.5352 31.3779 cv
51.2803 31.748 50.855 31.9722 50.3701 31.9722 cv
49.7925 31.957 49.3369 31.6304 49.1396 31.2466 cv
49.002 30.9614 48.9868 30.6689 48.9868 30.4165 cv
48.9868 25.561 li
48.9868 25.561 li
cp
f
22.2153 29.1982 mo
22.2153 29.4346 22.2153 29.6738 22.5654 29.7485 cv
22.6401 29.7612 23.0503 29.791 23.1431 29.8213 cv
23.4307 29.9102 23.7808 30.2524 23.7808 30.8115 cv
23.7808 32.0718 22.3828 32.0718 22.1377 32.0718 cv
21.7451 32.0718 21.3496 32.0405 20.9722 31.9521 cv
19.4189 31.5693 19.3267 30.4263 19.3267 29.541 cv
19.3418 22.8486 li
19.3589 22.4912 19.374 22.0186 19.7842 21.6045 cv
20.0269 21.3682 20.3921 21.1904 20.8022 21.1904 cv
21.3047 21.1904 21.6826 21.4409 21.9272 21.7534 cv
22.2153 22.1533 22.2153 22.5063 22.2153 22.834 cv
22.2153 29.1982 li
22.2153 29.1982 li
cp
f
4.2915 25.9351 mo
4.79395 25.9351 5.14648 26.2476 5.31396 26.5903 cv
5.48193 26.9175 5.57422 27.5303 5.57422 28.1079 cv
5.57422 29.3911 5.17432 29.7612 4.979 29.9111 cv
4.7041 30.1353 4.41406 30.1641 4.24609 30.1641 cv
3.61621 30.1641 3.26367 29.7188 3.10352 29.27 cv
3.02588 29.106 2.9209 28.7646 2.9209 28.0933 cv
2.9209 27.6494 2.99854 27.0239 3.25098 26.5791 cv
3.58838 25.9922 4.07373 25.9351 4.2915 25.9351 cv
4.2915 25.9351 li
cp
5.5293 25.002 mo
5.5293 25.002 li
4.99414 24.2695 4.20117 24.0293 3.41846 24.0293 cv
1.00781 24.0293 0 26.0835 0 28.1079 cv
0 30.6265 1.49512 32.0107 3.28857 32.0107 cv
4.75146 32.0107 5.33154 31.2656 5.60449 30.918 cv
5.66699 31.6792 6.39209 31.9722 6.87207 31.9722 cv
7.34473 31.9722 7.8374 31.7407 8.09277 31.249 cv
8.27783 30.8789 8.29248 30.4175 8.29248 29.9561 cv
8.28271 25.9873 li
8.28271 25.5161 8.27002 25.0405 8.08008 24.6631 cv
7.8125 24.1577 7.31494 23.9268 6.82471 23.9268 cv
6.34473 23.9268 5.58936 24.2192 5.5293 25.002 cv
5.5293 25.002 li
cp
f
34.3296 23.3789 mo
34.3467 22.9912 34.377 22.5635 34.7271 22.1636 cv
34.8618 22.0186 35.167 21.7197 35.7275 21.7197 cv
36.4253 21.7197 37.1104 22.1787 37.1104 23.2012 cv
37.1104 24.1465 li
37.7153 24.1465 li
38.3408 24.1641 38.7036 24.4731 38.7207 25.082 cv
38.7207 25.3921 38.6011 25.6597 38.4009 25.8062 cv
38.1406 26.0288 37.7778 26.0137 37.1104 26 cv
37.1104 29.1982 li
37.1104 29.4346 37.1104 29.6738 37.458 29.7485 cv
37.5356 29.7612 37.9458 29.791 38.0356 29.8237 cv
38.3257 29.9102 38.6758 30.2524 38.6758 30.8115 cv
38.6758 32.0718 37.2778 32.0718 37.0327 32.0718 cv
36.6377 32.0718 36.2451 32.0405 35.8647 31.9521 cv
34.3145 31.5693 34.2241 30.4287 34.2241 29.541 cv
34.2241 28.6084 34.2695 26.9487 34.2866 26.0137 cv
33.7817 26.0288 33.584 26.0137 33.4214 25.9697 cv
33.0088 25.8374 32.8413 25.4346 32.8413 25.0522 cv
32.8413 24.9619 32.8413 24.8745 32.8687 24.7568 cv
33.0391 24.1919 33.5264 24.1768 33.7666 24.1641 cv
34.3296 24.1641 li
34.3296 23.3789 li
34.3296 23.3789 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/RIOJGB+Ableton-Book*1 uf/RIOJGB+Ableton-Book uf/Ableton-Book ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 13.0.2%%For: (pas) ()%%Title: (Ableton_logo_print.eps)%%CreationDate: 5/27/08 2:44 PM%AI9_DataStream%Gb"-6MgAUJFX[1&!8dhU=snK'JU?f@:>/mGCf_*`WM]#Mbt3=+&<^FP!!@ale>GO;Y'Y(p"/Kc/,lPLL`JVUQflL<&B$Ip5#9Q'1%h(15BbEi`?J,NngHlb<.8&"ui9/ub*K7BMC1Y_9))94'=BK3HG6L-J:NNr-i5E<SAqVB'>o]BnsgcelEVR+P0CpdBI2kQ&ShG0B3%B=#Qdp#G8P@PWAfC&7X?\ZJTo5@;XCX6%#"X&\o'(H9stMtu^[Ygr\BiVUsaMqR9op!mS7MW4nKmX#rIgWeg@X:>^>-LdelFE)@^%HVu4F]6n^#J%^D?V!mj2(UNM;0")7!lM,"!4o9YO&YG#N]#IT'1A/tK4H7`)le-+M;/Q<%$E*oPpnoL'c":!([!k/BrY^01s&#R@%?-KH!lcF=a>1UMRU#u$7UPH/lPFKOWjuR6]eUMI$)I`B$Y5tlDO!7?:i)Joi4EsnWr9p5.s4V)^s+5aTOW/Qck/igB0SH:[a(FC"%rN52Tk!8qg_B]0":M3b\Mog-s'OscULQONlrdX+ggp1f:d8a+p@EdA';At7*`Z`r`A6Z#b2jPAk<&K"YTDeQ,kc;gI^>,kLY6_=-%k#3IYqs3Xgr4hR#qZ'Q5#l;fj@^c8Z3<oW&*XdDie`q1`?k@eaq-jF&haJ.V5;d[H=hgJDla^+LDI>7a)<HU&p%?S[q;gpZh%&rL%HFA44q@7.bc\>;U"je*T]%El(Q1q:R1PO*iEe!R9Hn1a7=*Nh!-.9j"q9/U)',rIUl_su^&IErlSmSo?SEqZQs5Emr\au`?+.?kK%o6*3",1YS#AF0&'?a]hhc1n>t3qR(.bHo_6CdC3=+$>q@3RksO=M:Nfl+caIp%+[=P<YVJEr),leTSC#I4]'+&l2l;-Z<TAA+Ss`%bP>s[J$V/K^TP=84f]rN^0"'(5FY>b[^4Gd\+@T#m.@P>4$!7?^R.i]$2/OG.:HM]j2GL$f@*=GL;'9fk>UVmL0pOBcKN_[kL5iJ%3iDE/e7RQO1Y4NXm/H'f7;Z,UG1C<=d^CZpapg5ATr'bce!&6"D0n9gq/Wo-]rVm;btb/Ohkut2CqY@!Ch?V=]$oh$MopEBJOe5(%Y$[a6"D5!QI(lO]>1X4604pQKe(+-G8hI6TVq^n*EX)I*PieXVNL-^5jm9tNrQe4\D\eP]WtPYB05`[LoAr^$8H+'">Fo0Wm"/%,%g<&6Qp#V*7m:sA*_8!0#S*A0!IZObt$Koh:E\lIc+tm"^/l-,0SLu6jps2Q<oBBd_5L?T?e,qg?mSDm):#5*feS;^`^"BbX&LQcP%1r"d1Dm&CHE-e-7j$"+qs7P(0$><sq=f6@&]>D=EO=Q3n;u)"@`1L3m!AEVSk!1&H1r]8HrRZu#KQd!oS+R,$MC1jUNB^iq-`8W[%Fhp`mFl_$;3mR"'#R'n54_N(gS!d"_J#H)NY?!TO8g5X\pH'Ys=m+]:M)%9DaaHXWGsq-l?#k@hN?1rla40<mVa">Y@qtNc[J72b%c+!>G9A$5gAq&J0RPs/?10k!q=/M&'-<!#<FJS.hT:EX,=h^E-Dlsk>Rr(<DX6&^@l#]h<4*gZ?o$[$hpJ3a@p@r1jFo<WB-ci/K%>>A6Bh0_!S^+34U7>sI%p3q;@CIr@>l$lU/Pn-KRU\gCYkHh()Y@f541=>T:*gu(a.pch;\X>#6&+ObUHr85/p20!"!A:TBAX9Y/%ln83T@^:PP<tG7Q5$;.9?bAA#Mn25(iUhH0]"FG3Q8#L*DLo@KmW1C:Ho672)4d--:+HR""#MbZSPH?R#Cki<P^N=H[b+@?Q1(,U%lY67bg%+6@A:4Q>(R:#q^Nb+uI'rbKPlBeqP*R-pTAN`J5,k"R=3&G7fC5:-rKG2prRD_Me]mc^jbq[2LPVAGPKEMu'a3h?gO(he%)#ZFg0.QUAranX(nRR+IdF%rbY!F1T3I:W$LWUq/`scY]F`B4pc>N+7@LBU'HLtTnZ["ES\lp\-If3X<1`;6KB`If]`Y88Xq05Ju%hB.Rnm#G&!TYJ*9C?rb^e6i2<pO5$"2\'0CoBFU%"2EHMk]cJL=;BrKZhAbD;?"93=lRPpDm!8Ylp.-BkF!r7(N6@!EHQVH<McZe%=U/dLrG;:A[THgZ-E3)Q4cTFp=^N9:)RcVcbfb<!n3"0n>[:WfZ9#RA27]=;FLSG;a-INc+QLFO3E_CSY$D,+WUsEj=e?uP9KN^!%pUdNqhS%Zg,5qeUQ&iu-LL8AVe?`UJ3b_(Xl^pE@G]Ik77ea)^>0ZAoDsIp@epmTo5sLD-kc<+'rnNGbU%pVppJU^6>SW,9N>Z#E%IL\AtcJdqAr%k]Ehtd9LA6C;,cibEARCn1WOW--2#"W`=,(*e=9sA>25rjn;G9.Z&@&thRBAiW1$-&"N:-OHZ_es[k$)RbE\oCYR%`X]'3dPMiUG2m+I'O=9J3to8KfRgY$q:UfiZT%ZCD[5I/o?PrBO'Sd>0RQ);9lTT)W4H[l(-_A#S!*+1"cB@AdUCksd#REsld'!E%4FL@0d"E6EFVX+4k]Kt3i,da@QZa/J>p3iLQVZZ.BTtQ+hrIY$&GkV548@.-i!Rj8(Gh(+:pY-MFm0phfi^#Q0UkHTRB$)2ZE(^m%1cWf<N[@r_N*b!%)!*b(cV8gSFJQaMWJm&8Od^Slo?)\[9/B<hncV;M\qGX3!emK4VG]@DP_t,,1*N@NP6T3?MqoSgMNJdd<!mbE%RLI+EZ`S'R*XgGU4h%O$o9%<*[j<:6!I*8;DSOkNC"lT"8^\BcTP`>L"1IlQ>QiZecI*na]AO/;Hl"daaH@B.7@t=Sni#N2$t(&2%]OsZ`]@]8.Gu6TD2tbK5Q(*/(3S4ieYl=RQ3@HI&dQrG0b!E!/B&g*mSO<rN.b&N[nUA$u`V\dq(I*gN?+b).Fn'pk<#>E`QQkbu%E<u8h@PXXg'!:ElFo_@,L$)aSDk;/mo'K!L"6^j,;#c7DHPHg4\,2^KrMFf)^Vbb4k`G:Nn&Dor8h/o7#785+9+&P[r"+OqU0IZf%8S'D43j9=PqTJ_:?$?1I0d_rfbI0<Rl;OWD2-A_-4AI6>3N-2a.090),0'asODJKFQ&e+=b"]hX!XI=:RS7:X\H&+N/keF$I(kd6%4BuunU6&1430#HWZ"oe)YcXm0dolb2*F\`[JGlguY+:L'2H<XkA>^#1CpanVW=qV&9b$^/H8I*PEX,:*W!k<*E&!hQWsc_TnCB+u%rlb/c+P*,a^'H,7HNKp"R^"A$FuDq;V(iRd(b588"m96D`PRR#mCHU,N0anF9jhoR/P`\H)b_s8JLSNFp'1[p%@@Ip6Q`i$H4ZKI%KmJRmm_l^A2n3n\H>kH[!eg0()6Zi%B5F&0M:=i4QMYN^Z_P@Q?l&.o!m7Qj%\&`6%[.EB87(m&(eR-[WgAkim(0FL+D+O5aG!.e%-jk-r!oqqeH9j^S)qP3\/V%?n@fc1F0i/\ZdRV$7;B=T_Dulj-*FDs/Er`AeUE1)c94]`8ai$+g=r^J8X1(l"FSd=#N[RbX!<rlW%<pTqn_o6ZA>dgr@e,cm0i.OhVgXe5-`]=L_SH9&LQ-g`*L_<;B(oM]HWfU&DKnhkpmO`8ACVIcE?@U:BM&&[]SiiKq;PN1j>JUG!%!=?*(k\*LnBn99_6_S:AZ3)0@3X!*AP=N=&"\@MPE?a`7[]K\!F(m`&r7i;o_;.+dLY^MIXaGHcS5J:-;;gCdaXBcMgr'\ic>)C%%%9=Tt_YV&?:3H0*-Tu.VeI$+rYL<i[>e>r@'+gh0V&ltIdl,X.f'cUi]a;'mc<Rd+m],t7+K29Ok^4N#"HKI%2p64iKBWe'eeJ6)%S');g<AE&aSluN)[g=.l:9S87fh*+SB>?dKNN4/f[#M`,?EYrb2hMn$R;L\oB3fjD@,uueK:'Xl,76>T]iFB8R6"^Wg6`<)-/!rW%?koJfGth(X_=_8nUOKCh)*X1!f$8es;eE<f\Bo.%MHrJ^kk*R2[PR,tgY$armAt(6#D/HqnMS**6`L+.Y/O*^*a:Y2$dsh#.-Hi;%r*0f$\8a!.HD@DNg"+Q9gq0I7okLB:.*T$%OTi/c/nO<l^`js1bcJk9Z*GSt\oJ?ds+tfs6rWaT!o+RS+'>6H8S*e%SXkoAlE;<!%El/\#YG(M1"7k^lK.BgQ%[b2-JEI'F>A/1fPnD$q4ADp["sig=Vk&E7CL\@W-6PS=TH:joS+!_d@Rr4kVq2^:Rt6/QPLWF?X4kGk%'+L%=rL%gAeR-_7WjlY%@$3i+bH_7e)SZX_C"W"\dt0+!XNF!Nom3`T7>W=MH8?,*i21Chh.^)K-n(g4HW=I'"td>@>OAi1Y!!c3%aN6V"du?pVgrcrq$6:f,6SXZ/U`O^>issF9#uAiG#Ae0W/roeARX1j:)tdjZ5UDr[G2$%-mt0B[[0?89d"4?cD0tZOCC^Z%S9i7#%WgY%82L;=;&7Im1Hk236hH8pZZ/f1uAHI0PFMLmY"tN*Vf=DBg5a_WTWIn/'*BJbB[]t^@I^doEfUG/7m``-,[Bm#!*!gSB.UK)P%Dj>nX3N6OZi5kHiaN:l$@=1'kEgh[!+bpa4"o9O%$FhOaO.cBH`1hp,>)t\+(s3XKJZ2b3R/V[#kshYfgc->_ePcP'&:%;Vp>]Xc%qb;20e.pJ[0(9:L$=eqa3ki9#;#n,j=p.fO+Z"FG`N/`s_b5oJ$K#D%7W#M=/#1)*kJZA\@c[qhH'+BR/%1Kq)<n$@5FIej!8;2p%e2Dm7oh:#=/)\RNjA$#k%966(LP&g>*E9%pCfO/\R0kd9`7eN*m]M*)rWT-ZJVJ^J[SIe6E_rqa)?i]O1UQ6d8B*3,D6+oq!'TSS%,Z?%JW`Kq.;Cp6^?">(I6_djdgBNj<Y:Z"d]a2$a!!pZ<K6gLm-#9I[FI$.2c+3rY=sb^Q36Sbd3g=?aJ5[$lYA.7>&uS?8=_o.E%WZ.Q:XGXOj3sX%R[PHj6Aq)."OZ2&r/E@OZ$X-&n""2i*-WW`\*A@eq/=P(ZX"ohhf9aQ<YZ7Y=bS4!O.J"6M84dEo.k&CS[dYEc%Bn::n26l4k>@buL#1.-0;f2b>0urhf^qbE=CqS1sTXKu!.$_Qd&fEDQ(qt5>OIj>7pl_i'MIg%HFMQBKetFRN)")rO"kS$cV5gMh%.Q3k:-F+AVWN8PC"X_,82\t/kO^Q+@%q+j[?ntSA!+Y#sd9Dm$8@K8dP_BE\J@)+s.5(/\Fs[OBntE1!"(U%&hsaXKioB,uj9qUf%gO'K0e&\Z,,%(O/<bI-lb:itUn-_=bgsWG^]/!-F)qtC&#@K,ZFQ@6;c8b6BXgk$>LTGBb.W%XY5i_'IFhY=1NKOajOVX!c?9kZ?%fGMU8$C90U/RX:D%=oeR*0hCB%)VD<gU;-,edsSV3U2qmpl8F1(MZ#f\l49+HP5k`j/]%6W.3@X;rtL$K<]`hqF4"&Md.'V.]6[U%,)-F0%I!";hH]IbCeD^*g!*$Mjh[2(Z4A?M,bJ.H1.@nu"=q?<62.9MV,#6<;W-iQD'PoY6jP5goa^![<D+Q1dF5o4$X',a0,%/?%bqt`/KPZ9ed2H7m*O]\W`i__QerP-$8&JT3m[>YNTY[\H8j]]4:*f^$/CuXl^tOi)BLq&g/4?:Q?qK;[C<T0%H;_s"YTtu>J?2LH%`=08A>u,JGJe,kWM^]QZ$"irVKNCaDj@EZo8F3PGM)k0D;)oEA0`.p\4<%<VCRI/JkHX=*:<<DG)%H$Z1oN2GE+1=Ur"-qW'U/V#%OMj@c@OSfA^73N+:#6K[Ss8QP`b_Ck'>0B&82>]l_O%Na(%D@f@VX([*b?^=7=t1],Dd2G#%\nAaCp@IiD=R/a$,F`Zh)nnnE<^a%T45U_b/44^AFP`ngRrOVniq]><HRq7hGa^^Ou7hgU`lD)m/f^=.Jps[i-nP>BBJ.k[KI`,"BjfDKrq?+M&30N[,2bfpJ1TC-M,f5%3I-mg;J)O;8ikZa(fp=J)M*:`Yc+VTL9%^fRF2M6+ieaj8!XNBqB`C8VM^s]2,BXAKuaj&,c(m(2nWm0VD2Q7AfF;CF,K-r!4Z&R%NmKMJ_)7>,78c6P?h`Vm&l?NI*`)hZncYTnD"u%T>?s:cE53Hp&ITB-#Cuo5^)[iUkFkuL$(\>ob9BPa/fLI`K5?fQ)E*.t-JEFB%opRH^VafZ;i,s'VPI@9p,-V[e:!3Ma9Z6<kOBWZprH.3:PnQ5gGpNSqiA32=A])rBh:9FZ/@c0P3H%=@QOD*="<>pW&KPT?eCKe!%J7&uRK$gX2DL*@?.gl0f,4ga5:-MOV!jRVj-&;k+O$k/7,anJ>roj,bUDm;>ZkO1*H5bQ:J2kpa"^VeNe\sb..KjLD`Xob6[Nli%%fRdj57W0>UEch0_&EPA/Tq\qiRbN.rlMroK_^;a']990Ki`Anb=l)H"+XNuQ>h(1*A^ua6:er)AmkMI7`;KoK-Iit$'i68gD.5DU%c7%&7T%9G,k!CX'RoW4/9-23L\#4uhRZ9i%.$2fa3!O"_ap[-ij8tRgU1131=FA.g(2J3(/thYEm^"B)F'Gl\-LS\ah?bji"."On%KVJOEA'_H4YKADk-A$Frd_%uI,3b\%L/jcMUjJh-OGK'b'@4rc<#O=NIXhkQ%^#hO0\QP"grtRR@CAS"d&Z$G'f@Ps'MFm'DmkpO%d9Z;`CO7=K6.A13Ine@Q"U9E'p:qLc7jpVjc8eOM`fSN8_8Q7SM(9=QE!8F(M:Cc@U0(TVO,edni&>n-J@1D22+9r0nAg`%;LueG%1'<[ZA(-NN8MhCL!lZS0c&kYlT>+m4P^L^mYi0t/f0!@3$7:'j%=VRfEPUFri%WOe"b9!-3q+HIYiVi=8XNMS9X`bdTR`P$]S,M>%'q[eZ29P<GWgrRS`YdhCU9F`4$tKtQ)nYi*1">he/4t"-<dI>*h$&gMA)$b[8*8^'2\5E)U'qUgT$N(t)TVe')lRW7(b!<h2KHlk%`74m(ou*'J8.lJN5W"\5Q".$D.#?[Aj3N%cr:^g[A)Br#N.l5$'KRBn$E5LU?&!KmOI88Q:<3j_aJ).!egTHR<PXr?KM%YZh15'0%ksjgd6I#0G3W`B_N$9`>c`/-$6Ea_s[dH&LNc*T@quE9opZF%-+GN'*W=NP".n'V$eQp($_[mAl6mo9?]Ml&:SIu/<X@60_bFXta%0sbt1<BQ+Q_A@1Q`6mlEA>XpV54F77cBOXq]RoO<@%"?;1kf_"D$gi_k8ENLf@6pA,WN@\>>a[^7BG=(`OM77E!;.EDpR9J1(-Sb%4pA?G/0bj+(E>NT#@!>;Z3>6J@$3_:^#UT)S@YsHKkrFC/>c2N%$R=b)uAs;r9FJt]a1`%ZfL@PrZbm$>uq^2cIkLc3=.tR]-Ed_%p_H,lhZr1iE@uZD\YOl@]?md+4J59GKH4He8:'3%SOdag.Apa:qo]O3Dj5W$$1fa2TO88B%8>gF9N!'S7Cj)V=hCUn.SF$g;.Ne*%")A1=*fU>UUC!Bkgo*Jd@*g%df5gd"ctYW`LbTJN[QnY:5s&_Yh[fql@=#NOK;7'DU0p0,qnpN<+N+B((c5.s`GF^'&jr<:./R1W%i8o'Z!((frg;OGi-YLe."I:%9qX"gFie&GFT]^!Y3'8b4;h/s0,=r_;?/Djb6p*k&"b\ngE1d9+Qn#hTVn''kN=&WTFg,R%fHWBW%UO\\q4GscV@u3IQf0Jt'XQ"B2V?BqH3CL0i6K;4K1`S&[6$\]^$]S'k(sXH:af;.H9G'-;8\>,:q&lCo6l@%.F)kc``V:JX8$EZ(%+s8k)"]8JLg-[_5V"&91['j]E;.6+()I1p$:'agZ7'_6M/Z^j`SR1XTk_e&_!Q88(DAtQ_4/tdleeKH.-Uc-?fbZpT%-o=q!3CF)%fGM9GXNF2[#M]VSr3?l),(9tr.&aa(*"&i72KApm%$:?Y]W*SWGT+(RBX)N9)6rjUZm=FNU$TR<Y/V69ET]Fu7:lV71K%UY7C56$%Fq#I"?>miBC9U;)L36@9Fu7(sJQns?n-@@EG_UaRYnC&>+GPX2nWlatbD[,[@$b7OeF5TKXh_djfPjbX@=k^8*3LRH;/dgq:^C<5%`83;KTtL8Ab6>VoE_:cNA!i-ChX%TPj=mCO.MkN!IMc=&*\uX,36rEf>UNKW7)1-a\<+Y_7H,a/mj!rEJO2'd9F!=,GVEP3=52\a%diCaN-]?==BB>OQ%)(_iBhH5_o?;7LB+U^01X3]Dfgl6;E3UF?N#3*Bi`XIROT)hJSrMfo9u(0@qK&JkQc)(+A*3[E'm9c!8r[LT%Y=`2:&kg\=(.AiO8g6V<`'pu&L5aAoWkqn_eP/mlTQm"f_@fIcJ7kCXFP$_$`)MX[:nDV-Ff]%?j\HkE>0p9f\Ou)7]S?]8%!f%l%b#u%C\cTfE"UF]BJ\MTc?jM1#L0\tLR%GEmh<F%2LhL#N@R:01!KFmQ.j.cd3NP\DdsDAX8Wo3`&F!8j[_SFNV;L2O'7e$.m]StJ%5PFS64ZC;N#X;^t\VE?P&etC2ke?G%/#9j<SaP@KZ*M="11kBC+9`=.P>i/Sk.PXU]-N-cVn9_:4%/'=&<uhbpN".I)m8`.5Ol6'%a4np##1E,"!j6tjMn"#h2A,,%\l#7q_NJojB\9SBi#jka$2D.<XpQ*gMt:7&#Jcm*K]b^oOb"HXo8GF-Ud3F#PpplT%9hV@IcMSR%muiLM87%i;#)eBpOb)U8LB$@gG+0h@[/T3@^`Ls'>E`P'@WHi@Q41,<"#6L2`0-f=jq&t9km^9D`LqJn#aVf`+>TI>73e3Mh@*2/%_(kKc<i'8,&Jnb@dW'8+NU71ICg"CQ!F?82Yg,Lrqm82!F,2J/Yc:r^9#IB!<G!biW%Bt3WF'bi[shH#X9)2k)a8P#5'4%gKWK?=%Ye#IO8>@P00L0/dN5YIr+:99K<UO:+A]_/EG<Ep)!.)T$e7([e)Ds(fBMe&@<Z7c@G0GKbl;_Y3pFKi-AXu15@*hrM?WI&6(UFs3%;qS6"D8B@FG$jaG=huX<K9gNaBH/3f1nnMp"qIt99HOE].PQ""#8^2JN!jBK&/8*^j]k<k[][]Q&g@GTKi:`9o%o].,-/\!haUjO%6Ed@E?UtBrpp":A^'du7fh_m8Q^M-8m*+c<43@/XPK&IJT8Y_LO,Olim+Ob5/S%/TPYa3h9^-n[BJ.pI`+MKb,J!4DDNn-(4VEm<%k'e\*KI$PccS[\a3IYUkdP"?"pZ[S0<49A$L+QVoKDi7!!DuG\<W\eYOb'hLc@ms'5k-?k6Mk"Q&oAq4T"0sD,d<sD,-s9(ikW2V%r><afAq%3V,ObX6NBd4?"kJ5rk#_sUKIQB04lCSj#SE&0q`O=iDue\XU6D;ZU5W^LH3ac7S4JILd#]UH,Y6Jg>,uB/fRXDB'ub-6%LMu5#?'<DON&?jhCl.,&\DAWRm]>W(iBm,.lTlX,%Eq(!!;g$ME2&-n2[BElML#9@S-HR[U]ZW.PQ:/u$a@H%E=+>R8!pH;r$RX%%$/m,!De$jj.^g#!(dg8JE0BA&1FS+(e+Y7`b9Ep<,7CTCD-EZr0VtT-LCg8`kA4L]6KE7'd-\V^,#US/RICqOJWSmMMjKCYL2piU%d$g?PK#+_:i'I(*/'">e\PRN"bogW'6,;I0-#a>HaQSeja2usF9P,^B#E@PMkCI_>f36LV\:@if.uDc1WJKk=%$KS6d[_PD.S)``%LjLj*ko.VTi&drhD+Sf:a??"8%Ef%A8iRn8Qno-D8=)H^K4I/j+9lFP'8p[9c(kCPOLI3W+jq)AUlhC8/#K8m8lZa:'K'9.'aKqU%"[REu,_e7$c@V0=W:Od025lt]ARSFcp-mDO,r^-gaK(N@$-Gr1&inr+3\NEE7O(hWASfd,_>r+WHlH)r<^X\^'uYDAMT@&LK%2qR%GZ57K)[)=S_a5=q/iDub<:<oRlpYATBRd;c,k@E?<@5YiP=CSPm_kI!=-a^H=AY`d,:Cb)DoAuG6^p!D]gG^E3Q`9oJ\ju.,%.F$%KPb/i-j^V>-:8%t7jdXWJgod=9sHqDeM16]8-*_>U#sV<^t/"L`[R"'NT]+KC:K%<,gVJh//5lbiglah(lD&gTM6C0Kjb6*4Q@C+%2F5*Zp^o5ZPk%P='gJFK9OME*iY<q<J/AS<:)1K/@%48dB3F`b+_lnaf%Ism&<R,]1F(^bjT<:Wq#6g0a(!j.OV7f:+4]UIN#Oet%fQi'\"R<e,P61lG&dLaLfE-o#a'_ank_6imjP/jB*f/oc<u'f6EIc*d`,9':60AYJ%'[Y/T9JgU>sSZ&5^8T5>VHe!`B50pap(-9%=MrG[HLTZG?'>][9\>FP*fNH\TE?f9Ys5KL=pgemZ%5_,Pksug.iI]$E#QVmL>,q]YY5_k8nW;OffAC^K[4o?,)&W[`+_AS/G%&M%%KtDi"e_d]4'=t;<0QOake+[=o88KV#+PY1Q7j)Xo3c<+:jlS/:9I0`AqO].qB?eUPp[Ic+RiVs.GJ;XYGg<Rab[I1!@,u_a<-cW%@M0L:+E44\Oc)1f!NSY7@>U.SD8au503:_mmE_-")C_9=]TW[;S8/4HfU6[.GIms0PV(!O.i^n8GnaS"?+r,L9eG+Zb'$^=m5e[f%S[oD=DB-h"M]N#X_RI3j*MDdfU.'MSG4s8><lO<3LTBAs=S]LAH,1R!\iOqlBN8:I"8%$PlG_CdN-bVohGSZRcP#r&hFl%THp('o%%X3<;3>9V(!a:`I/?W9aO-6i5_>E/\_&T*RR?AO7!6D%YH8%PQ-'L1AaH30Nk*>&X@>P1Dh*]jJ8pII/OEp4<m&YDN<"TKFaZr!9%\HDS,EclDAeV!WWJBK+K&+7fk%<7&TmP.rQkiUeEO:K2?AgPM:MkX=54;nhm%YuKbK$;O!3IAfaZR__/1:fP,otWCU)2$u=qM7-6%KThLbl_1n4cGg&`GJFJc+r2Tk7@@QajQdqr*plL@eKj%2M%K'-75Cu!!ua=>(qjsN4E=7f!rY9\JXl7XlRk_B0:"63dLYrI=GHcC%&Z$CAJcT5-,U-aDRGrg6[<-BhWT]_UM\RBS-`O3bVLTIZh<;_%5mpFk`BqJ(+9DV)eKBIiL:<p8%V[1FZU4ki7uY(uqpQq/Nj!g4%>"ZDO',%Kp&(+Q4Df8PY\*q[E4*IIY`@85ik_lUr#SJ:N(IKU!,@QIM(,4\#EtJ[4Wt1?3HOi,[kpK[?/LBp`ff44m8#1Sho.'OJ%#DPcX%%'-FF`IK;l(j;0QBD>u7p89o1[cSd8pZ_9<PmlhAWEtuRq7n_2EN?.l7s:1!!l)&b."b(Ohi/E/JuX0cj4Ka#?7B&aEBWU%gMT"S)stDg/Z5!55ZdeKDCS8:!ND=,]KnY&))B!5;.<pU%^.<O2G,R8'.Ijj1SX?3>/HRq:f&DE5Ke>;g'1J6%iET<Y'cHeJO0U1%e:D-V^lH["+AfYHW*85\L^Sk<2j2S-EIS6eD2=;gH8&OS$1:<p$Ge"(rfs:!i^VD^0S<Y]9ql/]!0VRJ447RDRc0lQ?O98[(l0X$%7+LkREUghj,q$CZ6qM.I,+Y6)M&TI)mXPOV&MJRY`Kau;*@X/paCrpN:_m%[!&3''jM8"(iq_#.#ad03!#FP;M&-bE(H>"uJCZIn%@fG!4hEd7U@ZR5A%$\UChFTsm!!+<C3Q[M+kcsiF*$l"b-9?<QngiEMDm]u`J:jF(%[?T\6p:T/=b&SHGrg>k(KtLr=t.==-?l_<%&U+CtDDMDT`YWGdYd*pnfCDh-_.D;G-mTD'jJX@K\4<Dt\fcTu"G(oa#jjG"L-T<BEgBG@>W5#$HT`Ki)CE*'Pr?3fTQLC;3>pR4%3,f`q?3*R/6<l`lH8LjeI)\'@)sBg0NUMMl;c:"'(p(4O;5m&.7UA[l]Oq51KMKUoMVP7p7+FW5)?HOB`#4J3*4#t[j74$p!DHbV%_b(+Kf3<bb?S>IJXCi=Z/D2#I<Y^A$#-T=;^th["^'_gFo-mo=\BnsoQXh?Mf1.:YJaPTD$][.Tlt[;qa:Yc*J=Xft&h+5(J#tEQ%;#k2Hd1ctb%3l]-,m26p?2rGGGkE*e98UJ9RHU<W5WY<8]s.bZBc,5W7>$^.A"G<+CK&4Vf_=>1P6V)*$d[`\r(DGl::YtT>cpHN%<_3JJYE@Q@bp?[_[ptT4=;(JdL?Cq//?1H,*<9r4%t^u3#lBAc&R$f!9p3<<(^$Gn\6to.qJQ/fKn,R*/!;)(ZsY(8h[WY<cO=o[%9E7=ngPG.A35,XJes.]/R=HT?Q%!@eVSda-YqT4qFhtEb$B(4uoTh)bBH/0<B,G%0741sN==f&?iYiDc<B_A)6/jl`%mi-Ok&>mm%W(_%h8OI0[ni>faT(M:Qf9+J!+;-'+,b"q+UUVOQM>B,^`NK:V&;!mGB_.u#7?IUI9:UPB`(@\*ZVJ]^)i]dm;\_qR+Ce"=3<7eb%@(mW^8=j))[?n8,UrN](?TQ!&\ccoo&T\X+!$uo?D[32X)r'd?7p_sU/8Kf5mn)#c'H'G,j..?$Y*'h.K``\0@2*da3,PbJ6jM"1%'E]o;bC&%GK,BQH=UTZIK#)-&5]Djt_.r+neTbu9Y]t/KiQ\Ro?kSD@/)!"g:iaqkBPXu*1RG9H0=XfS_f<ZS.IlmnlWF58\0Usp%//q4ZJ/Bpi'.Z^[q$2Ea%FZuR`RZ+#L++iSXqYtc2-j&l$R,C9M6XOte%lJ0684WrK;cc#3Eks:I8`S88n&j(<d"u4X5V5UE>?e?%q,Y9=#'1tMS7:V/=JOSk;Mb+%^rg)=ito,d,`,R<9T6ag2O>cVk3>2kP>n:?>b%4A(g%_^d\D\+,alq4iJ$(k:g#3IQ$3bO?nbZu%Jjer:KGI]2!RuiL6moEd6YTLlTX6CH\^Dt?>X',WnRY9]h:]$sn36CIK*@07#AIWfs$C2D=s87.4g[CV%\868k!^hHS3;U():#Xt%'!-VQA>Llt,nSF+8_W<cpII/Ijnk4[lmO=^:e/r+!1$Vl;b7&/,Ye6/lo8C%AW$g0E:@ZtPd6:IN<Zh;ihhY4Pttr->ZJ\!E@DSR%Q7:=@E94am`'[5o4_#23l2c$bJs!>KD)k/-)*/n<]?$86@Zik^>*BH7!(k'"<RS7E@O:-.Z+P=I<+A`@#mZUPH`4'B!(*(UVqK3f%MX>GQ%gWtT$5/8^8-#JFXN!^R@Ck>a%BVFB1)*n0A/C2#r/a0Yo12#IBG8uu+PL<)#l(QqOIY`jOUT+F>TAR+TpJKH`#m_b^t^<j%8"r16;(mJl:f;)@L4kCM>QPW!,ZthKN[B+omSS7_7><IYET-Qk$s'U*Ce=.l46TZ@Q;i;dnJnd3P/QIdEtG21Z5RdLo-oiY&Y.A+%$E9M6BdhdECu`HH!/2:@"G#dh.^iK;/`9-*HmE6-"LEZDXFUl&lii)4P_],ek2js'GU#=i6]$X2rS!Q#Tq_nN)lXJXBr!ilE3ib3%MeKC!@uH['39$>PVER-\Jh@n_[=D(r,g.&^:!tjhj__2$iXAiVODZ@MP%0IW(eeJLL,_Hm[q.V5>Jb&00c.4$i[.66SMk/ii@9)f%,oSL)2sf>EP4ORq%ujX'BCf8dC(,Y&Tg1-09VpFor6,:?.)`7/).uT>@>^d@%o5)"<c+Yr8RQ&-+`VeM2Ib`bR(FM[)dmKVE>7UY%>'kf7@LohA'Mk)U@KsW2%LgCs),:%&Wu0]nd=N<D3A#K@.1mYRn-d4.5roSqYR1bApGa+FmT^=Z7H4TI3N9:!:fp@?>X;$NleGO(%b]FAQ[DPq)/d*Nr/>Z@b.[R_H>f>fj,k$K'OVC$A8iWIk)\MH<aQ7<5A.2$]BV1N@01jS85p%dk/h'97MFD(Y.-"oma5VFo;g)VX%D*=&2g"ld"D-Bt8*(Yh`(,Wim33eZf]`j?@R7j$+W=]5mV*;Y!s,`RTaAC/NJnY2;Qn86"gorpAm-.]],#\CtqA2i+NAp^V;H.uC%Lp389$\P5)k[("%!Q29sB3[ho9.ijgAOg"0:k9?b4$PUb\Pamu1e1OJ(ec1]GpQ]fW9'Ce<X0MX)0(D4-:UOFDC"u\_YR_R)*'Ng%EoO,qMInZPEUYTb0,(aR1)h.IPS$et%^^2fVUa,;`c<U:((d.b)ldM/i*<VtEsi[^$Y3Q/3"Wi!o*9;Q16:>R,R\::P2ZoO(b0_[%=ZFO[J?\b"Q<E96kK`qu&1Aj1_$=m<J0&iA/Zp,sVg43D!Dpgn0O.;(H!?L7-lDV#/5OE"9)Zi,[>P%+#$15nEODrC[\>3ti$.9d%V7)m-!6OF/#sg,l^nVB"q+aR#^FkfK<>V7YU?8:($0tRrL"AeiI!H:4;<%?t!m4^]SRq1sE2q#$>S@UO%ol=LlV!D//D3na4E<&N%D;0?PK+mGP.)o%@ZhE-7UUf&TMnS0oYHFQi.iiSK4%OiL7FFoWAO^OUEmZMU;b9"6J-41L3(FEoAXaWlCJ,]2XRA,fYA-Sfa<[Z=%7&PYIYRZp](R/uI?bb:3m3(mMZO\R_GGLEQ3W7Z<1J3VU+bAF3,$,5?K';/*dKG_sJu\B$64psLes&i(0US.#0MF6ej3NE(Ebbp+%>4VkX@-7XmafbsV.8]tcapSm_[A-8r!qL17X(;T[*sKL]U3JWU4ZO'Ej>fObE'lr49CT'A"HjLQrZQNtf>5`5Jn1Ck8L\#f:$o<a%QBq-H%@+Dop,Q'f_C9fOnI((PI8(8&:BFk]^sjed+nG4Mgb/[s&F':?E6oY75&/&u=]186?Z_ChS;Nh%G3=Gcejd5j&ScRIdqd=,%QS9VF6C<sG-AQck<f"e*Wg'c(ZuQp!,NU)Pc7;iA/%;@@:(u@9k8?MbaFXXG/KM7C%A95l54%<;Wi(`r+)8#KaiD[$e/)1edmDQ1%Vd[-De3?t&]s>-@X@Tf'CpY$c#Dh)ZRr0MmYe.GZOUe`O8>fci2.->ZDpE%aN\Z.%Cl[+>U&7`3QYUC),@IP2$@;i$B*t2\;<TiN%eiMPSJKQsQ%C=>2DaaJ/#]O"n$F3XuM.Au&J./5QB-]4%NENQN,"GQ%4[$)_[0hJM7q*`!*_LI9=TSpBX%iuQ!6)=27YCV#94/qk%*7UH$GD6`mK`s3)VET0_.TlR=gjQ`m-O7b<o3MdqU$a4<d84YE-Q)A#n,CZLiOdbNHXXab6#k(7bu"f29PW1e%2>2]5UNd()g#O5%9WqS$"rhOd5d>X`L.m_k/i[153*TF6(e?$r>4SWX;'^kL3jiSZXbWX=D6(GPO:"N_:V?!eDFfWdY[2,dpfnhW[e4`k"=W.T[5Of8%9aHQ>TMMWJ>'Dl=fI+gJL4LNjj3q6]4B.u9P^)]$+U-Sm_@&DsnSL_<[=\#\np''mgo(oXcR]0!U6SIWX,`5.R=%g(Id9s-K!o27%[T;^!mSgoc.ZAr(6k:=u./;kVb=6L8\fq18fgt)_$:>%XjdBb-*Mn@o(7Kk:\qD`GPA/?d2[@<NKQi'6%UeL;i=(#_d0<@oW.=J<%.9U:SH?^[iO@jfOU:#Z)_bkr@"Y*9;j:0*KZ3UQ"XU9ClGf(g8+k6sMi>\dZIml#<6O@Mm`UQm=P4gF7!AB7m[iX4@lG,rXMS;^"%:E9HqB*i25Wk+4M2pYSGa:9$Mi2pQ8;3LSb@SDZM&6pq(V<]+THkMhI(eN/\:&g`+Qr<G%EhKdc$'VSm;pQ0c6'LIGd$09p^_0s)%/Wju,Euet?Xb&34DqYk$`0V"n3)0:S"[@&YTfI5G3'A&#YZe)+L^?3u&DS5!4N,5P+'*%I1'L<%]n52U/J<OG3"j>0PqI>r]IKD=%_4]+farR<gH_YaoLbGY2D7lQ=lt><`,"9RW%;EW1!X\rb'P/C_"^rQ+7'PrhHPFHl^u7EineG7o@<hWh)b"JqL13^\a=gthX9)^K%P'^k-glQk<)1'+>_(KK:V/tj!1g/^q_QnI.UaqX!9m+T\F-IJWS),+)=L]2[CSJa3n>Wgmo.0uoS&k>W]Y=Gm)f;isc+FmH&/c<p%X5Y";h;ac`-#t/jHOB0C0#eFi1TY<o$lKd8N?Y&$MejMQOm.U,f![kOl:rfX=@Zs7Yp#KnDKc*(*]OL-`+_f+#lq)HA53XXE9%M1%(@DF&8oAlZ7NWE$+Tc94n/`(YI9KG"=d$/2Z,j`.ZIQOq']\3n]b<g,*h5c+NjF7lbRF^r3tBDZ_b?!US@7WC&GYT)?%HZ_P$XW0%)@tVsr1lT"P.:Y'D;14hI`%JZR75??i!P/$rAT,J)CjnNHgZJR7IB$kbtb'aD,f,QS5bt7>(+sf#ZTqF\K-%**TT4QUl0&IM]+P%%d*Y)sE/C1%66i[uO`VN'RZ(u0Xt:S'rcYRE3k2I6NlNPqB&Un/f1g4m<e3iKH*e3rD^]E)_=H.\!,5Vn.r-r&KRPV^=UCUK]8[oT%!LEd$[K>#ZUi:n2NN>cf6fNI:M?48R9WaB*Kl/aN(Bl39ZE\g=e9/s>1q&OD%D=V(pJG[V'^^S(>W?-q[YnqqHh..+Ia\sXJ/*O[%I\-o@(dY"ueF4*tVF&>ELp&p2'kP3Q=O\f2BoZ.)`eaa'?rh:J89T80!:*cqJNJIak?=mAHB4eKfnJ7DCP(8dGuPboe^f*#4puli%f%QEB"aI8%?hf7(<7-Wd6Y`+/hia]@\bgVZ8]W55_La-_@X/]QK]"!%k!L.Coo*(%@0O%mX2,FWLie8]Pf2"0KAq-NT#o#1;I0OM%Lh/3_n+91uI!g^$Bjal7<0@rl(M$8oV,Zs'T!OVD0F.YVat)/`(,9qSJ>8ALG_OAs-nKTf\VX]^OmG.[cdA#4UiU8YUha+O`CDTf%==&.1!_,V+a8=7\kTKX#=\X[en:X\5@0c(A9P^.I!YmRP-b%B&*]*:2TRFlY`E@Hn;S5iAbh.U.ak]I(!K?abJ>I@UZ]mR;*HQ'E%fSUr8X<Z?5*O9O!Xot1.D?^X_5Fi?W%A^EuC6]Rc9a9j=jWKqEPIDhl+S/4@7\Z7q_S`eSZl=Fsa^Mb:f*4\Hb`laVkfpb8XJ(=r%IEtS)91dSfEY6&V;9'u5K4h>:iLOp(&lF7K1=6C5+<>fjABF_e@#fC=qBd)'+N_U5Ta6]c9=2%H%'[#K*d`/>fOiM^;^U%YE$.))%VXdP^3EK@aQ>jLKZQc7nY5CmWM%5I)Z(.Bk36=g+r2L;.q-CG%JK"S_,n"0aNJ1X`h?WLkYTeZab:K1Ykro\5"1LbJ#s_"7-'A;*%8@A\4/[IDC"opjSKk/+\N('&;Ea,=PKGPl4bZGHIg:Bb%)=4N66([TN@lbTd2b`@s$>_Rt#"0Ie]V+_^95ds]3XaF];Bin1P,//?%K0m7iGensJC9Vk%3VN0OnE)t;(tQ:3[ps=@)3oO1VOes2CMnG_f!=+E/DdK=0,Vm3Uj],u2-N[e!TsN7if!;Tk'?F-@;,Q.;JJ$T%JiX#f8&u>qhI((Oe?sPGG$Ql85\pYIP#m(9(B+K4("Vm0LWHCV_`aT$etT;;`<ZlU=>m*Sk%4]]ENe%$gHMm6,ubj+'.hA4V:[X"%P"F>?*u[oN$7`q=cC71SgQnM";&C*kfgL*'2'dHZ/PDDt*q]B+ha,ig,om:"X`A*@:.g*&+AW^3d'eXnns,QrQgJsY6Fi4CSS5o:%2Xt6EA85VcM)(J5+E\?)pYCVG8*@LtoLas`c+Y<(e#2->BJ3'\A$f$pM]PQJgmWX&FSLiI%4R)pXhd+1Em/fY8?#h("4!Ec+N_7n%Hk4jSZu;tj^p\ZMa#W$EeGe1cE,b(t=&LVPiIi[sm3[?M-gd(D;MA$Pfe.k[9S<n-+Q\j>QFdFNf%G-WUdHKd78Sn;gI729"G+6S%qbB`JUd6Ug8FQN.Yj1i="eHf\T)3/jKqEZ*P)JD&efsB2K\i^[V*jWs&>=f,5Q/I1(@&#PM(Ibsi`-)44e.TJ5XE_d<:6dk7FM5j%<RZ]7+g[o)5hj?U89Gn%P!Xe:XuY1mhXI&Fp9JDn#tP%oILkSa)[q`0+=4Ds&C&4-fKnXL;ZPr`EX=S0,&K\6@=2GpPg`G$-6O$M%Ba(BB^&`W$p.9MEe%0_i:8>2C'T?g_J1<;S_b45+8.Ee*leN:5(ufk?Xr=s1(5(`A7&gfK?u*'L>m^`_1:@jb\P,mmoPEBK&]0[G%TLVEBCCDcR):p[[lWNNk=Pp5n0X/X!@<.I;mpgcbIh(jWjD'M_,F9hE-Fpp,$=<1sJfdD;&>BE=A:J1fV7@#cZ)S.!'Z$K$)mBu8%WU>dd</;J"5sm=Qiur:oV&HK!L%@Y8bW82OJECq@Rpp?p_F@OW^fW&2'.Oo^ZNNs?&jttY:M2#Q4,A#)&8:l"EGXADm_Vl%%fe%g%&f<VjkQ]U^-M84dlie/6e8fP,#V'D\Q137)Ba,dE0F%`Rr1n)E:jIA.02Ycs1MkgM'*Q3+R=Tl)1`6e;c'3UDEa+En$ft/["<7f#%3H2aj[bE<.erbu?`bV7!;ZWE8FF^S^p#@&-Os2$F`W8ob_37QaK5:1#nqKP33cN;a._R#mTd&9-`Ihe@%t+dd$k@i_7N9J.![&@U%Z.=Ukf*W@l(`Ai#U_a?ZO9YhkH`jA+YijG\J3F/dBohNj*M?YYgIB>Y-Igm79;RJS]EX\W5F6`)=.h`\Qhh14b6&+n7aF7R"\e&b%U5D',5i6S%'UOjK"AiA0`"%)K!19_#1ea9O;INP9GWc%sR".1g%RJchr&W@Bm5EF0(]kJM<6i\,ENG6T3XZE=ncm>:=R:emm'BfE%#QD-8XWT/0"!-T3-sZ3@2NK@,-&<r0=SaGN.Rt7K)-56&X10;(o9l"7A]"RCau;;>#jF1Tm"AZ/$$4rXR_-]ZBGsd7lpP"I;LS$?%Vj?)G.(Sg,J^1YJ!Qri]5t)B,ejI-gZK+gmZF>6O\Bd!CnWBI>@%?H6:"erBYGHqD[aQIJ1.\c>jF)iN*oOZ>E+nCrH^?LU(Za@M%Xi^;36fq2ZXVOR%'4jLh>/NrOec[rSDLE(TgIh,]Kj@VWU]tjsoi1Q:o;c@('f:XqX2:;JK87ku.Ps_fT+nAk;_+7Wj$#O("06:7%fG@$271t7l.A*=XGlSLB"tL@"LP-DT`L+kPGlV&4f5uAa$dB-c/Vj>(.mB2F_jZ=S+(UCrpo%@(P\T6)9kl57AlRh&'.8;HIQ'79%q9J)qV5-](LD!WeBb#lk&g-oH08-(X1bmZX*Xq&Po`Us+`)%?soneiu#?.m[aC1/1VO($A=^fN87j':Y#c(O4W$T,9duXg=m2ue(%j`qi)c75X$L*Al\YlmT<E)\\dNV*2\X\2>SW\tS?66\=aP[t/TCW@$S=Hf*@0:K!T(t'$LbM(89;8239B)5g\5T\m84dZ^tbl[:c%$'QDZ-FV8?[9!d&d++l7$1]#aW<G&_W3-F,jg7lqSfg_DUEQI9G1T.&q?!"P!A-^2?nTBSVl[moj/L,+P6g4TihCWA!Y(3o8^r0-%TR7I=<Dpul8l%7!Ylgd3ZsF469Bk[Ih/A;6'iD\2!oFkWe-a0p&dlEak."cIZkd=E*c!BS'6nZO^qC"dDCTuu-*R^mCm"[2i]]%E%:a2YHb^lgkV/U*P(bp8;#,tuk9H6AV:62b*H6oRGS3dW>+3-\k+re]6`A,[(NS;_m:`N@kAZJ<7'5IYS7gss?:5RPC73DsZNkCM.%!L?Z\l][>HG*#jAj+e6ZLk5+FLDJ]e.U@Y=:\]V%J88C(Kh*<fpmO'W9`YBDa6%M<)\cfdD;/_/(p&M.cM-l:QD*VqRhdZu-B%Z7%%SVX:7Wo2T.a)=5R!L6pREdh,D,4`c'%W)<D(Ln`6)8F_!0Qm$J<n@]+?2.jX?c3]8C?N>+E19H!5i(Rbk,`InjV:;V/k#fD!:ra%Hd@7FpuGZA%O+%C9Zpmj#uG"\hh%\9<EW%aM+Y]?0IBgY3P6>_8ZkoAWMU]3+K..`#E,t(RGuNt2dnb[2smJ>aVbp,m5B9a!Z>Bm%Fp%mg.*VoC8&>0i]D2)F]8S22e!q=j)]<9XX'YA?U'qIaZH9QB+BZWd:>1q(01j5#!h"41>K/=)ARV&G/D$<>b=+7lQ3/O#Se!D-%!(B^RV>h:S5eK`$(j.(%"9JX/Oe<(_nGt\T<q+pY#Q7Aa%e!,=UJ_(L4pqW6&%ZK.nU#QrWKj^1>f/)SjO](8nIecQA-(]+%V6G:%P.-?D=iL&7]SunJh*!DH/L6d=P(KRb;@"0BUWf"0\S0<[[$8EB#^1'fY45+WSe!+`Y+T*rm4:O?!/1b&M*VQh6GQiN1eD?a!d!it%UL"^0kt2;II^N*[XeWBX?7er2J=D[&^hIPf?1`Fi:)503j]rQnC@2F\76@.LEX6.ZP1rg[*O'&!(;$mc=ZE_^5j260#\qu;XT[W,%Xe1H&lN4luF-a9RnOX$UG>YSWSH/j4/%aG!JVJ7&gg[VV@hu`cBdjEE6EMg'`'[)r??>bMP:_+pdoY`3j)>8NI9)sr73fsDkm9mc%?;q^/Pb',Wb+OsgBkll_E=ioeZhAo5!%VD87Y-<iC(/Cq*OK37%7psPGfle)cp.BU@?/_*GOebo716;i?1E4iHQE&I<;Hg(aK3%]%2g%J2)0@6<:'Lq`#)aVnV-Krq.=ugg77npMcmt4>5lb*!J<?%1^J[;JqmN>MDMSm7T2rsMXPcBBhf-+K-jkAJf&SStp^n"3re/!F%KAI1unF0)R_MUe!">Gb@RIep*/njl8&N(sMWG)T,kUn55*S?OOX\:8:,C'XG;jeVLTR=k$3[p5oGG:dW/ltk1Hj-9Q#m[;Li?C6@%"s^lDB11`>U/#`BcP[+O7GbsL>#Lt9(DTVISH,RWHn0t[]laBT5nsN7fpsb"#V.PK1h,i@R[-g8GCZC7n,%c&*Bk!S:]dP9Jdd[V%n.gin+rS;P)_VGMDg!P4(Zk4^Hsc6UG:kQ-VH/jU&Vq<(#\54_JXJU(ncAuHq$+<k.=sfsa82qB!6HZ]^oZ=YhE[lLDcQcP)mGTR%+GbVmUfNK^*'?a_@bM?%!Q)9ed(Rq5_du+bY]N-%Xp>N]8-;or6Qk]"qjT8[hAb.TaN?9k-cKi^4dQ<UE6KkG=tOh;,RtiS0l5_Q%'PJ_-KVE>qXN*q85`khjB_GkA6g-"6@`(R;-u#gJ.EH9/#\8dVJZ?!iC"lJ#BO"S:f^MM\YD<56n5>7n$RMf+a@duq!h"aATG;6.%CH'8O&H0<HZ^U9XZk$X#kU!dG"k2G$Bt$chN^snWA]oH5=k@li"n8rD&EO:/=JD60.KcEb'I11T,M&6VgS:1`4$_t4r[<-5):m5O%?se+,f'3[Lkl=qIKsiaWQ6@k2)pn\>b+i]&Okth+"i"jWbW8giVi(T>fRh.>#nX?&D(,2d\<s?<7%S4*NkMn,e)@Ek4gX]o2!Rt-%2#E#ZYY"2TE.1%^'i2XrM5i+7XGITn#\-QIQ;Vj9&LsR0?)YJ>pJ1#V-!H\O:@IjF+ti*$*X#(`!mEpd'51AsR&uMJ8ECt5Me*YZ%\Onj@TQ.%ZC>KYVSLEhrZp^ra->9I"#mnY&1>(!]*FrlRS##mMMG3%Y6k&M#FEhk;f8LW:Te:qgZpr1_JQ%Bin,OLlD`uka,cj%+%@)['KNU0h\_l85*kbMs[gh6tX?I:m<*OK34)Ifm9(^:`GTc'Z]!QqQjp4rLqpsZ1Kma]g(PZR?9n8_Fgp@GCuDE?[!0'Wp#\b:B(%$B8Pn?@Xrtp\d7B%W;gF)<;us_H1=/U-t1+c35UWU!%a&=K.2ZFH4[k&[7YrUnK;q_.oX-U0>oZp'QbP1BZl,MQ624OBqru<5/JG%bPDX3/[p,^)p'A$<KTGd8A5sM5[/j96ag5P,bqdq@+gM@frbNEj8@aB=EgDAYR/RZaP/=jE"Ah`>LU.1;IbDOI;;.WbbRDTXQ@#'%9I+)]p6&d;^>%",:!lMN3e!n=Fd=5)_sarU0T-@$j@rb[Zi/Rd8gSRe\V%u^#rkng*MD0m@LDX'_?uW`.=+DZ$7p![o2)-eF!7dt%chC*Ffp@+pnKP0DVMM$Af1Q`;[C(U)G"V4A_K:$@>.p:QXFnqFJbCLV3mUX9Jt6Rh`pb54^hhY[%`&KQc)_Ad=VT)q&-^^2m3"qm%Zj:@N/Q`E!%Hj-%ckP^eP;k$WFX%ZEfI#;.G#]@ba9Z0^Y#):`<:M0t?qDoF_VH($[A$-c2ml_7^/mAZJA!G_<p&+lATDu"VM"cO%i4"\.`"@!j+$',hBd<P3.g^6nOR=HlBS,,)7T#Sqs+0TXT>ZQ1O-W%qI9(3kOlta:SA]n]fU2sVq9eX5>6eFY`TN01[S<@27T#h@%_+j+n>=VDRVu\BX78&fPC<(sV(,(<,enJM2)a!!G<m^3&G(1f??AgoZ=992Trg!-WpY;d_Hha3CDp*_71b]Jl+0)+FPVt]-*f/jN%S=/Y3Lk7n?0nFt%Jb\J1^la;EC/H^1q-3-r!1<)aPU%n7+u"=g-!\24,;R,>Z);79d%o56m'K;d,Us1]'4<2.C7gZba_'?jG'J@^%VE@MV;F3\/Q5Dn;gecRZ5R(r,7jAGCXgjY\*FA]W"cI\gfJ9S]*o)A3nBUO^UsNq<8)J`>XS$;dM1Z?Cnc/4X&jRI7Y/c8(%[>aT%/m\n"Q/'nD]bDhB*RW]loBS6Peo+!g,p>I\h_Rf><oB4l_e#?u*h4L=f_/q;a+[r@nOY(,HB%8X=J(gSj$<.cTdP2\P:t`e*P2g6%NlasgD<s\tU?t\uGPG/cY^-QQe)=SHPs%n@"6tTl2oY=4n%E,*Y=<a[^F]e*_Pg_.Mj+QaR43YHQ5_?uMM`Qc"\C2E+cq<`&gdHk%#?2AL,Um+nK6bS;@#jNf%3#K'H;PW\lWI+)).>?=4cLb&"tXo6!V@NU"=M=SkaIe#klM:F;XZB-+TS1AXX@=THCH#W*@P8]Mt>jR%9S`B):)p[?7Cf*!HZB+cec<][AT]J2'F)#-qEo3+Z:4lR6O@dbZ:=bjYi8)(Bfa+'(Dq2YU<OUt'I"J>V;sN9fr0E7O>&!aasj\X%95J:h:m[\(#=tLDJ5O,Y:IB#$3CT7A-*Y9%M0YhQ5Lbu.3CU8$)@S?_n#=/J6MXBMEk`NtRaPkg&#R6Kdg;I@]/)pXMb"LaC3*:n%LE'TRc*#G^V/%sNL8^%=?:RRY^d_#L9i7Q^h73W(;QIB$>`GT.j:$-beOq"77P/m0[U\sGffI\\\ZcU4Su$;GNB"^!+jt,r-=J6D%TL-d]a\Z-C2Mmm2SZo@?e>cSGI'/dfrSSGbLNfV*-"CQ."jtlWiX87OQ)M5_@d\'BfGs$P2%mj[L*f5"9p0`eIcCcd_'n:)U-Qg[%BLAkI@'8WX]kS*%gT>E!)D.n]M.hSt%/-P?g5+.#Yn9Q.l=?2$IrHXKB1fOs,>363bb;jqPrgn0W,:;1KGMXIA.@nAFEhR:S0d2E%`\[e(e3qI[.QT_]b,0TG9Ap"TWi_W(8F!P2FsfuaD/e^WVL22R-2\dkVDISSC1%Fa-qh[Bib$>MTgA1\M&d5hbHQU/3"Q1XHqD6D%US+Hb@1I\?K,.MR/aA:P%_rDiYuW!4?L<^5+l7fX9(%3Mh>?b`.Fi.JN.rJ.NSK2'B`.SIrcm>Z9a9h-+Smp&M[#`u98N/aA?<F]%>.hl9pblgh^a[E(XeCof'e%(WTTras+2Fr':3P#cRcm4f#j,4GqjRVaF*E[iWYC,7SD4akMV,/PV6/PUO$&-?:*P/,!ZkW\Opp]R%6qR^.1a<Mlb9!TqR>p7YB..Gdbsg>X>gR#N+?!#S@6G^(0aHZ9Y&]7J.:">c:AoKORS4`'45^UZiRlAGSO2BMi;tE4gOUG<a(-JM%pRMhUFtQ@,S/k+"#Om:cbnAZ##LG#QiG93bfnX%"O^hT*A/QH2hhk[i**^mEHeicSa0gF(-MG/3J/cs+2"?BE5m1fA$XosnJK0ih%*2"DbJq,g,ThG8r^^^jNn/OtCfM;UZ2j?*@@#P.2WK&PZ!)+#RN&HoI6YR9J_]-a4&X8t).CHa;N?<bnRl1eU6hXmh]%WiKQ</59%9oo80=k,A)riqK#L1#MHB*[^n*6j]:@e'V6VCen^V#qKsNoujPj>iKE0*u55R"ce1nRdZ1%*f\j,GIZT6,^AAm'ai?n1thK82%j0%@0l^l(_fPIJ2<k'Ht`2M.C:_sR(^"9Ja8rM\lcV+Ut3[tK)eOc%H?K.*A<k(0/L4T-d4Ba'_q90l\M(GX^D1@IGiCi4:__SnX4;:%/;u482a&XFQW[0+d1muMknrd%7WnkC+D5.!p4>6X8C4m.aIc"k1=FP?Jh`En^ZT:n3#4#E4eG/^iu0/5;O&G@fEuT'_*OZB__n^B%0Mq`]YFg6qS[Ui1q4]6mM`ZQpWQddEpJL!QF\k1.r!"imJsW%U)A=7H2M(q^RB/+JJY*/efTbXGRJc=2-CX[+>s#m_'e*iOUFl\@%nH&(4f%Ssa[.Um-=Xm-"+67e'G"XFFHbr4/Z[o;Ub5>mu[&*Q+dK7oKPp\#RZEgC6TT).))75>:4M]-O5^XOM"CQ[`V,s)hhJOlq%+4*9LKqt6g<YD*hH;I*d-J+Y%FUR;_ao"Sc3$2BDW!R).&AJ47TS-rdS-9Y2/R5!=!]6WNpm0qLOqh!qBtjoEPa!A,TnRgC,"hbC%;-Snk?80J6P?7M[S#Dq>de4%@k+aTCQ<4;T\UKmaG=J/R61>:OW5h0XmTSNl#*(^">)Nfd([+/Z6M@s(J#Bl"#Bai-^!bPa_NS%e%Wp=.2"E*uL3#o*[>*)1*c#d9*qoNOW`uSh0a1cN+oI`I^@FJWiErd8[1%!m9*r"`c+)M=F]LBf=4A0#LSArQS7!HEeC]cT$l!kYR%U=;;5=aou]C!5R^2GBr4_Z0Nc*Gm'4X)HW<#d*6(2-hma<4&=,%NN-,b`?a0R6`@LR5Ogf.+GtQnf"^=FbV,Dn7>Q4"A#>E5VFcK%ZsY;,%LF`Mgb1`qi'@N1l7c=-0?:Fb>P."o#%G>*;cW(2gW8U!Ei)l<9@=!W&/1k@U;VRK3MXC9N4.r%K^)6LU\%B@<A`$V1#Ck>%(]YgW*+<C'<?DV[NUS/2*?`:[A1ElOaJ'JuI@Cc$"Zm'3+f]Hffll3JTN*rB">p%t&VNjJ$ho\Z<O>D,Wg!0W9p;E@+eo>.,'2Fb%fB@"@[WO;,k2jS@[Rr6d"@2'TTnY<kcX72IH:JuVVR<Eu'V^8ITZDfpQ+b8fO"\^TOD+q*H1t/WKPA8!KqI6R24j*%;aFH52Vu6#%P<t-F7@XfH2Q/a4.N[8R.GpO>+VfkmK$Xf?8jbn>oR.PBU[U:m-Fu7<L',4V.=iA/L`r0,b&l%3<2ate%MI*LHS*)t;%2)1N9^0P%0Tr8#!3mU$Qkh77&KqW<$3Z,1/gf-[A!doXE6;q*$hE;K[e4,(U:s<s#]fiGYY+AQ9+-%#()a$JBCG>0%`e1VMR6;B@O=XW-e!a.%qLVAglL[?,L7Bse^7d("]u6J_?iomtUKsOuWI>((306Yu]Ed"q:BF,g)\eO7irX$S9;5t[\?t0\%qc2MN1-(VaFP->N8?ceQ=/3Z%70t2mWf(')[3_X?'YB"d:@]V?YM;Qf,&spO_R4ukrlDs@CNWM$@=*];Ra-YuiU6Z0$=q=LWHeie9NOA29)b>Ah>q5G_Zujtf@tE8%W$?E"]Mct!J6+@-l%-(%i7J9Q]BH:.!S<.p+rVp\7GH]4XNM2UFPndFJ-o?hi8JZV*AC94_$10<JO0EM@$\T=Y*@cE'jYH"4`KE$%_8lmn.B0i]j)?-\P7'P<;dp'jX/#O#+DW)*S0K9t"QJ'HXGgO%n.r[h!<X::BXj)^JjtD6R-TE\JSsE1WDZ6?29<;Hn*i_niX'e%%Tn:Af,UD:md'3[Z0I<sL^XE@2Db+AO#Kpen2S0XgJtn!I,EN;llY=&I%`0t<qt:U+@!QJ7d@6a.1gH6A]/NQgKN'K'T(UE)DgV5>%e2a)2pS-]fSr.=?Yp:sSnaTLOC@4U;WV'kYItm[[45X!4>9*W^S]Ao[F+0&NhX[E(mBSkLL!KhK<R6g;kaY*6'MQ3[D25$1Zb-BP%q6;,ge=/R3pc'+U&MK,C^BR[Fbi2RP[Eo_F=,X^J$aKc!'m*>#!`miJ.=J-t*p""a_NmJi#V6&`#)YmK\"NH,`1G#n01TE09l\9q%;BsD^%B.kI@aG?O7No*AP37*RM]Pd=QE*H[O/0`WRUWOnkneJL^9!Rg"8G;S5B\uqiGda+7Q%j^5_\KT?rd,kOl#%9SFY@T7B^&g%NY:TChXKbDa+Ab/$qMX@%.4,i]>(i)1F1H/X'MZ$o>AjNhVX#mk2P-I(iWN0Usn.p3MBME<KFJt6'6tuLn`o+C@P#T:q'--O:^1l%gL10@S!`i\LS:bUKLYoW1tpjVT6o(Kj6c"L@Hi&U!EVMQOBqc8Y.\&]r1/^39+fr163A"H+D[!:c8Yf):>V;UQ)`r"@LK#W'c.[^%HH<dkTb]F$h66Z_fO<ZZX%r+NjO<_Z*maYeU@oC"YUua.TaFa(ZFuF9q[iaKG:3XpXK(.)r=@aM:n]17[#:AHTh]&a`4\58ep/N`%'_ENqFU%+i4:2k5hYq?cLa/h+iYB2.8nH`\I,4t7,)dZHfR_E0&!7nahOVI`YR^<s8BLlo;M$n)Z9qAF&!GC*=?\t,mI-s7<M4"S%H$kt<jqN4""8<!po&+I[6gYQ*\$:n.3UCf"/j;aRKrWlaW1OCk]E`>P!UhW4M-D+@8]!06)$&tf5EAp`c]\$4P':3I#TK76C1&ib%JBrRM?+k^%&*\Ifa*053e3h83h-`WgM-(l`Ibo+#cDLo_qE;flh!u'^:_SQZB9#pBkU/a+9Qkh^>Dtm9qkCb$%8NUefXbaK4HgcX%H%IH0%s&Km"='II,>Xg")j1@S%0q0eFq6-/NIj+ZI/s\@`ck8TR<#5dcRpb>OWU9NeJiqM3Qhih\58&0aAraANaT3V2`g[&6H*q)%9?7cI'0.o(S^l%7VodR3FAgL'%dt'Q@_`Gf!NPA%nnMp0mbebA%D:B1B;?/1]81N-7!T?VMbed*X,BbQ@OSOBdA\i_I<8AP%sfou%d><-W''6QWQi3*5\%UJCBJJ6oC3-GH[A_'"J>=NCTGHEpnobhWpdSg#IFQ,dVd*`G74l1!&lRLRD<)[h*Rk.?cnHY0/HeF\XYN<s%4?`#LQJ3T"T6,+IO5-Pa\K0c!A*-OnWh8sF^*9q2oG+(UUTXsj*W6I3gS<ZBB7'8tphZ"?&"i7:n)1N8qMNVed8u"p&&0<qHh\>L%h8@!gRBuW&R1[pJHcbOP^#\fMlm8Q3I]B'tUTfd2[4cOeLfQjE]9!&%lg>I='c.*'"D^Ws;FktKO$^.bM:eR7DV:cr:)`HH!fXi`%+:-c#%urR7dg&q=g80iY"V(A$+`2SuTclY4./B;'OajYXk;8GgP9ZRV@&"JPA+4aS$oUelA'TFl)ut1D=UmRq#.?D_d&""Q1/+Y)%pPi:VaX2o\(js<[nL/(b6X+!^*A2SK+`_`7<Zi!Y%umA(GB,5A6PD>k7utl,a7`2?qOJ6jjN"8[1V!F2(Pi7Bi@WL;j8i-g?d2"]%`/3PCa2\f57)!;oZcbpHQ_\pmGXUJ-`E/OZi'ZQfA4[Pl8''nN:TRE3jCQAj03"T9QE#U)YEZeR-qHpUKng_FDE#QNcqotE%X.sq%;JOsPmXkUW1]+5)Z!8KKiAZ.JQuJu/0[#?ob8Y`A"Ahn@W"Dm]?;=jH+.`e\C<CoqUkSESkK)\/ILQrt94>FmQL`9u^eA_XV(48@%"EDH9^.4-D_",>9Vt\ftL\'bR^04:_Db$F!d"hBACe<cadHSVn4^YoCIJDa:rTWt:lC6=I!_kltI9[`j[f.F7LkpZRg_EsK0\57X%)#2@i&Ni*@O@DtJ]Z&/X#LUE\c>nG*7]a7oAfH2Hdho6s&hkVe]UFp%k-uiU]b?W%FnGa\NmZl'Ggr.'cmo"VjPp-rU&28=P^k&X%p(WXkO8nb.?;9DkFG<7#$;R=.CcR>1#u>$HFq9)KhTt9ITLpsZkL&4P)pXEd0d+[(WKO\*=#^,liUA69h8:oX/58_aVU7tE&L^\/%0WTuSX],f)PXP8;B),cOp&*:@h&<K]8LTR+O_lAp$,Pdd?qWojg(<NMLjloT\B3fXE[p4%hCW;g3I<.6;`XEe*]*[!cc&Q9<38TZ%K,-Jf>;5#gmZ$TjHOFK=>"PokAlq4(f*m[c"=A&_&ipIA+]OGB3cp*^SA[>?VVB\l,=pWSXk&'kN6`?2p8<bDWVE$T[+k:kJ)tP%%/sa"!Ek;fJFUh^,b@LJhFBn#:!;ui^eac9XoPLGtHhRf)'\iT*ak,,b>(3ceWW3"nq%'grp>j-gQ`K;U&b\BaC9jABS?5;Bf9`i:%8&p*<U0jKd(5r"3p#Pu"I*+%5Y#^J0;&ik[8"VF]doWFL9g9QPX'Ki%=0ebH4FT(h%(5O_[EoW"JG,aB5HkCh`\*#"#AF.^c1:GV%^1eaafj!j_'R-S/n%[HqB:J4Vok`;qL0a/RIB][-+7&9oaa--T^A_Kbq\QRr:ZQKd-hHH)hEG.N50#9fZh<Ze_[@SOBi$hZj(0OY%=4.5`OQjH]dlPtig\g6Z@WM'L<fo-uT.f@a/p;7(P:&"qo>U6+T?OQuj^r[/_l'iU.Ydb(Be/PED>J3oI6CeN]CR$;W,7$u=t;XP%Dg_Y%qIh_:UY\),n+in(T]CEpgEQtge18G$;3e9B5M+g896]-qWW'8eXc,BZU!oqImo<Mhs1s6#e?HBri;+\sB:<GnRo-&fbqCel%b@(\.3$=.fIt#KsG?>T?>_e:qUA+.ao*^NsGD7,L=EOMFi.#rQme]*L6O][6MjP8Tn9!0DnkM^G5FCWuBS>PYUuL6,`7KQc+I=%7%L(EZ65ePAgK:RRkA9g5Nb`q8*:^?.4R?GDE3DfA<TCqj-=Z*lq+]Ed7;Zf3I1pNoBZP*&Lb2VYW3`@4e?($)5M3Ub]q[4TgpX1"T%2V4EYU[[)qmX:[m6T8);HN.Fo=A-"_5J*JY]rVmU#'U*KE&:#/g&'E[,:e;FH8^$3A(Wei]1Y_nSM03<7p@tAg,RG>E;s"jEA>Zm%%&(-<g>)ej-,`2BML:c4^/$fEQT+5^:_9LXobQNN<5[CC1C\gPK7s:]EG5^*!%X#%)n[e>9]tT1r)GCpr:;^&A8o[69S4<J0^I4Q%d4e:&iJ(-OpP4*C*!1.\Yl08Q_Mn0^5N@c9Z9N&AFsekH8>&tZ0D)//M2'mQoL.;&W9`frcnkk!Th\FH3juQcN7Nkb3ha;.+k0/+%J-I2r/d@<o71$E.hMckm@Z'q*:A,aAbmD58nFnRsA^p2B-Z)Y)o*nVC^AJt(:k_Am*,`ORhjJBsqG"Y'0=Gd8Zd$VVn!C'sQh\J^%PEQOWoPjM5EjOEtq4g"Bajk5"n]C%7r9AS_P:!Ch%'#RhgqVKfmqT=ap&=LPjRgQi:2]^YPL4(b[f27"X=J%`GO$0>9GXsl>b&`r%k9l"&pCI;rA?sn4elNuP0'd9;\=8[fkfK$&B.Y3srC\sCWr@9Es8;k'Ra/+]ri`A[5n1il]#TMSGlN&[b\B07@QgbCJ.PRBm"=8l%-P(<1Z@I/P[e'<,gYJnn`*n:j66E(u?X:=XHG3QJ2uatPCI^J%".f$g+0MJ"=0q#^iFG"N41"jD-K`btPOn#\^H2C@FZCE=j_mX2%rq1$2XM;JNcd@(<r+8%FO9PLQrd$a'^XL/KkeGS]qJ*aSKR3dTf[8rYMAc@Er8758oo+@siNJQ:n)$giS)8Ato%g0CotHQs!8ec0%\#]h'/b^K(q!nB/lmu5]fc:X1=A</K0(4B0C&.;VG$WGWbKDqDF,./'ijb@m^W&^t^:nLNpU'l`',0LV-LS8?q4oe!]+FtD]D=bV%TRZOpc:8nDrf&?FQ8cM1Cfa\f>>Fn8dGZIB$-5_XkLCf#=*"5XcUFDJhpGF&s):Rh07Ng\^5`04a'c6@:]I?a@V6fFeb[\X2m^Wc%n64`+AU!&2X]_h^@I0[c_(D_`l^__^DnR&*n0+[`(A$SaEr5,S$fZnjgI58$Bh0u9[]3E8q9)i`@HZA8DbPJPdg)r(OTdmTD6$'D%5'sP_]Ui3DnLdJhs5re.p.)Q8Z+=(6B+J$%bKIZroj9AO^\&;DB%tF=Q%jbU4Nc!?a$3n9q;EsUeS0sas66T;jo"7UoZ_3Y>26p8%q/`I'qi?[RWHFuY2`K@HU>9^"bLq46A3J\k[\HmXP1+IO;3>J;c%"MB(A$qJdJ<.RCpA&%_#?*8Tj:D0oBXeG"bPlD8*ejO3hO[e%031$d`I'ZbD78c\CH3$P/WI6t&B'k`kaZuOf9=I&[_DKJ2VkOeUZ[i[A3$2$n,+*NZ$nJJXkq:Qf3gNUR#N!*#)q[Zj-/kH<$b&a%L3]>`&N0r/r+`Zc2>RM)1]MBP:[DoJdI(?pX0,eG4F4PEh-<n-@(jgU9q&/mcW?>'AOZEh0%3jcZZ3c<]kKUCfj<:5N_]d-S;5"q%S%@%;!D;%J-d0d-Un3A+gH+$`j_-IMn(A_nHqEJA4"[TUrmms;DJu(tilq$Qie`a!Gb7Ku?-]pCkArTf\naWVHUmFMZ@$pRGrZg,%=^B5%m9XU("eP&%jlHsu>YR,[GNQ9C?>XmiePjR(RUeW8YNKCb&OYh5f?-8E58r@mfrgPLp.n'o>u.Wh@G&f-DAJdf>&t7-_oq@Q%C)=4q^JD9Q9BWA?A-!*OK>/M>!4?YaDmk,eYhQJ\l_gD]_5Qq*MU(I$I6"ppT?ufold`H<le[ekX7jbuk"B5mX3H#B*;W\_CI],G%7i6$.ZEW^6nB!KKPM^KXA=&uu;qe;$mtd/jk]3uc+fEoS^`MsJ\"h(9OskPKPkQ"/IItL)E]FBqKo_%"m<j#BHfhX^(O*h!2*QtP%rO.cTo3ZUCM(Ys0fb%cff1jM.?[*[3o[W=g^4l?.Xt7EJBe(!keq:At@1OshK].%-D75Am-$=p[4'RUg%SWh,Y:o2WGhY%[`e!US%_cFo>de*D,WX:#0ATq(6:?q]H[Q_gsV@>%A1:k(,YHQR<q,QOTj$f66V<-@cdWiBeHP;TIO#LCS)@;YJbdTDV0jhD%^ZcHdrj[:E%@Pccqf'Lp^ZTXiXY^0Vq\s^<<:3qN0?pi_sk:GcQg2Q^o^,SGgg2=3A52T[@Y)bN<2X>c'B<UuMYoZ\BbK>%<E46jU.^W1Sr-U5e%^-9tgI5tV"/A_#q6p\^,Pl\R%XoH"_A+$eBX.\5!^a?psFbYgrp%[&XgV#U0\*KA^YK'Z2Y8?!Ao7QGo!4A;@UhSYXm<ktH4`9X$%HVNf,#(G;]59-3WFZg6+jbqY@bs35H6N/Rk6;%Bjiq[,u3J'k>=:mC%XCnHK(@KOOftnc`G.>C0>'HB$4P1WYr1!\en'G0LI>>8%%=l5qG%P-;gP8DF0pi:AfI^*&t4/UW!0aLPIlu.o&nRc$O*U$ePg9bqGm^;uYom"0n9(3`@CAIEQ9W,=/T$s^$6[)YeNqCc;4g$Hi%S,QPJ6Q!jUU2+X)LI[qBNC=GM?G/MAl.Ulmm45aC#8(9\(uc0`LP7X6Beq\!_or-6[?`7,m>h@O\gG,n4K5bmG3,2\QY;Ed*P+RM%]p$$g/nfp<lEMeS't-4SEku;i6I9RSIf8j2S"R4K>JN'#>A^C[1m>XkD0P&ATgmXll.[H4LM`p3bqVoC2VY5<MoF^!)rEojcRj!q%Fl%9^XG-<V9prLiDbC;hCi5ifWn]:0>4h/c6S4nU6)6`fg6T(3onn*;Cu)lSX5(*FhI^2HRndM:_]'-!o[W#C[[q>r0V<,i4Y>\c%6aBJKGs+7B+hh'4VP=T$f@(tM!&iIL=ZSIN]Xa6_\b"YIP=mJ%AiW#o!3jj]\Qg0:>hJ="Q<G/J99gTJG#PAb2L9K8\>m3*D:JbR%J,I8EpMDse!Wm`;aQ@Yj"OPue9=9>,km@h:pSHiI[?A2'eS<EL0rTjdLKZjs]4A=g;&a:PiudW?S*Y6;MqWTHjb!hCYD/B6-m+mp%?I,gUrinS+.mpXcjWj*9Ck[_Q7pCS:5M=>:G43W)o1)fZmd+62"Lk^[f9<%MY1r>Mqtsm:I(e0K.kSHCj2kb7Y;glRhJHaM1=BGH%g[T[?'53D#UZ#q^]C]o15CKGih47_NCb/r9!VD-p0s/#FO7*=MVCp.T?/BS,p.h_a+(mt=U:[^kbPIN!DHksQ"1PaTG9JhbN6ug<%K9`*@hZbU9%r+&Z)80.urc/+4M8L^QMsr2=??a]^OZb)AoU?qacFSqdREtD/1:mWRAY,:FD.Kt/a;qaLc\*16gY-#[Q5at",Voob%%*BSR;JsV55^ab^DC+K&5rjh"*S,7QcamsXI'R'QX&Lp%2Hq_559@=l]DHf1^9W5.c-AjmD^W_4a(]E'A\'JjbjT5oma?$CK%i;(%\+P/NIU[M8qR117ZbAM`^Y'q5gQDFe/#E'V1J]jr`:<<Ig?mZ+j)bYj2#WW=2#1,dJ!Rc5LdU(WSLjN>FL60dOLT]Wn$ZZ<cB$i_%k3f^LI90:?G;kQBXW4[V=*N^`mOjE>GNTk+SbCIuZrR6T5XtWT=jB*Mf/q*RAk,T:Rp40pmGhLUo1.!U,KMS(aQ0fkqAq4(2e_kj%X[bUlkr5u3TL(eeq"aXudfEeGjn9"[MX]SgeRC/4DqM,uMh)AP=tNh)=6nDem,@6M-&%-CH85^W"a?$8).%$,"_Xmt,s#-L<NL-%%0BR:2%.99Pr\8`C5-M<-^Y\t">/1'6[JsBV@+P,7([K2tG/96TRs4o.8h;m<p1='n$p52YZ#sHd%V#>0oB#*$?c%KB>0As^@ibO9%c7rH,WJ`4jd;iCs\:2jP.t87'YgC;_4^c@BF-+hT3TKOtiE>'/nf@3V(l@qr"t3W()`^DC&7=>S=hj&\+4`jR.B>f^*R[![>Q*%?%/d0GO*i@-U%Ni,XICBmioU&c`^611QqpY6'q.+h9Grl\Sik(3DT]7=[c<tg_`#sgQ4ook`(4<S_T<!b;_l'[f,"@dhCp\UJ)mQSZ%<1?7$lt5nMX4_O#RCiRkS1I0LDg_b\alN]e31=[AG?h-,iTD,\3$*L[_1(_MDt()>[r5>,U[*4VN9Y_$_!C;'0F@%9j^c(F5otIQ%Ct-!K59A?`p&!jPhPo6EoJ<%tjqt!R)(d31fis8rS6TFQo1iEBge;(kC`b5N@amg#(QD(_<A`R^)6[ARZ^G`$2p9g7G<S3<bji3o%Ni24=ol5JV1k&WiU?c<L%b\[:AhTiId4rtV1joA,PG^p!ftF7g!^;(9l"&X8/rq*a`,E[b,o&7V54/-,NcF`Mm::K&=UR/M.ahSW%4GO$C>&M(U6F\&n:FQ&GE;oL.#2@*lmCF5DHJ@7=FPe1-e+$i/UBA=kPO7`$X.-0QbK5.J,Qr&Mh862W7a*L=@*f!a+nEb(p&#0D%onQ`kXuk7odnZ.s?"O:slVHk,)1Fs3-#_Ngo=!M20?YSn=AO<U?-$FA+Bf1Z"mn:YneN,-<aC4m^N`(_h[c7*K5PYQ_5=Nga2Q#`%_jo&>a6`^%[`9V9H>UF-,GiqKo+/1jhp#duhVmDE9DO]>/_rjIkZgiSd3Wro\Ybb`\VQ/D<NMgSgioXl*8eR!]h&YU*c$HGaC[B$%prh4Zd:<#Q-\V3c_-AhAq\Nn+*p)mqC7CPd$0;9hDi]D@Vr.F?&-)4dhbO1GnX&ZFO7,7,FT'2/X&!%Ss5D/Is5DuKIsj5IN&UbN%^]!oQi]hn_l*k$tlW=)C4urXM^]*NIp!#=ArgE^7Ipfqha/7NPr8HVXO.1XqoXFiXro[(,p[Rq=e'7@Kl,a1&rq?73f$`d*m=Uc*%rZC<qrm&hBcK>/tYLA9enZQ<f%<[-qXH&VgIf@/2ks)r855aBc&,^q6qtU0@l?m[QdDbh0DuMWnj3?`trBL8>_%2H2s5E$kLG,)L%T+?,=:T:uthu1Tfrn%+HBB/Fj&)(mpae(frh<WDer95Sun^VP!If.%,k9#.mq;UH;7+UQ$]3\kU?i9^1l+uB.`?.<in_hsklrEmX%dmM1Urmeoc3WI:#^\bKIs+1$G;r4&Cf?=1teURP_0+T.155L$>p[SjpFT:@W5;$X[J"0d#S:".^q!^5kc_fYc5!42R^]3]imXO/D%opZ3dLV#KNP9O):"eU<hJ>/DSEOi\.THH&49IPXiJ7K^Z?m_9"hZ!@A5C:Rco8M?!eEIWjJ+[sA5.+fBpQ/(l9p3VaoZ,):-e9pl%\[-AIe^*:=mp8$Lp?ZVhf*D*"]+`r&YJ$c>%c-Bao!`hX5!SZ,l'7U)o0X=SSGIEgn^!21[h!tBqB&p+HfaY!mnc&lpW<9OVqI2n%-[r[Vp2p</ppYH-TDnh9f_@B%4e2:d-KlC]>?APrD.^s]?KHN$p[ZP?Ml6Sir>Vp>G4a;+=.AgZk=9:'K567n0E-Fgi4\NA21BKB%o)#2(n9htFq<<`WG@*Npe%[m;"CHNTe"P?coBH$9k`SI#?Foq=lu[^J_m+<@WHn7"[4XR%G^\oM?fqpf*'!KX)uN<[Is?ih_'8ad%FYA4>IDe@B359Nps)d\cp/NSkn`9CbH<L9@s1M;(IWsfLq<aCEeqH&tnU'^&G4+_?pO><ET%"+VpYFJ\r%"nrjqY#6'<=AXqV*SM%oP-cF*n]7oL8Ji`q8/L?VY@EVh6$E![U,T?qK;\=^Q/6'R9n[Z=oUU+s3AWDMjo36]tXI5lh]3\BAVu:ZoL>&I7D5(QsMu3IMP]6%h&Pm%gt:;+J+)(0GOO#FZ`cS7HF%\_p$pB;GlE!6[pFNlh^c1NI_<73j4a%(4'Ta3?7"?^To&ZKpO@Qn]6WDQh7p[%K?gCcfD=1V%+2;XY?MX,4Z"\P9lg,`7EW=boH.D<UjkRB@A)F!ILG'1Ol(=T[Ygr,'?6>71kFS=#fkTk5Ie(G>kPB:=?VN-<4'"CoQuh6RpRc,q%eeW2%/(ZCj4M)5f1$;;Z3W"3ekj,9b)r8'\L]+JbT:Vg89[/]KhQ!c&NZS1?m,HcAlbiFQCMQ#OeFio*p^A5+p@_-ek^*-)4s"T9%4*^,OS%%/0o@_ff>9!BHIrB6Ir-<R:GOk0//o@4Aq4]M-P5=.feVj;7D<tSYH(oSOo6"j?g4KpZC5XBD\P!J(lh8_BpK`8_]Y;IW%++N\uqf@40B.H14:Ro2lr7&GJeumT(g$>3rXdD&rW>g'/iN.aVG>I4ZDOl7UjnS!8+"oirc9L.`]WqA-rib](=&8#f^20G>r("MC%pf)^LEU3;P,OM``LH!\=CN%=!*nu!hjDo"CrVVtoi:c"(Qc4Zf+1V/XGM$&Jo@n\4nB\RMN,S0%gc74g4tUu'j4<XnH$MV=FUgR'%%0Z'"m,($7l-=-p3;VamcFHU,W:TBeD]Sl$gSBfTc<5qj`R!qH^O<e.,L)g0D+m.i,JRsCHZa\ohokU)B7Ks\\p<Yq_71A3c6$oY%IX^B&s(gG8^4,M@`O/b-q;(0:XrZ@-%t?dt\G^Jm["$'3c&Xa?j8-7<RD[NYrqehVi7s#*(I.#/orj#(Pol(<];nFdDR]YYh!D1u%QQ,Rp.h@*0m8*K&2sd_jO+fN^pdFuo?h,k!nESC[(ZiL-m8(dfTC`OV/O)MhTpL2\C#pu&C4CQE77F`U(]"lK*Ye26_-d#J[J(E=%o(p:i%kkE%2H2!$*589"!If`kM/S&>*S\5$(r$J`Ktd[bmkp5.H1-f#43+dDn&)Rr]&90oo&Ia#<p7h_p7FhohN[g,8"ZrB(!k]X%-6RY!4S"9?jlqM&[f+@UUR$,kJ%$ZrFG'QbJ)HJ,X&YCB5<:H@R[A`MfjBRha;k!:`B*pT[eu[K_%tCijGj)@PJ7/NTO7[%1&_V6%*ZhiR>@gc:1`$&mr5pd);-VE\@Lh"%.(n'.a:6a52P=5iDl_VKr-S9tBl2Wq9$Md+Ie'9'55N\(kOEo(hO=-ffack0`LA0>I4G.\%_IN'9G`q&^]r-=1J,eu+qS2)!Rf#?,brDR@DpQdCpu^T9-Q6H\E-'E9pa*gr+%nQR:Y6e'#.=*Ej6>(^pr;aXX.ORdO1a1`1]>q=%+#*!"V`%Si\[M,-qL^Rc#EH!q;65-;i_5K^rm\,gk-FYgrSG@PD_AbNqJ:S,p>P=G)TpiW,6%B/?S?'i[,](f>gB^afQ9E3(#=1W%lIZ9/qYg6eZ,\cB9ibKS_=bE1Nn0,,J)5L]FnP%O:#DVgB<O42IG29;If&B=(Ms@<?iLt?^N'D-%VPe)k0M>DHG8urn%YInjk-?:%#eg+HHZjH(oO^/;T5s8;Ykd;'euRicQYgUD1SlTdWu6Y)@?8S@[rh5*Lpf-o[;DK'I""f=Z\94N+5:;'5+fQ<lgY2/X3Hm_Ccsu[%T.Eb:`mP!%9)lfJakp3hn>oD'H4$*19BO@MpZVoeTp5B,\'*P3G7K&Zq9f-kRlHBb45$\6s0]/JKs[qZ/jJ4(\s\Sc+#rt'oB,nE%j-qt<4o'ZXiU4jbOI+VAY=4QHkL7thXl&%!^W^M2AH@Nqo5B#fSF=b,m;C^hF1'E/I@Wc$X2r%Z<008hVfZ0.J4lC'o]?b2rq@G=%q>Xnm?esAGo\n/tp3GIV#=4>PqpWY/QbNCgU=Kuja$6H)^%O)p.Hc_QLUjd3HbOs'4oOMYR,,>mUL1cWT^k]tp\:e$X:O?@Z0:Wu%IQ2TBmGe:]>(rS3PMUepesa5%^AZ:ef2&c-aIfY+rBSZD_Vj\@L]4abp('dhm``k8o+&@rb%-L%2L!G`5@2gJjIN2ENZ['0rq*OF%Q2REQYn46:rd+E<ag5ba2K/T*rb$`I_8edMU-B_>g:6t!mCTURQ@HF=IUF+E52>615@=?A?2Loc^\%KEX)E?6RD6m-^V/o>hKML>%\[2;&gY4gMRHsT"i")@F/t@>"X1O;Gl[&)Fp[/u-2D9!/5<$2no$6t3P<O6`FJGG@H:n3GGPo&GD?JL"gF(UfrGq#jcLGBla6'Pm%[IqedQ_3!qFDGOPfs(WtTr#['\JJ%+Xl$a9ip`AF-Z6\7K3s%f4EoY-+b4S.eCKn'a.F$c()_1$q`L.nms"?.^\@EpC#^n-J.RM3%YJ/o1Jr]m1lZEqnYI?(e5JOr-meaU!;2%r0gAGCVlbu#*r#;\apY))Ag;kjQmgq*W]K4(WB0nWJ8,N"@4o"Wh`mk=Q-$A6d=9!NU%p$uTU.HESe93\<$kdE*M5"L=RWQtgpY>HEmU1a4LMe??Z5Q$E+FSX83S+F$lTtU*l-_,AH4%-jYa.;d3qq9FcO':Z&**E6Pq=LVG%=DsIKc0M66%lI#0hdO`SZi/nU_fsQi%!q81\9@'*qV%Ds;p+j;J%7]_];]=)2f-7_IX:%nZSja&$P)@mZ0g5$md\;A[,,Wemp;]u%!<;t9E;eRG4,::os7l$0B"WJ?D<'dK5Mp;4g-)^i^6_3RT&e-,iT3!_<M9HT\'nQr5Iu"X-6'Fu8Ft-iDD/&<fff9!m@@kp%mS]m%h<_O00>F+6\oRGq;4QG*[uW>%2hsRR:=NXr^Adg!gEf'F[R'Q:p[&X7dq_1\6!o%c[eY%Dm]Sj(kV$:Y?2WhMqJgAMXnXg7mb4Y^%592c2rVl$/3IZ[BY8EtHrr2TV1[g@Z]\]N--T?4W*aCnCXD*l=n\i./B:jR#o_@;Y\pHR>0fs_l:Q_ueSf[cZEO7NO]K,k,qrHpq%Tm=Wp2K$R+-^R$r3.;"Q]b_3c^nQJ=gK8Lp/PTb.V#-K2rc.JrKg"5Lh2?1V*jo_Rf3>A@f>"oM+ht$]CZ`>)A`"Zd!*R_TC[M#3%RaQ+9?SA&+RU:t2$0G!1HLS`$leB`M?[VUkYH\[d]Wq"kr9p8EE<uCE89a+clq>%kqK1B"EG#+5qUs+HIcem44*PfFgSt#_I.I,'%Ie*&jXk37Al0X80IN73SchdXqOkhq`5CKd+q<a1%c!jVWk]@.2qUd:T.Ws]oa--&/V-t6-lA(Adh2PZXiO&..f'Ag_gPAP+Jno`/%i6K<$-Z=/\Y.qMiq:FN@mi1rlLQ1Ca2NGOZ^UsC??T[GZI^n)g:OMYuoeZ>K]id!q^-0BDjPm@ZpW&;(?SrVtq=a9cPbr`T\"(&e%^]*cAq0_FI)dg<C4SqB*C1rWJq`BJqD`2dO5J2I>p$PWMmdo\cc`OTZ02J^Bq;_DY2`YgVfhK6JI(IC'0D`5.h<;&MhZ)4t^PVcI%bYQ!%p%5e^qUOfSEV[W#XijMTJ)<<_@V>SnZ!S$tBj?&TFn=XQo5TmG2h,PZf8#,8;`YkX2Es,AC/_Ordp'#"^U;$ep\LZ^!e:7L%jS>W>3sVpkIlmGta4BS&hq"))[^K')bq[l*\\E4UonC4G+'u^tj<-f4QDRbG^YXJ?Y3Y,'[p,3E+*uJ7(c>/!G'<W=GCAl3SYNs7%]EaA<a5A31DnS4+'UB(j:Y5_FG'Si&7urr1mHhME/%YA%j$qZ@g+rQBL\5`O^Dun'U.g3nT3e+4<p[PmI$i4:)7MQaWN.to;1unq%_*V8OV`XkFdP:!QSSOk+BCSptj\os8Q5Jr/7_X;!VtIlY5;tcE]KWq)=.86SQ@JRbUM]_S]fC04`6_!%h89KsesAFk4n["5,/+9=%]-$DbhYjh/obVdh2Gu^,[V$,b`NAgV?bT.kPFl8MQ\\2!*j!\-j,dmi-[r\un;=PI)g.`gcL^n9\<Pp2bQOCCq=mbT(Uq\[H@>4N%[a^'TY$XBDD9h<OT'ogt)opa<rF5XmGOC9Z_=JTZrPQYQY?.qYE=b$D\rBpdYPm*7H/n3`R43RZWO;H[$i\<-mFa/W8R':VppRM7%DI)*\g%]mhehp\\T7-\.nDUflJ"LO0Zt'A[]m8u32=0]'/,s3VEVA8_M&Sr[1]op)p$^%o^YV/lX1u)MhH=(VbPMe6Dr4b`2r?XX%kMU\oG5GWrGOPog^%fWkI?"EPM=]UH<ca;G>=+O&4*pMN"'D8pEVeM-1Zs!L.tr/<btk8",L_$'hg_uG;(d:s!F+HZG)flhFn]@T%oC;_2=(`"mCi-n/bl@80Y9.a"#sS1%m+'TirnJnT^:\GQ!]o+l2ugJEk'EZ3Z`ekmqR5#KIQkJgg-),K_ap5ELXOdNDn#Q9m@Bg@%2iZn-J*t&KYPFZ,d>N0uFhmZ>T6l!UO.<hrEVngCl^'QN5P\YPEc03Prpjm#S6Gdn-A6(D^"RGtl.+qkiT87)pWeu7-""0,q;U.!%07SNfeh?@PD@TIOY$O9cMf'=!IB:]6G5aP8]mf[sSMolZ2c"Poafi&5jWAqbA+&Y9)n4u"hS]a#FasAeZ2;:P?+i!Mg)o,J1*'BY%"4>(Q!`QLP1-2CVrp0))>I06;IFpU[mdt>3B;rL@:SghOnK]"1c\Hf?q8%!Ri&\T$p1a7`II4b`CVTFhIBC#0@/oEK'>JC#^MMg'%m`)rB2rg)4Xdad@]:^Da\T-]Pp8O;627Ic,(Q*a!Ze@V7o&X]^bTBVfr7lSsjQBag<I"?:&b&qagD&ti_9EKp8)A/KS@s0WjGfe$%q(JAofsl1_)s:$k?43?Q\%0^U=3sIk^UC[!rd1F;=_G>_pKub1I/j3Dj\*53g9Ocqb%To6gODBdEh[^/k;2qZdhB2:TS^\"(H1HS%_X=7UAbQZo\EE@qp+'u+HMm*S\XhFJIrBW"SF>7SRn%r.):#'?J%e&$^=bRqVec#b#+XC-R(hChHi[9O7kPd9E:DU?lV2jdY2?n+%p#Q)*k+:So7N8N+6coo]DXE\[&!t$m?%'>1F5tlZ3I_!mEo-ccEbX#akr86Flh0D$T,>'1]moYD_4@?&2p94#X2jZp6I!,3T-HSo%r18=nX^>CQIQOiJYkIO2H?FRIlc$d@?bPI<qUqo.g?be#H%5/&J_/^'I"&Cr<3G[0JT^)"j\+^Tn(U^nn"]ShhE=$tAn-&Nqf0(^%C89EO=M5cJrc6i*\2au);P=(??r(-J[pRfk^D:-NLTTrb-\$$IfK$Nii+Tk!DYF0\$uLYWot[SOktq8+d3#02CDXk-nEhO0V<_d[%5I]JhI/GM.lLNN4/'X."ib[CDla&J+f).#ZO&(9(8-@#bHP\W1-T^n%gj")%=SM[FWU$Ic5Q2S;$""RbO.Y0;o#^EcXYr+6[>$pG%fuX0T`1[`t8*rOKoui3ZlR-G:H#LE8?fdWHD'1f]p]!7W)QRT3gD1jUN%1Wn-(AtLPU2-W>ng]"]j9)KT+8]&;/gW/]5e7T!W1s'%48Ee:j8N<Brss&VGdm_,Mg\*&r&+?Oa7;PTkI"+_n-IJb9C<%poD@,<1]&Q=WM/.Sp-AN,@oCK_m>!XY#."9brj/luBD[/fpd/&N%Xi:6Wrq6M-@h*9AfBbBeGqG(E^]3=X3+G1<hI5"E)nWU<$q#[>d3Xm$'(2jAHG&%"p)cH+s8K\9<;t@mIt%i1CWc[#^GD+^R-NV1%W0jVp$u)gUW:q$1L:Lr(m&?1RQ+$%gLTt(L``2p.MZ"'8qjLfgL'4"$Eb:R-ZidK("e!s[kI+a1qXb+I?i1jr_m7V*^L:=oC]iGY%IblHe*_KT$]@`S$qR[hQF4rh\%<qi=le$_.qtKlqq^4N)mGIiYm`0aRTCG?lV`$bhrij/=NVi<Na@"a4WeUs:6eoHRHCnH7^&*;s%.t9f&Fo.#2=K1+:@!CQoZ[G=cLFt_"0g?/IJ)$#hqqq,1f`!gap?1sc(aJ!Lhu9ffj3[e-rSL/ld'L"UDgTei*o"I,Ipm\J5O@.<%dCOPj#I)7-4e-Lg9%cEcVPFJ6hYmm=mPW>MPQ)6d@.V3&UZ(Udphpg%G&5/lAq^1!PCXVEhoV\o%2638&-#ok%r#.HH2JUth.u/l%-iYu7m`EDm*33Wo(oRl_TX*AJ[`9*nV-E7Y%f=:/XMrt"bf;/eQc_:`?Rmii,hKG-)A<,hLV/,F&"j=4%Y-lZ6NnT"TDJNE&5.Wp%;V#lj`=R9sX:;]J^/Su':BS>1)qleCaaK/)oVJJKEq?SB5qIdrYZ).R%q<L^-P;M>U?7a7_t4pWV,]L_Qd5?YPI4V1<o%[IDa56<%i2TVk>''+0"fc7RL-FbuesM31ctCs@6-*#9(b6oPCIg\,i2RQ125kq)iAp:\L;g<Rq^4oR+adW_oAC.c-+uEJMS3=[MB$KN*r^Xa%P-DL-0l++n>G(kf\i>WWV+hXj)5i^>(fO$=Ti=Cj_#.V5Q#SCr=ra@Wd_=2HOeiJ%AJceRC=(UmHO=nDLlP?/ObT63N,%!!6q8X*%qJL8*!i4R<.)d1"oLU3j]Nb3-'l\QKC+>j_.EW?=YG7:"`<qI\PYPt!:FGB/UQ\'4:4d^OmHrm.;J\44C,Hl<KO.6P<t`s'@mb/,%2B]0Q=qTt--j[c>;70U9C936a&P6)oFZZPofKQ_FrEIiV,D.0/*#q_,cGu48@d>([;ofQ<P1L%$UUW5UmG78:o-((;`(K;a/2bA.%lQ$?XXW#^#_4F#qp1q'q(MI-#Z8O$F,d=qp+W5ZoeY/#=f"uR-RPntURHdPLBh4+KEGZJECdjYp;I[=o[%HWSN>p:l1mRc%Wt`t:%,<^Do%Va2R;jf`qSNL8:Xb]i6WjPJ5#N[[\:kjdYC.MEf5O+p"pn=Ahc9[#PgH<aVT%<DbV.&AW)V4nPVkpuY([%K\H-3oe-Q]9r%@lFhA75`"5N\1[#4S;MP3<uD,M1a5XX,#+13"Mk9<"Gg";<O\`FtQD3@\q"blCueBc:)G#W/L3P\L9n:Md#?)q,2#TKPDT$qrYrY%?.8uZ(ZbX;;#l9`%hfaZC\&6"@hKU.O>4`6S51_PFlJG>\[KlOnt&b(3n:d>g>#%:-6B0Qj,!\14;8oAD=gYT&:Mej.HWaW5,fSq%hl\"mWo+k]el*TR[RFJ_[b*Sg[>U:_gPLP<$`eoc?4[?!6-qnX6ljcd(XJFW/)jLn+oLi[5C!OjP6($@!,1\S_0Mqjqt;1VUNn4P%U7Z200>=Q6L?+m=?kGaJ^/RWHQua1XAss5/ada#PbnS9i'-^=in4a1IrTKf9@HO-Q6$?#sC2m!L!HV":9lWqZ'QH4c?uo(X'e:Pa%'Am?O2;b38+Kifgka<,=a0a4&o4?9`BG;@LCRV?l-5[?:&7JI(g;8$'0W?Wnd#/d*l<=)M-<.!^L)KQH9'oj.F],5fmkkWI8o5.t%o$8bMEpF$ZQVseCP?,nKW?Jgj.@12/>`pJ"9_*3KP>oA^8LeIcP/\>7Urf3%@MiI0N2LJi$Tg7\5:E'b6@;\L&Se#+k=`)1:hjYc%7KA@3ZkdG15k6nATdi>u$3j$>TtuJZB%KZ$[<4@<ieEH`Xu;=\YZ*(YSnfuM)#/5EBW^F[(`R`h%WB3*L4p16)&q!7d!6(7itFQl%gB=t8V(J?<!KKFa$iDV")8:gU]Mc#o%>bDg1CV]B`o`)r5*#'QL3*H*8,Dr+YJlaG8JU08U+f&<d>!=g$a)4==Hbm;L4M;6(nL18%dX!rL9\aB:0koqZW;3q..(+942d=_Ro;1)s.0\U%f=k$V.D^s@L'XX6X(q7G$)QRl9)[rZ"CG0sLFLZjp,,Sn<S(,QR<qP+L_^.i%.JW+*RS^"$o9iM?/!?eElik<gV%dDQ9$*8d.=&O&b,Sj6P):/\UbRb:-@:[[UQe[:.A`PkPu?<J67EEVV$*2<l/h_=CrMWjM-8-A%KMmC>V$mr.2.V@_Ml0O/rZA0c&58N_p25c'*gpXT9ZTRlN_p7B6hQCQ8=KYcc`$!9989j31("S7D*fWNL,('>@%L3cT^k\3XaG.(%:d/SNPptE$6aXNJ,,6QWe8S#-B3qEuG(S)_"%4M&AkRGp^(afETGOP*-\EIMDU;<M#JE$JW-t$CH3#?;d1:6Q>)m<a,5iALPYZ.]%K7QJO;d0Qfm'E'T[7r;H5N,OT2Q;>l;a]![HU9T#j@P%<MQmJ]j@NjG]\OE9<A6m67?&kH)"Un]A<2j]CsWjUfq;t)[R!\M63fXY%n=[hCCe6;+QXVJ=eA>hnc[Ek.mZJ+='aq*T;Oa3eD9;>\Z'o*e+;i(;7RH[5#Y>>'e.(YXX;h3i-+CEu9's/'.GbbH0%pjnW^@\;%`a6PGJp"W!GZ4"&'@R3pLe<4CgbqgMWZae04^8j`-pkEL.itW_>E<=u@`96?6;bN^VW(6+"LghRmtY=&;ku-"aE*$2`]=N<kaS"M%@Rj;9U36k`F_nD_P/pN@ibL@h6h0m+gC(>64gQ>9K`,*p2+@\WKhgN:gceT:oj\>?rra5:9[V`3@:e#O/rl>EaYaK'd6QRq`-R2Y%b_X4"Q4_6LO+pL'2jR]sWCdO5I/?_Q7=T*qL^XC7XF7&O49PLf(s&@eC-*Upk"JXkZ,a"UKVF)JfBc-V%LY-EKH(5X[#WJfJVo`d%I<H<)lu<r7TY_q-6Xq+A+k2)<$<O7T,CjiN8EtI*@0kf?g:M.l>8!f&X=\)*Ad/Q?'@uMHq>kFJ@o&$7dahh@@E74;KHg$4WPrR#%hGn5q/IrTn1j=B+V/])^V^&CN@J:Y-:jUhnNVtgtDIhskDU?'&c`6e=CaCo%IV0sF!Je1=d?.N8r3gTO9Ymrdbfbut\2'*Z=%oj(%a-]3Qm5Ogo.;0#)/W/M&msu&[aaHr<_WMk7;ca^,LdJ,GhkjsmcaP,hdXHGV\3Mt_lu:)'(d/EXgl:ePFcbVrH>H.:@9NZPJ=PYs%bnaMF?O!XVfjGpH_W2g:HWLC]&X?+=5%%k+*;"/?F/IJ4lu?Ih<@m_ae[=@a9`4-D0Kg6iUMk`\oW?$W`Cfgag>UNH@S%VT@oMNg%+X7Q>KqY>qiFa9'epM_=?c0+.+;CE@N<h,dg5B<#33q='6B;Q5]d,_X=K?<K<!rRT+>HBDJC0[Q+S^;t!6gr74YhaQ;G7BY\,!.r%$WC\/,@R9UlEm!LXAA6[_>u1F?:-JQ[6dR3I@q1[Ogn;B/?feIY[.G8eo;$.j(P$$L"b]Ii#k#-G6U;K*$]&gQnr*,r<"'4%so':%qggX?"O?`DNH9sX;E@p7X&%taa*7/X)!GaP:a"p$HR#a6d?)*%htqjnp@n:>e0<62`/0@mB6sm'WnSVgJmE=$4Oor`Z^hI]qGnSN%gOqbD3^n'R-@Un.XUpF(lmoWCHgNOl@\Zpa*I'TI"5nfM1OJJ=cAfnqNKEd%m^`k!*I)is=p$"g'au$iNZYN*`WZj>C4Par[.+t[%(%?dPOeN[-66,XB_t_r7^0j9&Joq2IL3hYQ1]WK_<kDjKI%a7"AoeuIkUa\]4S<O^T/N["51A(8fOVG/:B.9=M8#h'q^\e4qH.]p%!O.4jb4^Sr%`KXr4\A(djDF5$1f/8J4=bU)gfRsahD]qQ$^mue95I-.eKM/9CD3p\FG0qW;FcF]LTroHZWI"6Z+U8^$a%F6(`,4A%[00Yd5rG-%*"el,/SIc&OfUg;78O7j8H?,i9f,]eJ5(YIG-#\9/s7])E#]'bZa=K16qEReLsVkQ%lamG;R$hJpJu$">A99%`&g>*%JG@s7NtM(])PZ+PY$!(W:1WQK``i&H&a(6j[8/"0O[BY9BHJt6!(%2.I\n7hVE5K<i-GPt7\\O&*"jhnaPAbMbpUqg\+kJ3dl*,L%!Z-]g>r-VWFX>\?X0hd2?(fOO%"$nNTiSZb4i$JUEm#eb$ui($4iKsdZ$nmU1/*WS81cOICC&6219H2n>s0d9g6aU(XK[,iEU]TL%6Xo.sL"E#K%7@V&<9O[K7hj!]PSuTOWlgP/QoJV8+s@R'>3<<%@.m-E:e$W2#_PZ>`Z5N+H<;QTK-R6ORPf^Of(F%[Y[[-.gpQlu%DLIA6CormBL@;\`h!5eeKQ!L&S$5q$&VV9Xf:.1[iZQm5oIt!:qjmWC=rY7ORk=/-o;1(H;aGZR2o;HLa!hd]k(7\SbrQOA1B"W!%3c`(<-"R+3/+sHP"bEBm,lkOW_0?g@!Xip2[[u\D@Q5u*g-iKhOB_mDAVRQhMh>l$l/]C=!0'?fr8[#u,[Jn`3XcSR>m2L.N(=4!%ID0][RR'gqrEbu8;L1qS6(*u_L8Ye(@95?_1/HV=f-d0^Pcc^+5^=`a=cLfa8ir_74NQ1sPNJF_W]_X:oK_,%.W.CeM)MeW[r`TA%"iF*2[=,t?@G2#8L#ES!Eu]^in:@^@a9Yl"9orDb3-e9o1gc-BAmXtj,>dka"WGbA#X]3&]boqB%S4u*V?P1EL$<1Z4;Oh9Z]S0-%M]n>S*Ca?<;Q60Ho*ZN\/5R<!.FpuAer9:/Tal!51"3K=G80!0B_PdDb0TJG0IbO5]o;$p0Gb^jMHOaL7iXR9DHQ48\AAtBk2'R%%V8^Enp/1P/hbcH&hGTFTb?l&<f)UXRM1=RX@p"R&Ek/]\N(>NhgfZj1g9Of.EH;-b_IU?^9fX5\Z*p+f`_90;H5"T%#C71<93XVg%BS,*k=+]uS.V06jP&(a<#fftgWX=L&A+bP%?HWF0&uAK%#rGjYWg+.+6P`%>\YF+3q`okSPRo/Y+Cbjk]/DUARU]MZ%&t:ZKR/Xu%m3n(8NQoA2-&jl'@Y?UTUdu"=&JMgrX5c]<;%)sHbh&FfKPcjDn@PE?#Tu:m_$?Q?#XV\n"XAS!WY8`%OJMsq^sZ&U`bg"(9l`7U%0b!^)L)?lK\5D5s?-,,9mbJmdNA/G"(b,s8=R!`c&HcbcLWF;N]]D&1@H*mOb20k%/a:T2e7se_SM8ZuffXEl8V;DtN)9BgB]#ek%?@%VR_`tug'Wq[K>j->%/Q9ek"]#ofkgpUhWd<H2)k4I)gq-2+R-%d#-S&+5fR"$sF<!!(8<Gg^(ap>$1&0NIeSC24/tN3gX=jRT%`uG36Cl7k1;k>rkBr#[Xc'2r*cXCZ':X>j<l.<q*#ZLS]ANQQ8]d#b^E?oc0ra+S!)'HH,?r_,9jn'J1Cp<OK9th%pa]ASu66o='%?O_pe\doO;3nE.^^B0(3H_,ZUSn57X=H^qC^]Yer2u>AKAm^:,:bk>:=RZTl%<oLXI0%>/gm)VIc=!t3?qX6M6IG--Gt?c,ZS1+V%V7"5a>H<YFm)rhADM(.R6K;1"6'&J?6c\(CFqnlUEWein[(3lg@hs9%08hpuch$VAE&l:FVl!.]B\o.lj''8U)2Dc%)B;0"SfXTX%F@4cPKgrZ#n]l-)2\>]sY%s]!*H*"\^c=-3<il3NbhTZ\fR/N?=H9Ls41QsU?$hEL5IM^Vk/&_eFFmpRW'`N\ZlbdN.dpqG/gs!K%5;X/jOLEe`)QZEa2;B=^<)A+6n#sH%qk@hK=iGpPZ-,<G'X/bQQ3dluKkVeG'G6ip=XL(UQ3h;%E[Ia!>7s6(!gX+,eW`HuCPnp4%C3qNCe;Rjj`,LkEC=]dT;!S5*".^R%#AT(VJM-ZcHmuK:_Y(1Y*r7p[cqH-fP9E8j#\.$28a:_?hNLMrChc5A>BE8i4\ZGMSK]WH%igs%b>+6P'@XtS?18.X"*WG-q":-ViPYZg_4NUJ[bje8s'L(d)Pu(Wf7jtL<&kX+<>gXl[7]Bgt'\c@hV=o%bdU#a:H%ZI"La1D9%+4$9_.j>[DS`*gF,r?8D7WSfrKEcr:,=3`Nl!r]>99IR$dTej]Y^nd2fpng2-D:HVN9GUnW@fJETkV]Ap6h+*LF"bW2.,8e1l+sn%J0d%.d-OFP1kqEO`h!kNNP/UC1g1'Hcr`G"6=XjEEK%<X,W'*L.j_V;$&r(i,rF0\,,(DI.%tX:8n]!PGeOkr%A.#4fS/R7k:q!R%L5:K!h-HUVZ\-+4?uR<#5]@OUHk/Uj_F2rbd"mfn?\i;`lCa<=,+O;&WSH]:1l-7e;]u60$7G#0'QXaVT+hO,038CT<H&F?/#j(O%)l'Q+>3u0NR`,Vjl-r"uI@Z#=?;Lmg&TU^*3!Zk<a7H.[M?jB2")6be*/*`Os3BI-AsU=gd3/0;,K2e[ohM_LU&e*g%SV$nSd:q2%]H6U>_Up0tSR;e2`ehPC0Nn[ZHNI_K:4nKrO@8<KSjU`4-[enKPJ1>YPLdSG-`sBE-Z+ih*c87T:MLat-.Z#pUc(.2,i,-]aT:In%'JS^W[sR;]T[b`qojCu(jG@[C(qCt\`&0CtU_pd\aoc9eX)!<2"tqOqgHS]j0_2pa6IhH)j%BOiZD_]Yr3?q_^'Q%N`Q=/Qd>F];%!X-!FS8V<Lq'LMfI$;9LI?R^Jq'N5BqBg'<\fGXnF&$He.j`26kG/l:c:Rn!SWcRb3@WsXdm>_6QXVJ><!CD10Vt#OQr8eiV',9N%q1V/7_FXu%.G-/OK-s<+Zcmk/V)!_e-Dg8Om:IcAg-R:_C!%jV>jeA"<!"e1?f%J]T]R\u"S7S8-^@R"Eat>5_)$u7BnVYH(fdBJ%Skrl3?]%NiKG+0.6:igITcCq&'#YGuD]d;l@]ML5!E?AW@+4o\*N#bEL&mHHkrf(\IRpIm&K5%e589<]!Kp8_.<;j'_P/uEYquq%%l<ob#!J5UZVQkbG(#4o`,p$)lKR^M6!j0?[G*Dap&?CSR\Wcgi7N:^bA<3F0<:ob)HO*:-&ptDo,K6V2'9I_nFj_%\BT"5Tg'&%F%'8u5XTo9Ph0[qR[bZ=Q@CEA7[MGu^p_/t-a]f]YZXdE"`o.ruFAs>&=-tOSZUQe="N%?/cRij8.F-L-JS>-eAkDW<=Z#c-Z`r'.r%Iuol[.&A[`7k'`!3D/h*N`&<W8h$T:E0T@.3jN^/%'^RD0XQa88o/.)1(,%tU`YOn*[+.Dc>TtSk=`&p;p'327Oc04;MGIR9Sd;F%'"OHn73l^`KQM,B@W@nm8d'7Y-r\e:UI:$<N+02d&^"X57OXJr)56gkj-..0pgb*n5"R>c.FJia896-ig;N2#Fu)1IFcB/E#=^)%%&=lMX\(JUiV:_dQ4k9A=6'!`ZkUE6YSr1nMTZ9qfkBg=V2F1I;k4lmC36*D4cP`?SA*<X*8j),IMtJ'`<9E?LV(t8*."9T!MI5cg%V,_Jnid*YkE*JjYdM>V4[#5mqfQM/Z;[^3'O8Ha&H4Jn":N_,E]f]YZrC:sY\2BHmdE67M4sF#XVu%W,Tq"ZM;!/&hMl'J:LXDVq%BEK;uILrFAqEh_#Qn7A2ebMoneG6qM37F19ITV48-3"BrIXlDN/IVN]k'a+4;:P(9P.E[m6F">7jEGo86u[38P^X:!Q$s5']F4H\%<r)hp45NNh$qmNdLR[P&oE/W[K/`;VDO<$?RMD^9@r+*1?!-=R0[<dk+=Qja,UH2l@\FlOW+/c"*s?u]F;;n`![*h<P,STS?;0L#%V(d[m?Of+]0INhr9]lWtDj7QQ%kKS=r]L\D+C0^7%A=&9Wnll378@,'SY&8+KAL%<o7K!p,:ACZbMi2)OrPaqq'#EgPPIM`EGnuk%IMdVW31l[OIYO97cXABr6fTIV^_/C'0uff#22#H1NGa#FMK]e;jTh?C6XTRLPojCD?RShUA:DUP8mABaM/L6cQ/<d^k"Dt/:u2V=%EZd1OlUV?5/Frrpj[(s/W:L+EU5L5<l#CITB`oEeKP5-K$5_(b!Km\ci<,b8^/ogd$Fu)2Q%<dZc4%V_G_c`LO`M:?k6G*;*S1md%U+r/L=9F4ZK8>I8m<:V+`V.TD@]T)YRC*;qkm(;siq3?<+f27"/2%S2)5'#TK377@EK:_?V*AA9+543F[n&8=#e*ZS^(u=j.rsb_%"RmDJ.R/]maq%s.V=uDlpg^RQWA50X)961XV(1S"W`7"^Wq(3JX8Dt^;KO*HGW5$hS&u6D6m6)J.YFgkPB9+U7q&6VQ1LgE")Q&G%HGiuOMFMUb2JW1=AsG@!S$[XX7-[e<LB4Z2T0jJ<+C.\O+kl$UJhK!5HA,N24)kPa$"#%Q>9qOB.J=;E.raoA03L^hp?P!V5&aO7%@XtflC2n\+%mFA3_.l3M:_TU=5=!qi5gp=0f/Z7j,TXmn5PHLjo3jdLmgs^RZ@r)2Qg4@%*>/6E&/P4)9P]>bdE/kBY?ba5Cpcn8%"##]ZbU:eF&!75^.nd+\A3Tlf7"5\Dd@\<YoERpi4UYI[o[cGeV=:jG7"53e4H^)&?uZ#=Jf-VDkCZBmdE;O+.M0Le'M?fEi^jQ`%.>qUs$Z/i72H9=b[<BA5ZR'ek7t"G19kE1#1!q(PP[i%6^BoLd5<uM&oiN"8(b>#WcIQ&glk;NhO#i6X&9t?M*j_.613"aBr;fed%:<R.thpAcbBC<jRW;6UL:@AtK+!LgQ!*St"(hZaQljo22-UN^W&!5Ld@Q_-';*\YkV#+p[>#m>YkQ@X/&K.VGK*>tL^'pN.ffLtj%;G#QBW]pnQA6'nKl48LP6ZjcA9Ft8'3D<G&%V+$2"X7(/LT3QI7$';l'k+7O/.'5*PL`@e&>8gEh6>dp-9C#<EM]<`ZsH&G*uZW5%:nL1+J5Ir+aOC4;&"h->0n_uF%T1X2"JaapO.b]Td%a3-oS4GjGRB<Wq9\:U0'5qOO;,QB8IF*(nsH2KRSTiaTqHQVk81)\%uH,*%8]\]#8C-]Fa#/XNkg*ZeqK!Lqk5[2E-X!bh\nW&AG=B\)mUAF`efa;"$EWmU$-s>Mb?e_/q"8-]9OrY:,A9]L\j,@L=SLu@&67Kd%Wr$"B;tHj<$I_@]r)VY2"N/`1LJ[7r!2\^\FA=th9Oo-1HJTVWBLMQ0juEDU+Z&(!?l@8ki7)h84*R+UHFS'>Lo-b*9P2H*WOc!*%L^\hi_+(>hUG#U-#R/L9#DAs2RWsi!,;g'fM<B\fJ3[Xp%ai49Q_G\05KZG5H')D74Z=-?)$d%eR#Ai%+1(;EF&@\>l2E(IV$+7o%\,71La'4jiQ@`?Ug<<%>+/P\7enN';BdGni=q#4?78W\:6!3ii8>l8]CmD:j86)M(783EaLiM#3f^k1?0RXZ_S;#!?;"?m2EPb'J%:%efPdNNoc+CnOE&Q11WF,6ip*6,9KGZ.3I>(Rb!pc[>i2q];&Z^VYd0T`Ll6e*8:&(B6+onV52,G0BQlZ^Fh%2817RCIL;SWBTV%PaH0=+BOjT*4TkgKYqXZ+*h+T=_d)hkn:QMSueP./GZ'=&k=cLo&h]mr#nBs@Bef'CHrM)Q2G&R<T=(J5>!H/:>lFK,J9MXP+cp]%#%%]A^.ck(k\lSIZ_`miRHP0KQoZni,7[Y0QsbHOfb@R"7=RjfS;E*(q?*hgktEN%_j]$t//in:`9:qQMuN5/0]-(T3da9mR+57o%>6fmZoET6\2*T1Yn2lQ@U1_jq0V?\!P>^m%i+@_"rW!gFU0%PVr_OMp8+Nr6q?)DI6S/(TLb33JA'lC4Bk4R.`!L2jGkZg1MbsuI%&ChjZAmgO<YO(Ygfol@48$.Mb%k;#eP`#HR?]%Wd_mg-uI1W56%,89jPss'HlX!ia"%R`I4@Apa2,,.mM6:q3h-XO!6`gd`769+o%!NPupa:s('Z,"jtM<+r9C''%uiY9ob,$Bq"+k>HQ_\!du3Z;!tIt7%NJ?&SKj+%c#`3<9RjRJr%<hr]#7=PNp8Eh7cG:C>VY4hU0%jF\djg')6TU%?a9L@Enrk$=@.1JB'DBVnnf]F3HNkNM&6L=j/^0UY1WoU=&,F%A5ir'?+Iq5Y$B6JbT%3Af!m5`D7ZG=Eoc"fLg,%h?BC[,MRl1=V\2eQXMH?6\KX2=R_*L%fC%Ii"%c&$a3I6UoOoKJ;s4JA=G9iJj5&C2stX(),l5T_H\VYcX:!cJn4ih*/&pY#sqL(%3/O;(ZL[0AA2rk77=Zf]_eR=SO=9n!^$a1&?YAf=2o4CG03F7:>k#5,_i0r#(3eNj>)I]ekY](<E;ubQY?nUQij0a#[94fHIP?]a%1:6R@,f=$h"\6?$&]i>u0OgVi"(9P4(iYTqY$p`Lco'NfKTN]/\:Fs\E.,&[q"HH01COahJ7C(4H&Q[5[?m4PVqtSd"M)%'.Z1,A%0Qq<*[72ic0tt=]/r+Bd/hXCDgj]-AaZYQ&O>!bq+<>5_Y<eq:a2YtW!(Ft#_A]hjVLd>I8`Tso>UV\l!ZcLH@DN@BjhdNCUNe!3%dT-r`5Euk=09s=3<(*1AVI]\"&+jbPAX#)ZlNhK\"G9S/j7Y$A&.c4a%mbqDXckREL>[O!8=tZ$QOCc*m+mb('(AUn"5%_Sq1dH6%mS"%7gi%%\6kd'Rd98(,/bI+:<_@05=h2r($Yd4eOB!n*!@7Ej1%1_WCcFjks/X>,kG3mr9<f3XHhUKH:FD28SNK5\Je`2u_h:gi%1</oHPY[D7h'Y],fRea:h6EqF4mXB'665I0)4P$JJP!J69b>>Fc'tsE&6K\eRfJ$<4\mHE*1ujpjcdDaq4r.PI+"H5T<pJu'PXkJ%PF0>3Luk!uC0a=Wm/s2K8(_j>(nDFgGeOkr&Y1]5=?9jbYj[]L%`8B3*"j^4#'[di6Pg:reW%!`g!.<;L@X`l!,$\pr1V1)o'$O>%d#NOSj5<R!^3pDF5KZM9rO@^eA>h=rKAB5lF>-Q[5)jY:"]h-Q0[ci9+HD,I)u-e5gl6kDhs&77$Sd)H^)cdlLmq:t!rGC0-`JOg%N"Y\Q=p+AFbk9OF$UU^7bP4tG]_6L_S=>?CVV+r)1%)!3"%<G8dKSDr=/;TE@CDu$k=`)1E!km"OW3GW4@UsG,J5Q5ZuGXiW]4WY%/uj$#Y@Hu*:794HlD.$Bhn4#.Q#9iL:9*<m!#$GSBl7E5WmW=Tc:(`n]R(G@R!2EuUq%n&\ToU+J9Ogf96F(b&p6Cl?K\$3.TX\P%[QZb<3Z"W@TJ"A3CgBKR74n0$HmuKJ3[JeJhF2^K>a-DkU0n"WB@8dV<Lg6Y(Bm`!4GcY#&"MN'?;+T<XLfS_G>]nUJqpn8[dM!7%9YH?6+O"8<7kP,[RMUd<.Kd$(4Hr+V60WIUT_.(*TX4pK6"rL46"sQQok98SK2T<`.<TIdT[^d&6"r9VKCT:.-pu3E/TgQ2.CL-a%5sdsgdlEZ5a?b*)*#'Cdh[e0r3N0B*-eTJ=qh/Hd]n:oh32Z,Cd..'8KQ!25mf[hl^n&6s4V^`'1B.I_S4I>mWFXt]q'X.OJ'o^p%5O$qQ6"q@0LXMW[LZ6=@l_4#upEVZE128ak:MO+sT!SaP4aD\hB8F*rL&RVr`E#ARf^^)]lT:.^R2j(SJn[cCEbV>?']W(Y67dS6%#J0&dVs?E80a`BS#:WB7JnK2*4b`)^S`'4/1ALM_+K>51*?]>_g'Qi]UsCKXo\E+dXaq^\el0\dD)%nYM]JG>/lkS\-[]CpH9+V>%(nDY`L/Z%<Bl=O.QX["XTnGh3XUQ]FcZjD;_^NqWfDp\fFa4KQ'ZcJ'!=rlmiOh&G8!qLecjPpRW)+_UhuLL^M4P?9f%t@0=iA(M%VB>et=$[;".]Mu3@7V90KTfrFF2>m8!p?7dbM_SK6on(`bEVt")"#a!498KS"9c37o^.`IKc=B""b>;35$C)M)>e<YQ:qj-Y/Am=%J0Z<TRgkH?f'JA(Po=t=?Z?li`BgIW5qlA,OkGm-ShJ&`c)++T5nc.2k1J`+AlJSqi,#t2RgRm)Lf-bWjT3H#oN[!<_QF`B37H;q%$"PT$&",]7!$,KY8p!t<,?#eKc\+uN9ut7K3\p6[*LX8EN_PrUW]]7K3(2I^J^>a(9Op$$,rMgb&pJldP!bU0N6IT0msHRm@P5K=%XMbF1(c!EuJ;Am+]c&4cJt5k3-<HYO1`9364Ff.P7jU^$L!q<#8s$U=HR@\p0R,."0aT`q?q.7d8pm_;&IFOQj9^qOo0e`hNC`tf%j,qm-Gf8,hL.FBGU5b^OBG'9e(sRkIVDTR&rJa;W+;usg>O:#<12,5;W1u5j`#g_rr/jA!+*Eqj2fV>.=kfH@7nXkt%&BnfI_m;]%[^NFMp5*2/gp*f>,%SP74OgQ\)ASjO)N>m<U8BB!(n8m.T6)pL[lYXF*?:-MVN)kMPR5.MFoI26iqsCXbrI&SXn,'<!R;cIK`)K-%ZR+Eh?]+g&DG_Z*#UE?cfk.H.rJ2:qMQ%.UC>b8c#l:iu,"$TD!?f';JHH]"1".^T(or3.>!O9DfI=U'$O:bV)huMXP7A@.&M@+I%K33Ht\O^phdW=KB,4&:Fj9=fX1>'#ZK7.R!hVdAg!`5O#F,O9HfcGto!VH_i$H:='QKdfopSL94dIoQh_0(cGV\lD%+FSg>;A=7m%k'P@CIJ7p%Ce;[K<:'gn>PPcQ"cB^Q*[BNgV!A]5DEG?2TRFq!a\dDFn7$nSYRr5o&E1T*$dtb'`<QQBE3t-<']DcZNHV-2j[S:b%;4n=0h@]X5TZo1U#`;$fmrc.l!&oN"mfeN_+CQuY+p`n`R)Dl0%Q=Wh34+`WPD1>B*'cEg)68!_2f?LMM8;R='f4:Eias>Ye:/(p%Br+)cK\ikqK[\/71a!X#^pd^=o,EPiU'^.BiFk>MGN3EUE_"p)!@-)O"]ErW.GZt6K8Fs?dBOHnp$u6SO=?O\k6@+52$?s0:oR(X%5N)h15),m1"qt%^QX]uf$mh0)FloW#$A%5CeE6H*L<rk@MtY0KA4TC__#$siKBGq9b*P6K#EQb4jAkc;N",hE/26r:J<p"uMIL.C%pg<mjU#:e<:8R7>]pP8.d=E"q1#0F<GQGE*<83R8$\g-FgMBH.k=`&pb*tjm+Ft'(LL:T/3)\2#@XuD4#i=+p&GE]AI1CmGQ:Oj[%'_fG1Kr7t8?7[![&N6N#'IlPa$XBff_/;[SFZ"mE(kXB=6Ld_HRa@7W""BM>-AkVrUeAdV/_/FTGRm>u_^B2e,4^)878D&1irtg6%7>T_H$B:bW:(`A'iG?C=%<UK#jI7_TEn'h_"QrnZ'P:q:Y@5cr(kd+W`[DFsSs#<<#rO/?jla4n&[_Y&Ks30$FnAMRC^;a+YBk>f%3_9,,[Zj2;)+Mf7(pbLkRP2YZH+jG]5^3;>IbJ`p!?@R11Q<(X"!ik;1uA@*JP/kes%kfj0Ua]5Ba*^piPs#>#f3;/*<NQXRWa"Y%LCFpk-5b/US``p\8;<40.A]6';Qrb$oSJU<iU.;7O;Xq'Jn&6#dC4A(?"Q`G[E=u6iT5;e#<757:BAsD?PGkM;FRmdc=?K;P$+Tu%i+h(Ag*`:]cm/hV=C\5]W'lG,ZW.(O5sVE%;Qh7mA1$e;Dn1bW?tiN9,>G:6V)rnOO#TPj/Ipg_kQ'58U6<Y;]@S=7-"d!DI9$&6%KhdTV4>@gSnI`%S!RosPM@05-*_?Y?,+WgIV)9HuaQ*>qem)J;MS9S_D6PGr#T?hGGR+BKGuCRg\Kal;5R.ZfaYZX!F?(/oG<us7%]%78W45p%_Q;N0"-q8)CU,00n5hA,-.CcAs&3PCAkDbkJ"a?]6m*`?O''q\pfe?mV)>5cucWho>h8W?q2=IZaEYK$tE.nq\[AG:n%FK#rQHq=qP+B;g6\M,.Ne<2@j-4%n2ppnUa2O(&`V\n:O76q1t1]dpDZ.a1?"UD_s.g<sEA'Bo1OY/<f_94"X11\2d:<).WK&\Q[%Hc'S"1<LE#iE-h>Y0C:!*o+>ac&:#>UVp@VP".Ep@[[(?5/m#]@#)Pg&`^Z(>^2t68u[U9hG1k"b;qUA9-8RLL+uBQUk%D)euf^?%q`Ai2PV<H'MDtmZ)O`TK@"lXt.!5X%M'![1)JKl&+W]HIDqKl6A+M.&Z7SHWG;:*OjsDBM],?X1ii_H^mceIUf7A<PhkZ`-A.lGB%8,CL5-t<:6R-4n6!UdM7`?lQ454`)l,[H2s4^)i\,gn%n32lXNCk_*q*DIC@;R;E_/5fN$6Z>R#"SY_IW$7YhM6s(7Ta%SDhAOA\%$Yh(F-!28kP"OFmVi_7^Li)@l;FCf?B>O/q,6LY6*%$k[cjRX8Ee4E#-ck?eU^r["25FaG$lj;U;&q>)rqp7ZGp=5q^^q/+M=cYE%dR6Z-MF9Ug$hI)3Xde6t1eBWWhh)Y`%%M2Z\]7'/S8L)S7VPJ`DN]5n?VqVRWAChN[fdXSb$,dEQAW>V`1uHtNtH%Q4:Ri-RrH4]%hI5Q.^u6r-U`njAF$cl%;J`3+8r.rU%N#W+,G"G7J8o0O:+9URUPrgqkL+%&>1Y[n5_bCFPUVTs932I\bXh(=8'jgHOt<M90fYaC%O6t88,TfI<C6-,bHeaKT->hs:<sYP@Z'*-V&?Ei^gTH^__eD+Yi*t7Dpa&Nm%_Q:fJMOa?0i#_C4Qa7+HV1[pC1UJ'_4H4<,K(Kk%P3>0?b@)E!CdS?iL].\aHA]KNQrNL(AIaIU+]B#V@[.EFUpo@h=!a*cl@?oA_Fu7F8[IQ<`D2F<l7$L7-_]2TU$qqZ'eI6O.pAqb%#"#gjNeGGon"nBI.BQXKZ,H5k`%^P<JIAd=/!7=q(7kkmPq%e!38r4fHDr6'P[H$I[hNqr#M)nK%N[@E)A[#n"%Wi1Ec)oh_^WNa%K+U8tPsG<dNu^KbI>Hr(94`f@`eG1q@>"55/lgtrBjRj`U]tJP)`=B"'ECL_2,m)</]YLaZ#,*^@b+s*c`)Ki:m`EL/IP!6`'qSY%:ePo_aOd$=#*48^.goWA>LK)BW9"S.7"ms;'Ack^LX"`X/V)f-(D5B'$kb=2")f&:rKg#E\-KP(P[GEGC8%D,ED1q4#:/9X;32Y:%GgXFqes1i>=ZCbHi"IdMJ32gbiMQs5l[#TO\1utl/052)@G]E*!hB`4#XRl&K$,lR8+EkL%dS+0h$'r.>hVOm%gT\Z#6TM48C+])%VscW*Mt'V+on-nj(mi[N"46YM6iu%lkocFH3Il`+*SouCAmfkX#TVKrT.6G.1\,]+=qd"Q-S?&n3V]CqoO'I/Zp;FiGQp&l"pk_f%``"=2;qKX;9s1/KGY,%KDo/26@@WYKMTk1$$<H+alf)F^##ph2d1d#_G@`(ci\5VqVI5-)g3Q15%J8K:Q)TS\!`SZ,.u)HOod=YH%%WV":aiE0Z,5"WSOp8'q1Bh\I?IoX6!p;=)@\npFa(S,f,<6&s!S0lJ;#[k2i:$as1iYalj):V1#2]"oHM\=erpsc=^;M<Ka8Sjb%/XPA+\=gRcK7;cS:C:3lb0j_"Kr"T,+[4%h8\BZg'`Ou8*'b:#]47kHKQm."q@[cpghhl,%b5J9U+/gR9P*HB<a"/"<@b%+0U3qa%'JBhpQ)1lX0Pdql/01H7b=,Y6="6ks29NgcQ\@N;0FN)Vka"FSh<<:+BqVS'ErsEBG_HG.966M7:&mpm8CLIRK'bBBJ7*o]Z>ae%%PFO06!Or,2PAh,-$l$t'29aKfm7BmeeX&oEY#`?$E35FhKPN0%oNH%6-/k:mXHZhIP&S[WQA'+&+Bc2fUmF597PkKsZ%qL8Z.7na%62/b(_<Br7U6A*':=.>2!+AgcRr+-ZGj/CR8_po"9NcDUVPH!M/_.+d=kNpqENGA"DSYad2<,>mZ+-TI6q1LI$_J,SI*sC-:\o5\%Ph*Z*8o(GcdafgJ[*=V.C)JNJemh1+JK:Gk(R.`;@FHZ7KNdU"q,2#tKZZ(#<"[R^UDsq7=N!&S0uAcH71u1fl=WZ+K[4-^;rgN;%2H[kGVdY0AdKJ#8_Sa,f_ZVuVKsK?1_h?-jjQTdaKLk*mcCR!LdLBPY`+577R-[CA1"k;M`FO*F'pI0I<(tj]d3iXl9uLRcYsMn\%&M]])9uLSu+<mZhJg)OsW/,/mPNPTDeM%>jPJKCCkFt(.0$5F"U-S31n2DLS.Q_!)4pi(lWU$,LJOP$i%Y4iE&^jF4#md,Il$O0b%d4^&4nPP!,7*\:;fn<3E<TnCfM2r:nq^?a<I$D;"I$E-sq^AGCq']s:H67"1o206?/*2-tpaEPSF&L^&lD-PZ(08ADe3Yh7QXVJ>%<92j?kG140:<F,f;NMKG3uQ=8A`msX8O4gASq3p@#L8bR5:0\D/ue*Uj@]rf@4PZa+Xtr&nPUM+@#%6I$36M5Lm%mnLhKOU1$>A)%8Tdr%EqN:5"6ZGdT'E)X/a@el`Qh&S?*':e2K;W0@-=>m)q7H)KUe8Mk+ibRH+jts%AO7MY?Rmq.$'LSnd%6)&3Z)<_^Yl('$#B!%V22PN;1.f1pJIU%)#W.r5IejV3V$%/`L<]&E;0\Pq)e+DJDffglD">&-CTunbkWZ8;LOeD?%%sg_>,L]WVS#[NHlU[ZhI=+)./9&%a$**(ls,eKK"<@kOQd0.(U_W1o;1)s#h;t?JO^1rPf&kb%Uh]?Ca;]M]7BQ;YMk:7"YS%L:9"]C(oDt\PM(O@e5MsQ&IPgYFc!ne%.X\G*&ILW(bmf>&JE/O!mi(<oV,&S7o^,7!Xb.j_el2sPX\l)hP9$:F/lkMZ-[ZR(H9t1V(nhqdVGkDFC2Y3?QXVHgeC_2%E1p-g%jd%-gYDpp`5Vf`J&NH:*P"TFV+CIPgjS1I.%LDlId2"c2'o3M3#:;_*W`[e,!^b:?'g+gZn1l4g7055R\sFfmZ$#,,<-*nY(ZKs[%/cf`D<VPPS)rj(6iC)'"S*(VJ2;'A66<TK%'+hhDg!lc<OT[__7#-Z?%3i\XWX?cNOrlPI/*tNA?;HCmVn&Bd;Q6h&ArE3B?O!X"%:F`krHt(=i8J1'JWWF35835sj_WnuE64uZkYti]OM7&;&9r`G[FCOctUD%Dj*M$/Pl0+qC91LAWCDra3dqNnZjeqW?oV'8=;32]j%.T6k?'%Q3a>#f'r$!N<_,'tn:p8SD)8QD)b>s)HuXd2[2\MQ&rA6`"tW+<J)UQVP\N@(ARS04n#F;V%nND(m:1bP3]dC@-C8>D?H%-]L`q]/2"*maA&0MG9q1LcUem:ALk_&p^Er7.m=0R)mceUdS30WE<0"j<Uj"-.0CAVgB//LnqW*]q%5lJumTPWT_e+,fZ?M;FGqr%#QpVj@eHC82ln]TS5C<d"G?V/7jHS@3Zb9cdIE%#OcDu6T6*J!jeX2b.PDg)7'gSq&m_Ciajcs&,ghDd8Q\CG!>1ch:D,Obq'6QR%RT!*aX8+$_E[X]ZWX/JI<F.;"nU)5H+4FMIX[;$S!nLWeR)fiE@2-<34AEt(Wc[R>dp3#Ep(uO27W.-2&CFcE5]rD,%!@p3U7N%q%0NeX-F<&=!:3VOX5B8@fSWF-aU6PY5).hGYS8"AW&u0h[mgI6dM5W$S#cfQu`qgd(&W87BLpDjj$*JO/*Uf1g.PY75&B!#+diOl.%l'596%ks/.;D'DV/ghK5hBOG["GD!r<HMq=>""_@UPI--4+i=V>[AtLEt$$SiO]h)Ef&a]9GK;(,oD];dNZ4)6ePd1SJP<X0pcs!%nA>m0'Gc:1,"GBn_!Q,sQu^"s;I#q\TZ*Xs;,fP-g(]lM"&rZ1TiQ#(M%IKLOsdO\+A3,J0G@\PN!5P-PZ9o:PJgh>K:kf)(u6G(%J1JQ"#c+rJc:iQPB9pi%+`lL70BXQfb),=6N>AD#>U7gH.J=9E<t\4A*7-&CMY39k8X^+R/HMP>1=\c-Qa"AR9>LD>=e(im$phrW%)-`B#I7Z2?.*2Z;M7B7[75TjkV$Vt95+]kJ!Q."+<,P:d!m]09Pr;NB4J6H4`R`>$@]T)W&8MQYQd0&5J654X(h=<P"!]5&FGPf+%*QDP]GZ0Ehdnuif#QF9rD2BDN,/0:noh"/:Md3M1Wj[!dX"@b2;A(AB;h>Y[?5Hni&d;Ysn&gn66"3:C''6!;7"3H9<a,V\$r0u_%Y9*Pf&GeDUAbf5G8qk><0lSsI93?$;lqiZ^M1gFX,kQm*DsDW&`RL3p=%jPE[H0Z?N`0\)Q#D;UWG5(6)4iYQ8i>J%NnTD+914NN%Z":@7T_UA,+6Zck)I+I6Ej=1.;QE@P+j*0^HSAHtis$b=XP"AkA`XkL9kt%@on'+\%5Fu]a%0u[D\<d2e2-iO+n47m(FL#+8u4VD%[If9.M@@s;2$>l9XMoPR10\4g<I1;Vl'>;P[B+a?LWL'B?pUN%/IaG:V.$++"EcY[O%!kfHb<4rCFqjHhJo\[KRG?VRPJOCpM:P6%6^Z@9Y#jqh.oLY9V*;g/S$*YUE[nTAD;aJUDX(P\ba'+1+8&@E#;tMSNfbY^XL(BSnj?Po3C-JU#tX'9AN:r"V!THCiJ?a.4?LGD%;*Zn-d\od]Z0Q6HiDTWCQkkCA!5poq=oqYqTqk>G>)mhf,#nnKG6j.i><tm)Z"oT'Q!0)<90dflHaD-5O>6ENg9cDf5cV12613Nb%5a3JDOgA%^C'e"-HtP(^*)YhQAmY(Q328=0,t8(eo9Q5=J4*VJfO%cl.=`m!%7#1b`>U]<2fK>";eoBYkGlDA4/a]m>F#qQoWk"F%294nqc!2ahJs#_kBH-s;=C):<jHV*n!>/a?$3sT??u`#/Wibn)M?=8pAL.?CYZ4gdHFZ):ZN*k#MB=i$h4B<J0VQi+>"]=#`_p@o%15MgkWiQ=S81>O/&.*n8P-e6J&6;gm9U(eULb?UJ=r3e)YUt2s'Cl#/)]R1K0-p"IU[P_dJX.:Qh:k-RaLt/rWt)9A-3/abkR:q[%,p`jJS]bDLV/nLtDhjFYEmYuRQXVJhp(5UY.=!7BUa-/"d.j)oV6<Nq5@Ba4r@-W'6<fo/&!rTGi`:2e0HKRJAXs;D"O@.L7!m)A%pP<AQ)^a$B3$0Ph'S2B)S.8kPa[mq\P\I+iPANop*,Qh[XFAg5dc^e(h$"a(UpaZ>V*d)?+0gX,-^@_1H3qbHafPUgq8OgVU&5O0%T9HPndn:%?"H:JqQRX6'ED*787D#DPBW9&\86/bhG"J,n/$7Pp>3QTa<_a3l<\BPM^(aeJZkA-1>W%nUEY7>Jf#2;)c?$-.p_D1%%3jqk;+d='3G5^>l_,\[8HlPa/*MPkXLQ+%h-!;@qC(f@"r=pAg6i&c%od/1T%S.E^CTc]sV?nab.njJJ1SuB'/K>Q"N)c)G9,m\-%9#CW[X<aN:Q&9++3i@nI9&peO:NVj3;-bJ3-fYm+.NQO?8pYh#p8b>/X+1RTdoDPPWtWI.Uht4iT6GmR'Mi8)BU=_o[Tl?=nKP#=%UsEj+V,eqD`)pChS6GA+;$$Pu0Ut&k0KScm*I%UXP>u'LBtVN]ZgQHtLof#J``BuZ<f+RLn0'jReM/.n,hLAR8uuUUnS4mBGS3(,%;$X%e`:'dLeW:[2md"q!WlXqO\k8LROl'/E,u.sk5I7L*)c'mZ\M1fDZ>_Z0Fd5!.Z;W41pCl:c@_<OdQ]oUkGa75`H=`f=AkW!l%+1:m[D'mD6;I(SX3/!0l&eS/EEH!JX*SsOl#oN-!alq7d]R<Z]P69SbcqAhYKFK)%-l$(rKP$s:^c@#j.]d`ZW@6^\!BKA_@D"6G%b/u3m<E3(#^Ach:.m6AE8iRY`Q@!."GW3`[9N_Z<%#eLpf`4u)WY!LVDTYS,fmr<ARY?$?Aml.Jr3aZm%%pMr/.=.2TL24[(03`'%_#ZRD<oS[@UH@95D4k5icGD[fZS99R-s>1"_/WRo$KJZnAsMg]9;s;#3ER`#:$1SG5Xp#8c,!ff<YeQ2XE99C_$jgb,pIBR(eY=D%ob'E^nM9B&]]M">hj4oRiZ5KZ<K+"*?r\KQ*9(U2jTK!ljTM>q,EJLt&eR,sM,fi9F/7Ap<@.$4GH<.ZfHPXu'<<V=a02Mc7>J)e%q^8?mnUTKtcE3Y;.NKip9Fd0C!FLgk694\B_3gam12,7QW[\+n%1EQI?&Jq#abq16U.W<s<9Z(P<U.1b)/6j(RS'Sl+8.cjV6rb\%][ZY4VU?WfWEcg[^X,sZQhQ1<fWl>L.l/RYGCndcjoiL?>X2c\A6PRI!&fdBCDe6,[!Ji#+Doi'p:DST^d@Tqb5`?WofRP.&hY;D%7PbW\#$egHFomkH&]'Z),RG9K:_W#\;A--@Q@s$L8eS;??'90/%[Mc`23fFlCQ7E,>+7)Of.:F.`-RZ%CDO?0>jDX:_OVfc4%1t6%GHmLt9<m"MeR<f=jJ.*V;B@&TH%[SGi&"4nRmAG+H^'X/1.3SDF6]LCiXVW_(oMsY^tN1#Vks7+$SDJE3hG[DV-kBhkXJ&k5XNSQ%;Lik/_C0sTU%C>kPeL?.V)<4FdX!C:Zn4lbD6Y=Mg;Q[@m?g^b?UlO3"XTC'fQ)idTbdKL^(ac`TebL?Cf7,:L/K@RY`pSE[ae>q%#oNOXOtq^mLFuC1$>Pe,:(P30D].KGWpKDEJ>Amc]5aACa;>+V6)9cgTS'p;"gK2@hut@WRn+)65I028UeHN2Pf]L2.?hGNZqOL*%dkY'#7E]5D&XANefsFFf(b6l/'.K+_fVD3l%3fAP+=LfALe='N4*eOS>7I@c\DJ^_%!GJh,8]GRE`''U=/U@;^spnrMeYf?HbF!@%=a=OZ,;-!*-to-:lGbZ,(BmDQ*bEkj_.b6&Di)OHHLIR^@;_V3.)EQ[OseLGakP'38KF=bd[I2"dakAod5F'6V3\AacFJLi;@>Q6%V>[&^as1^a7Ee=To^[AY[N\>[`qMGfS<V(88Jr^I$MOD`<,WYSF#W<Y@/IA+H:pNQO,93TCXS*Trt:DJHG(UIr@mb=FauHKP?T4t%1B[/EJ.N797k*SJPWl'19&Hd8MJM-4Ph&_qPdWuNO1*Yc.(+pc`L]e/Pa^47..%.[;'$ksAVdmqKeArM`E%%Z-LO0daXh1Yd8bi@%TrSH-#HO>m/HKV2E0D\8Rd8&OpJa*bE]T%l=R-8XeZ,k#.=Mn0;8YAa6rf'.<Hi0]+sYu-a=J`THn($K-UsVMd\kSVl'p3bl0iuf%,dfJt,V:ac,OKUi&ZSk',!r[W?UQ<^FVbX)&*QH8*heJt%C(fs(]&?i'O)0;+sdFgaQ,$%P=(^2O`,pCCk?SHEf4uD]:f0$S0"sE%p=sH:TNJnU&s,;&V'R8?fLJ`7*qjmnTAi02=opIb:m^UX"D!lL/Icb[>O%DuZ_bBADmn.V\=5(XVL#SF[`58_:%irI]3$5]Sa]5;%lNnlN@"`P+RnaPcW4dUA?](t?:jo'T'.:0jXN&AIM1(\*Wu[AO6tlr=hMe*D2"lWarmXR\%C)rT4[p5S2P_9QhS$m$,C;Br0N.0o%h^mHR0b?[\:I;/sG+@>a$#N%lUq>BeCR3$51j?DT*-U3es!/kfO@!1.%[e`0)QGXp*DGIM;`-kCK98`BMFXJYL5B'E,b)8P3_5!f%_[48q+P3$[,I-7g3-_6\pr-d0M`j10MQN=BWjHkiP$8TZ:(AF.g%C7q-bc>&GTsUVHA&JJ1e@%e1c!1DO[^\0=]3ouf2!<SjGHQ>%P?i'?CpM59ND8u>Yt<eiCpGN-SYVuL'PWLLg0tST=c?'k3?s_jf>o4C?t</'aJ:</`VuD]`E#YZ'j;NBjQ8k,OonUNkU_ujH:am;%6n`TQLg9[fQs9ut>`sFYPtLIb8YM;P5cIH*4"?LemWM67P.TOJRA<V.PN:gt,Zb!mP13AYU(&iqRd2[`M@rJiVbD-^<@19J.$53O%*i[5$TkEQ3TN-=aeQFqo,kiXS7rel\,e\\)*Ko4*B[0*8EAYhjD3#aU.j9m@EbhJuaR5?n)T`/I`Zr$idWf<S>8iRhH;!:\4D?p@%[i:I2$:Z;?W,[LFiW3btGpG,&GpG,8\Kj&9GpMVUo14ap7oG?.@fO`?@fI%*,oe?P$>^sY'of<#K[<AY3PhRh/.DY=]MjYB90cCH%at,8XKBif*=U*YVhCg'GrMrOA*J2CXpkg8YO:J%?E!Gu7?jYK4E=s!9/@!@6.4h`06S=*iX=pI-(QodO;-6R)<`hDA76gJi<`m5B%Ktc_\/kU3hXKPr=#tQ!bK=C/Qld(mha9koP'Y>A7O-p`K'+F\#5u:tr87/5$9>G#pb:%?@(m%Y/_@iTRI@B<9!`gU-Op]%!`*QmZ%aOj97Q=(L97#StrO>M9?-1Wm468#1n5\Q4h/#D14[Z2)Q\6852eLW\=1m[VT?7)t*'"ODjO+]BV!Ab<5*M5q=aEZ^oYb@fl2Jpm0%aO2aU=ZVL1Q@\HBiP5hs@_-si:"TTM.mrs*FPhUJQ2n981$s079C2B=<L/G/FT/AI1hrE#Efj>mV:\!\GtDn]KHn=T5KTI^E8Z"P%;'Xn2fu_O,BV>DtqR,pcQB:m4jUc8KCRW3tJ&Z_?AR"b]1779gJd&N>X(>K'A1t7T.IE[ha5fugL^T0CJu:[^0iHptQ3c!>aDu3/%k=^oe?"XH^JfH-F9*bpD0iu8=<'E!&f3'#$f3'"=f3(F*_^Qt\[WSURKMWUdShUMtYub@^V*e3hkqL[i_OJR%lRVN"dSsQ[FeU\a%XAi`d^><Jd&\6070Y,H6K5="PbbC"F4*X%5%3ZM:`2QpFC1pOS0<bQ^",H;*9@-]B0<djI6nbd??kcu;,M-'"=%=pJ"=+a9YQTW[%C"HL2E-n)k=Q1^J2^ZsiQ?Y+`OS:hbjW]3:9<iu>:C1uTLZE`C_Qq5Zks^.4(a*pTOa7bPYo^3]SAGmmRNII)&eI[l'.otHliI`Z%@<T,,'5Ju#SqC9N6OM!XY"K^:aNLCuddcSXW3Dd7&gT5+CB\c1\^Xhe4LN@KM60hCK&Gb$GA>9]=OB#J45"$a+>004.@72h0glbB%%V(2=+EVt<-nK_XR5"6qc@HA5LG/mP'JL^u"^!]K!m2R&f96V6]%&.CWi.1EVXgu<l:;>gCUai68LV6-:FOfFm^:/QM4OWCT+ufR%I1RX&a:bbpQTh.bEe9t*&eOIDPp-8fase1;S.0KB39qsHjL]QC>YIn>UO]0amjV8u"Efr3p-%bLA/]GYAdK%5+%0^t8EMCq!Y5jR%hTU)-JFQ?9XKr$4[mF&,g%R0\n+SXK%a+"6R]*Q/"gBU/TELq[Hk&5VWkoBjX<)ut4l'Hn<bb:!6Fiks,6O&/(0I6N&qO/KX^!1Y%9._0]C<Hp<JkHG4oX%`<Bc'5YH<tHm+O;OVJip,Wm@>@1>*a6uZmjMYp89l%7Ant!i"E,UjVqaL-")+e"02P*iQ`Dhb2Nu`>WPPI%QP5=\A28gLQ[l:V=4nm-X?8bn5_lD4V2r>48LNZOU4CXZ*PPLO,2\&L$gBL(L4SM75XQuSF?i7>oAG$)LTp!j@3W:Q5U]r,AE:iD%Rr_sLNpl!o"<#q8Gk$.Rh:L4.A'37q%WXAW^k&T&f?T9='"pZjMr[u_l$Nc;/tMIYME?JjQ\u>g^(ad[cGrn,3Pcmc1H5MO'_'n3%WTk,#,53TR^41YPK)"fEil$1`3;c++97Rq?BeFtYrdY\F,>jX&-O;*s4,dgnnEVO!4@OucQ!=CAoj2Zq.2^0"/cf\H.[,I)kqNL?%HH@HW*J].XV,f%>l2HKmWT94?9YBF!OjQfS0u]rT9N';D@Znjs24#q$7Mb0Q<+ARG9>,>ABL0b/9?Jt$oa>IdXj]^[kn)EN:(Yu]%/lHGu'O.Er'%0?=hbeoX24'4<VmQ/(EuEm]lKU6nJ@,@B%A=d+RcI-n.b0>3Gg3'P<5muRem(Pm1p<<L:^Ong(.#bJb/PG`0=q?T%*#5LCY^'0p,pqK/I)ZAg)RkaDCe>(s_.D>a0atC)9:6LBVuY.(!#bArEsY\&a;7H$&P-5Kkn'+b+r3V)7ZpE"Z/h'SmNn3%K/Aiu%@Qf&k\\tp%0=f"*H[tJ$8LdoB))FdOVW#1%OZg%IN*;Y1&nk+b<-!gP(qnuC&.&f*)!(,Ccq#3X8TKYJfbd<qaX'tMH-)mMN3%c=%j:ZsEHH@JpKMNn\J2Or!aX&'8oo_sah)L[)!iF:X.K3RSEeu7EFXjpiN;PJ)/cjoj2bPbN#d7bZL6>4-4,"MrhLrZ$o@7pqo7^?X%??->XO+#G,$[js<d\$Q<V%@Gt`QAGUa]4Y2&JYp!KL]*H!^_6tEg7qe:#Y>-mOHD_a;14LA_@X+[7r<Rllb.C3.3)8=8DE"/JU=Y%\Vfg\1rM#Q1edS-J<:Ji@mRQE=]kq79kZt:M$P`R9QN51:icpK?W54<90h2>QTe-p>QP[%5,3dK5D34^'k2:^U"8$fQO^A!/3QH=%>'bi(,HY)_`3MJD6RRF^\U501>45TiaYj=M#+tG(W_9^!k"hQ9'SeSJ%_L2\iZ=4D`=8#-Aa!h-Fb4^H:P?(F0mFJmXE&Tk>\Mej%:+^N'=orR:<HOiZ!4%]\q^`2]q^`2?q^_ac#EElcI?oE)!`SNnls(ZmH5(OEKC;XhoM)FXQKp*\39.llGeD?8Np7MC'Ht-8dN`e)%V8qd`997GJQ@MA(s2obUE!gS%pukGbca)R_8%[([\%)b@'P?2*fQEJfDIGR!IqDXTDsAuI,C&8;BEM`E;O%,i`cDh;f]+YVs+W+,%O5Mb>JD`THJ99ie!"3Xie1d8"^g&L8TUsA`_uRE[%;Bl,LU?6aekrOSXO%57MieQ1rWRh\2@Tq2oHfHM5.V=:HYGi2,$d-(]u,@#%N^MI/7/PDi_1!T@I(moJKH9VIdZa<Dcof*ccDo6Q')KZaVg@??AYk8n;c!Sto7(V\+CHS%MNngtJTMq)>@udHdHYN0q?<,K$&2qY%:gG-Z'T$DtQuqkG.CP],1.89R*^&DF@`g'R0V9!RmKoL0H4i`G8-`-S3^o4=HTH_Ml_?*id]#E&-]!=1%m$DJpe.@qX:aBX';Z?B%)':Xq.H]ii%k=.Bj[po&JtnO\;s>Q%0qq3c4e9M@^(_L2fHf&@Cm$t92@2]d8lJ.1['t\N9<m$O$)TN]*-2@:><%92UW5X4##fZ*%N!TP"c!TLk+!;S?$+,Sf%aUbbo78e,KntG%iuJ]T3Ih.*:K[^3/I8B7>$k@.Md\jnjT;5/'\!,Yd\[(RGjIWl5&K^\9GVF"TsY9!%i.c*,1iZTu2X\S:_%;%#p3;1B]t=gh^9K.qJ7[rTk#B_hiWZX='Sr7^82&?`$:7c;UM)*]>D4Y*=BDPCi<7Crq'+Mr'kSY"Fe&Ta%L=;qF8;%o^AkP10^(ac`Rip:4I:p:90_%jY+l<E*O#2`^DZV4d(S#CFop#r7jE<5t'$d7o^*u?!+spZ3TIX!l3@4/0r0TGkLeC$I%fUNTt3U0]_$,I!5S9IlTGpe#<]p$1$]MirqE8F/:Wnp;dUQ.j6m+ddC`_*N'e30d^SU8e&;"pcA\gNQCHWoXnq,2#dKRt2\5#0pt%@H*k@6LH:DN6Jo3gu4*;c950J-gH$IL4l`(m\qqWrY\[5\TaVO1-"S:-_:Vs*e:RrbVK9_`1Nc:_TN8^WFo,QGp[r;4HmKa4d/p_%Gp]YlGU@*X\Jo7ZG=l<O/LAtGVkbY^:.Ynu:<=&e8feSB[*YrHV:^Yb"K1Zs\!^/M9Uq89a=1]A.Ds8`3@-XHY`+%NKW5VKs3;Sm%ohHrgU+2/:e,YrrA54Sk`__O+VZ]5I96!]5J!M*$3@-puA'R.^`LKlT-e0[1gXR`e*Lp'VMQ0V'`i-Ms-9J+NG-OAC3d"&0@-<c]%)q6;cU/&fTm$&:^GeOkrd7F\LTIkFU.)U^7*[*ib#l''9KW9-TTHb03B,3_UTp3J?'M-0[]I0Ot"\4LQ?d\7L<$n<K@haS9q?`q&%peJjX_*"LR8Rn!th&%G\n;NNf)Pa)_7M]^DB9X7Q8r<)&;JKZ2.I@D;PTi^KO"dCGH?m4=>EQ:7TH0O7:8`]rfgj2@K-XI90IIBd%#`iM$csUI+U:=7"UETa)HHFVTYZ-9<N''OJ[t?L2#TFr/!"4Jd=$,DA!&<KZiN`]kKRa1ZQ=iOSFt>2)"9cS@#[m98:IM@BON;'c%%!5CD@XReS"N0n(fJk=N4BX^+hIaR(\?$$fKb;SHou'"k=JIdn!SZB:L/rjATi,5L#=sN\?Y<_.!G;!&!YldY<nnj;`2j$H-!`W?%MQN7An?%At:\Z3&n]<#oVi#hLFi#LcMkZD/d"+h!_r0dtB=1Lu"G^Co`Ug(W?*2*od$j];asY9bkd'4^S?Y;P';r96keu,,:@t2h%'>N8+8Lr`O`3j\TiKd.KDQdJb'P!?Zc.HRX2)\#J(n3X>C_C-aUk@i'YnaSO'U+XFlIdGMZ,n6/-Ic?3_h:a'%N%ktN$pAg%\j7Q%/Y>1q?o$T:_6F:n(-)fCV@6P=$us.]4>M2L9Na-WPYH[MYtWdqQtMUFBlr?Y)k3o1`[7[]nO-P96+FT<,GQ*F`,<RAZ`^Q)qS:bE%&S.(*ZR$VS?](t3X:&n?*o_:CA'BpT%cOZ&p3T\%*UDWskMjScgX9Xof!Q5da6+j1/AO=%dAaRrEt"((+PFod_%%)7\i`#;_)VaK%nU.>^5FM"tYmI&t8]N3-\Kd>>_%DRjl'r?pAV+lZ-Q(RVNHT,"2qk6bh.Xk-i'oe`ctLJ8Ce6##QX]tTARNB=h-)lQDbkaK%/2dt%_a$r\#f./]!28-Zn<-/!`PDnkFkPE5j*6t++;p?&!?(a:Gbfbk[IjBe@N@#inP'nY*]_%c_+GX>7FJ,t]gNZ0!JC](@)X9$(_DX"%A+TPG1k\2F\<(m1!aUcg'u2Yh$%a$ur#B,_'=Q_TRLMOS)X%`PZ:`@%Z7mN(&JD2`\=./,[dW'ZQn@Qj<@S,+PRH)76R](FO6WL\%i#3D&qX@&:cnS.d7O3XTN[mSC>CBq4'8!gu#']0RGX+#(&$?1lHR#%UBVc=E3\((FAc"d+(YoF[/Q*o(A@%8`Ih'qY+L<6,Kc?C%%Q^B:sG6e?S#Da4#U!tQWLcl_;<Wk8'0lp<T0j&#+KTX::QG@4NXaHC_DSTOG#,q!b0+mCYJC#nWKUP2M#k-#JQDP8F(8bBR@mD"l%5jiYXUS*bQf?Xb`rNb5]7OSNa+^J_YMY@W(7+P<+5)2OqSX<\V]npsui;,HdqZS5J>!MaeaGpuQE`"7@COo:QV:\!\c%^p7&.ZN]%[h3Q#6jXf?Kd`3X]S+siTr1[%:F--SPg;Bkb$MtA>fe(`>cCPN>XnXGiVk*)q0+'tRLtE$j:TM5V;tAm\B>Pp!!.Yp1%[>[P27sp%pp$7i`YBVN5Rod6O`1:co";DK[\Un6V:Z.:a;pi^O7"$C?&B$O%_W'VQnF_>$tp=a%`k`=0r.&c.8dZX*U$.3X&fYVFNs=o66Wg%%A&.s@D=1"s.li4>([)t'U>nN+bL)&!(^B>ZmmaZ+@tUR3)IqgBG=P'Pnj`'rbZmM8HJMk,=h-q4c;?l-RhD3u6?"R\.>k*l]?md8%X%H,]QV;(dX9jA/+T?&)OjY'l)e5OW,Uc?B@mjf2)KK.LnFYr#$q&MG[PCs"h$5-??H@VUOt.3n*agGkD%r/7U?9iQA#UiF(7e=\%(u*LrT=hV&#u+rce_qnq="]McD:RqDkbV7,n^MA]Y,tfcik,8.\W/;7gE<O%L^,=Cq:^clKPd1uYBS:P/a+,f.NKM>TWMCZ>,`.-%Cj%KeE6FZb]nB"=lGj6bA9dXo8bBtf.,r5+2YK0Lq)#u):t0_XZNT714&*#1@kHC/OIhrnOFsr"qp:[GPZ+kBFed4hU`2WQPi`iA%T?6&I_u@5SJ!B!5LO)V(K7D11J:eBqo+N4qMeumi.LsDBX17p=G6D3Fh+7<"/1V.*aq%bb7.+4>9psmlP?sH`9<GltU6^m?Lc(tR%<@!p,ntI="%-1ecJ]WO)$98cB'-e/mlH4cRrFEc59\\=9qBj7Bn+9>F.35?:/gD-gB&OE.ijom8SBrdZe=_a8fu=<YfdB,:'&;6g%`H"l4ak3mJE1ij*kmmIO5Ro-0.nhu/@Cp&!FfDYXAOgH*II."qZdSA>aegG!4fMb_K%C/iF`0gX1!FUb4L,&L.^Q2hgP07<N)6F'%eDB3YG0%7TdHg0j4@HWd".PGaNpahN.X6gaZ$c)M@n]@9@J`ebcEE]/.W.;tceD&/8ZG0^n&oOX6A"<G/aWD'(4t'M1^qnE]m8>r%+FlVBjR__SM-&=KXdepu*Xe[lCl]'sHJ0.YR;]e*('lUKHF?ZO@HAWd+sj;JfXi2TjWTj4T:B<uU]H<sYA#t584#P1C@_j$Dk%HB%B&pl;8^BKHRTDoaApdGHo6'saf=bufdAPZ\cr:o)I3<?cZItsGe*jI.UYtjm1j0mPR8>Qp1mgbs;O3cA[h98U5Og5VLCGB<[>e>G%[!sBc/-p-qUf+J&[B"615W\W9$M.M:PcZWT23b>I*KR9N@`-,PM$N4flpM0qcT[LMnB]e*P6)q.4d+>FgVaBg,(i@QoW\YYO>Q8<%]ol6R2mG;PJ.+"_k;!ntL<2fs&@=T5lO[Eup*D4W+)5GOU]n+8[mp$?g*]rpcnpVR!&9F73m5DC,D?=m7,Pi!Z>XP?0bH*a6F;#m%%2BdN^:OTn)Ho0Z7*qfS9A\oRAER>r=mC+i/$)^t4^9C=7u#Yf'8aj),TK5lP#2L^%E:u6[>pbsA]^'S;T.WAYt:/nY=N_kA2?(\%f!Ntk&hcg:8YR\f7fPd3N:Orh=f2(jhi(FnS2cr7eBp]G1%m'\,fd@i0\pG@m>/%U(ZL_XGhgqCO#O=&9aX;B/X\T.WKCN\F9?kH%DX=ld:bg1,H@roe_cYD.<5!#ji^_>,=ecTLQZYh_(O'DT*FBYhm]1$]TFl.@5q[`(I,6,o+l_KN[#s0679JV+qC(=DZ1Yc,cFYJS%TE;3`l`-]p/u#_Bh[H>jY!a3'[5jJ"$lH3l2S+sDgfEU<M6s'#.`r@_O5h%-F9tGC0W=.r;L4o*f\%2?==N)Gf!/VW:pX>[2!Cn<%"Z?JuPAZtgK(tFnM&ll8%/:W33Q2BtHJarce^,cB-mZ3%WFDk@rbCa=2n.8jAHZHYp25="[-E,"-:lGVK`S/5BbYK5DMqn4:100e%),HOHVMI.u>;--i%)r`ZHZ`c78'ZMY&2mAq6?k$:UpU'BR;iS%/Z_F6E>]*SN.BjRbjHitn:aZEd-lSuXK_SmrbWeMDq!%*1(^8Y%__Y&oM%kK!I'"`k[2sL%RBI"!kMi;5quT8-VQ.Q^aNZn\:#e6:b"*J;#K0B[[Obc=hJm$k^F9hPd3^\sLYScFGS6=+gouK6&eJ_(%F<GeU6D3@rl9t#76+8,jjg_dgaTVEjR2h`]=?2M]9"inh@\]%Zg#P@m2.%M59c#Y40R3LIWOSnhk>tb]c-.U?ifFc<AZC(mn,j;l%R8-b]UH96Kf;N(<m^],C`9/+!'.T;I"d4d;FDd=N(&"(V=IJ'ZSfC9Z2T*JaA[u;?9ULXc0(<IFmT4.)/'>#!LD=>9'S0D5=0n?h%;S5u5&DnqV?1Gf/[^[ho$X&A=_M2DQO#pbNkDN[r?76)ilXJKac#+IlqI\FP]AhAXE$>b1$Sbmb6\?:%%:H/@'.TsSWNb]6Xm!^0%r%!nI!B70DVF?nr@j)us9ZGdQ6:9tFODQ?*ZR,kMKJ2V;Pu?4f@EZ/(m!,RV$cC:q+]\WnX$*S$rkVeeaYl)GfQ^#qQB:j6l7$4#%cdWN<leEHQGXE8%`r>]p^lRC1h1,0/rq42#D]^)#]tD"-Is6DBo>@KL0/!ic4C2@^5(._Oqss16q&-qgq=FO-]2()H07SD!\\.h1%qr`HZS5[GsqtgmgrG_KQ8da#d~>%AI9_PrivateDataEnd